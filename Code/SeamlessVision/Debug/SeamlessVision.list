
SeamlessVision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004520  08004520  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004520  08004520  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  08004598  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08004598  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127be  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bad  00000000  00000000  00032856  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00035408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  000364f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f042  00000000  00000000  00037480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e264  00000000  00000000  000464c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00051115  00000000  00000000  00054726  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a583b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d94  00000000  00000000  000a58b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004450 	.word	0x08004450

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004450 	.word	0x08004450

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Delay_us>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay_us(__IO uint32_t micros) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
#else
	/* Go to clock cycles */
	micros *= (SystemCoreClock / 1000000) / 5;
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <Delay_us+0x34>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	490a      	ldr	r1, [pc, #40]	; (8000258 <Delay_us+0x38>)
 800022e:	0018      	movs	r0, r3
 8000230:	f7ff ff6a 	bl	8000108 <__udivsi3>
 8000234:	0003      	movs	r3, r0
 8000236:	001a      	movs	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4353      	muls	r3, r2
 800023c:	607b      	str	r3, [r7, #4]
	
	/* Wait till done */
	while (micros--);
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	1e5a      	subs	r2, r3, #1
 8000244:	607a      	str	r2, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1fa      	bne.n	8000240 <Delay_us+0x20>
#endif
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	b002      	add	sp, #8
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	20000000 	.word	0x20000000
 8000258:	004c4b40 	.word	0x004c4b40

0800025c <HX711_Init>:

#define HX_SHIFT_BITS_CHA	7
#define HX_SHIFT_BITS_CHB	0

void HX711_Init(HX711 data)
{
 800025c:	b084      	sub	sp, #16
 800025e:	b5b0      	push	{r4, r5, r7, lr}
 8000260:	af00      	add	r7, sp, #0
 8000262:	2410      	movs	r4, #16
 8000264:	0025      	movs	r5, r4
 8000266:	193c      	adds	r4, r7, r4
 8000268:	6020      	str	r0, [r4, #0]
 800026a:	6061      	str	r1, [r4, #4]
 800026c:	60a2      	str	r2, [r4, #8]
 800026e:	60e3      	str	r3, [r4, #12]
	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8000270:	002a      	movs	r2, r5
 8000272:	18bb      	adds	r3, r7, r2
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	0014      	movs	r4, r2
 8000278:	18ba      	adds	r2, r7, r2
 800027a:	8911      	ldrh	r1, [r2, #8]
 800027c:	2201      	movs	r2, #1
 800027e:	0018      	movs	r0, r3
 8000280:	f002 f84d 	bl	800231e <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000284:	2032      	movs	r0, #50	; 0x32
 8000286:	f001 fa57 	bl	8001738 <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioData, data.pinSck, GPIO_PIN_RESET);
 800028a:	0022      	movs	r2, r4
 800028c:	18bb      	adds	r3, r7, r2
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	18ba      	adds	r2, r7, r2
 8000292:	8911      	ldrh	r1, [r2, #8]
 8000294:	2200      	movs	r2, #0
 8000296:	0018      	movs	r0, r3
 8000298:	f002 f841 	bl	800231e <HAL_GPIO_WritePin>
}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	bcb0      	pop	{r4, r5, r7}
 80002a2:	bc08      	pop	{r3}
 80002a4:	b004      	add	sp, #16
 80002a6:	4718      	bx	r3

080002a8 <HX711_Value>:
    return sum / times;
}


uint32_t HX711_Value(HX711 data)
{
 80002a8:	b084      	sub	sp, #16
 80002aa:	b590      	push	{r4, r7, lr}
 80002ac:	b085      	sub	sp, #20
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	2420      	movs	r4, #32
 80002b2:	193c      	adds	r4, r7, r4
 80002b4:	6020      	str	r0, [r4, #0]
 80002b6:	6061      	str	r1, [r4, #4]
 80002b8:	60a2      	str	r2, [r4, #8]
 80002ba:	60e3      	str	r3, [r4, #12]
    uint32_t buffer;
    buffer = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]

    while (HAL_GPIO_ReadPin(data.gpioData, data.pinData)==1)
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	2220      	movs	r2, #32
 80002c4:	18bb      	adds	r3, r7, r2
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	18ba      	adds	r2, r7, r2
 80002ca:	8952      	ldrh	r2, [r2, #10]
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f002 f808 	bl	80022e4 <HAL_GPIO_ReadPin>
 80002d4:	0003      	movs	r3, r0
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d0f3      	beq.n	80002c2 <HX711_Value+0x1a>
    {

    }

    for (uint8_t i = 0; i < 24; i++)
 80002da:	230b      	movs	r3, #11
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
 80002e2:	e02d      	b.n	8000340 <HX711_Value+0x98>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 80002e4:	2420      	movs	r4, #32
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	193a      	adds	r2, r7, r4
 80002ec:	8911      	ldrh	r1, [r2, #8]
 80002ee:	2201      	movs	r2, #1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f002 f814 	bl	800231e <HAL_GPIO_WritePin>
    	Delay_us(10);
 80002f6:	200a      	movs	r0, #10
 80002f8:	f7ff ff92 	bl	8000220 <Delay_us>

        buffer = buffer << 1 ;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	60fb      	str	r3, [r7, #12]

        if (HAL_GPIO_ReadPin(data.gpioData, data.pinData))
 8000302:	193b      	adds	r3, r7, r4
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	193a      	adds	r2, r7, r4
 8000308:	8952      	ldrh	r2, [r2, #10]
 800030a:	0011      	movs	r1, r2
 800030c:	0018      	movs	r0, r3
 800030e:	f001 ffe9 	bl	80022e4 <HAL_GPIO_ReadPin>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d002      	beq.n	800031c <HX711_Value+0x74>
        {
            buffer ++;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	3301      	adds	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
        }

        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 800031c:	2220      	movs	r2, #32
 800031e:	18bb      	adds	r3, r7, r2
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	18ba      	adds	r2, r7, r2
 8000324:	8911      	ldrh	r1, [r2, #8]
 8000326:	2200      	movs	r2, #0
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fff8 	bl	800231e <HAL_GPIO_WritePin>
        Delay_us(10);
 800032e:	200a      	movs	r0, #10
 8000330:	f7ff ff76 	bl	8000220 <Delay_us>
    for (uint8_t i = 0; i < 24; i++)
 8000334:	210b      	movs	r1, #11
 8000336:	187b      	adds	r3, r7, r1
 8000338:	781a      	ldrb	r2, [r3, #0]
 800033a:	187b      	adds	r3, r7, r1
 800033c:	3201      	adds	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	230b      	movs	r3, #11
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b17      	cmp	r3, #23
 8000348:	d9cc      	bls.n	80002e4 <HX711_Value+0x3c>
    }

    for (uint32_t i = 0; i < data.gain; i++)
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	e01b      	b.n	8000388 <HX711_Value+0xe0>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8000350:	2220      	movs	r2, #32
 8000352:	18bb      	adds	r3, r7, r2
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	0014      	movs	r4, r2
 8000358:	18ba      	adds	r2, r7, r2
 800035a:	8911      	ldrh	r1, [r2, #8]
 800035c:	2201      	movs	r2, #1
 800035e:	0018      	movs	r0, r3
 8000360:	f001 ffdd 	bl	800231e <HAL_GPIO_WritePin>
    	Delay_us(10);
 8000364:	200a      	movs	r0, #10
 8000366:	f7ff ff5b 	bl	8000220 <Delay_us>
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 800036a:	0022      	movs	r2, r4
 800036c:	18bb      	adds	r3, r7, r2
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	18ba      	adds	r2, r7, r2
 8000372:	8911      	ldrh	r1, [r2, #8]
 8000374:	2200      	movs	r2, #0
 8000376:	0018      	movs	r0, r3
 8000378:	f001 ffd1 	bl	800231e <HAL_GPIO_WritePin>
    	Delay_us(10);
 800037c:	200a      	movs	r0, #10
 800037e:	f7ff ff4f 	bl	8000220 <Delay_us>
    for (uint32_t i = 0; i < data.gain; i++)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3301      	adds	r3, #1
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	2320      	movs	r3, #32
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	001a      	movs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4293      	cmp	r3, r2
 8000394:	d3dc      	bcc.n	8000350 <HX711_Value+0xa8>
    }

    buffer = buffer >> 1;	//25 bits to 24 bits
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	085b      	lsrs	r3, r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
    buffer = buffer & 0x00FFFFFF;	// clear unvalid bits (24 - 32 bit)
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	021b      	lsls	r3, r3, #8
 80003a0:	0a1b      	lsrs	r3, r3, #8
 80003a2:	60fb      	str	r3, [r7, #12]

    // output data is in two's complement. DATASHEET:	When input differential signal goes out of
	// the 24 bit range, the output data will be saturated at 800000h (MIN) or 7FFFFFh (MAX).
	// To printout and keep two's complement of 24bit data in 32bit variable, shift it left and than right.
	// the sign of 24bit initial value will remain as it was originally.
    buffer = buffer << 8;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	021b      	lsls	r3, r3, #8
 80003a8:	60fb      	str	r3, [r7, #12]
    buffer = buffer >> 8;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	0a1b      	lsrs	r3, r3, #8
 80003ae:	60fb      	str	r3, [r7, #12]
	//OR
	//buffer ^= 0x00800000;
	//buffer -= 8388608;

    buffer = buffer >> HX_SHIFT_BITS_CHA;
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	09db      	lsrs	r3, r3, #7
 80003b4:	60fb      	str	r3, [r7, #12]

    return buffer;
 80003b6:	68fb      	ldr	r3, [r7, #12]
}
 80003b8:	0018      	movs	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b005      	add	sp, #20
 80003be:	bc90      	pop	{r4, r7}
 80003c0:	bc08      	pop	{r3}
 80003c2:	b004      	add	sp, #16
 80003c4:	4718      	bx	r3
	...

080003c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003cc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003d0:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <__NVIC_SystemReset+0x18>)
 80003d2:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <__NVIC_SystemReset+0x1c>)
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	e7fd      	b.n	80003da <__NVIC_SystemReset+0x12>
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	e000ed00 	.word	0xe000ed00
 80003e4:	05fa0004 	.word	0x05fa0004

080003e8 <BUTTON_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Implement handler function */
static void BUTTON_Callback(TM_BUTTON_t *ButtonPtr, TM_BUTTON_PressType_t PressType) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	000a      	movs	r2, r1
 80003f2:	1cfb      	adds	r3, r7, #3
 80003f4:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2];
	bytes[0] = ButtonPtr->idx;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	781a      	ldrb	r2, [r3, #0]
 80003fa:	210c      	movs	r1, #12
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	701a      	strb	r2, [r3, #0]
	bytes[1] = PressType;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	1cfa      	adds	r2, r7, #3
 8000404:	7812      	ldrb	r2, [r2, #0]
 8000406:	705a      	strb	r2, [r3, #1]

	UART_TX_DATA(UART_DATA_TYPE_BTN, bytes, sizeof(bytes));
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2202      	movs	r2, #2
 800040c:	0019      	movs	r1, r3
 800040e:	2001      	movs	r0, #1
 8000410:	f000 fc9c 	bl	8000d4c <UART_TX_DATA>
	logI("BUTTON_Callback Button:%d PressType:%d\r\n", ButtonPtr->idx, PressType);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	0019      	movs	r1, r3
 800041a:	1cfb      	adds	r3, r7, #3
 800041c:	781a      	ldrb	r2, [r3, #0]
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <BUTTON_Callback+0x54>)
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fd4b 	bl	8000ebc <logI>

	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2101      	movs	r1, #1
 800042c:	0018      	movs	r0, r3
 800042e:	f001 ff93 	bl	8002358 <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
		}
	} else if (PressType == TM_BUTTON_PressType_Long) {
		//HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
	}
}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b004      	add	sp, #16
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	08004468 	.word	0x08004468

08000440 <usart_rx_check>:

void usart_rx_check(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
	static size_t old_pos;
	size_t pos;

	/* Calculate current position in buffer */
	pos = RXBUFFERSIZE - huart1.hdmarx->Instance->CNDTR;
 8000446:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <usart_rx_check+0xa8>)
 8000448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	220a      	movs	r2, #10
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	607b      	str	r3, [r7, #4]
	if (pos != old_pos) { /* Check change in received data */
 8000454:	4b25      	ldr	r3, [pc, #148]	; (80004ec <usart_rx_check+0xac>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	429a      	cmp	r2, r3
 800045c:	d040      	beq.n	80004e0 <usart_rx_check+0xa0>
		if ((pos == 0 && rx_uart_buffer[RXBUFFERSIZE - 1] == 0x0A) || rx_uart_buffer[pos - 1] == 0x0A) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d103      	bne.n	800046c <usart_rx_check+0x2c>
 8000464:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <usart_rx_check+0xb0>)
 8000466:	7a5b      	ldrb	r3, [r3, #9]
 8000468:	2b0a      	cmp	r3, #10
 800046a:	d005      	beq.n	8000478 <usart_rx_check+0x38>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3b01      	subs	r3, #1
 8000470:	4a1f      	ldr	r2, [pc, #124]	; (80004f0 <usart_rx_check+0xb0>)
 8000472:	5cd3      	ldrb	r3, [r2, r3]
 8000474:	2b0a      	cmp	r3, #10
 8000476:	d133      	bne.n	80004e0 <usart_rx_check+0xa0>
			if (pos > old_pos) { /* Current position is over previous one */
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <usart_rx_check+0xac>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	429a      	cmp	r2, r3
 8000480:	d90b      	bls.n	800049a <usart_rx_check+0x5a>
				/* We are in "linear" mode */
				/* Process data directly by subtracting "pointers" */
				usart_process_data(&rx_uart_buffer[old_pos], pos - old_pos);
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <usart_rx_check+0xac>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <usart_rx_check+0xb0>)
 8000488:	18d0      	adds	r0, r2, r3
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <usart_rx_check+0xac>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	1ad3      	subs	r3, r2, r3
 8000492:	0019      	movs	r1, r3
 8000494:	f000 f830 	bl	80004f8 <usart_process_data>
 8000498:	e013      	b.n	80004c2 <usart_rx_check+0x82>
			} else {
				/* We are in "overflow" mode */
				/* First process data to the end of buffer */
				usart_process_data(&rx_uart_buffer[old_pos], ARRAY_LEN(rx_uart_buffer) - old_pos);
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <usart_rx_check+0xac>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <usart_rx_check+0xb0>)
 80004a0:	18d0      	adds	r0, r2, r3
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <usart_rx_check+0xac>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	220a      	movs	r2, #10
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	0019      	movs	r1, r3
 80004ac:	f000 f824 	bl	80004f8 <usart_process_data>
				/* Check and continue with beginning of buffer */
				if (pos > 0) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d005      	beq.n	80004c2 <usart_rx_check+0x82>
					usart_process_data(&rx_uart_buffer[0], pos);
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <usart_rx_check+0xb0>)
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 f81b 	bl	80004f8 <usart_process_data>
				}
			}

			old_pos = pos; /* Save current position as old */
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <usart_rx_check+0xac>)
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	601a      	str	r2, [r3, #0]

			/* Check and manually update if we reached end of buffer */
			if (old_pos == ARRAY_LEN(rx_uart_buffer)) {
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <usart_rx_check+0xac>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b0a      	cmp	r3, #10
 80004ce:	d102      	bne.n	80004d6 <usart_rx_check+0x96>
				old_pos = 0;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <usart_rx_check+0xac>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
			}

			uart_buffer_pos = 0;
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <usart_rx_check+0xb4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
			request_data_check();
 80004dc:	f000 f832 	bl	8000544 <request_data_check>
		}
	}
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b002      	add	sp, #8
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000238 	.word	0x20000238
 80004ec:	200000d8 	.word	0x200000d8
 80004f0:	2000008c 	.word	0x2000008c
 80004f4:	200000d6 	.word	0x200000d6

080004f8 <usart_process_data>:

void usart_process_data(const void *data, size_t len) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	const uint8_t *d = data;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	60fb      	str	r3, [r7, #12]

	for (; len > 0; --len, ++d, uart_buffer_pos++) {
 8000506:	e012      	b.n	800052e <usart_process_data+0x36>
		uart_buffer[uart_buffer_pos] = *d;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <usart_process_data+0x44>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	001a      	movs	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	7819      	ldrb	r1, [r3, #0]
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <usart_process_data+0x48>)
 8000514:	5499      	strb	r1, [r3, r2]
	for (; len > 0; --len, ++d, uart_buffer_pos++) {
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <usart_process_data+0x44>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <usart_process_data+0x44>)
 800052c:	701a      	strb	r2, [r3, #0]
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1e9      	bne.n	8000508 <usart_process_data+0x10>
	}
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b004      	add	sp, #16
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000d6 	.word	0x200000d6
 8000540:	200000cc 	.word	0x200000cc

08000544 <request_data_check>:

void request_data_check(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	if (uart_buffer[0] == '$' || uart_buffer[1] == 'H') {
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <request_data_check+0x90>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b24      	cmp	r3, #36	; 0x24
 800054e:	d003      	beq.n	8000558 <request_data_check+0x14>
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <request_data_check+0x90>)
 8000552:	785b      	ldrb	r3, [r3, #1]
 8000554:	2b48      	cmp	r3, #72	; 0x48
 8000556:	d137      	bne.n	80005c8 <request_data_check+0x84>
		switch (uart_buffer[2]) {
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <request_data_check+0x90>)
 800055a:	789b      	ldrb	r3, [r3, #2]
 800055c:	2b80      	cmp	r3, #128	; 0x80
 800055e:	d002      	beq.n	8000566 <request_data_check+0x22>
 8000560:	2b81      	cmp	r3, #129	; 0x81
 8000562:	d009      	beq.n	8000578 <request_data_check+0x34>
				HAL_GPIO_WritePin(M_2_GPIO_Port, M_2_Pin, uart_buffer[4]);
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, uart_buffer[4]);
			}
			break;
		default:
			break;
 8000564:	e033      	b.n	80005ce <request_data_check+0x8a>
			send_app_ver();
 8000566:	f000 fc6f 	bl	8000e48 <send_app_ver>
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800056a:	2390      	movs	r3, #144	; 0x90
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	2102      	movs	r1, #2
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fef1 	bl	8002358 <HAL_GPIO_TogglePin>
			break;
 8000576:	e02a      	b.n	80005ce <request_data_check+0x8a>
			if (uart_buffer[3] == 1) // Vibrating motor 1
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <request_data_check+0x90>)
 800057a:	78db      	ldrb	r3, [r3, #3]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d10f      	bne.n	80005a0 <request_data_check+0x5c>
				HAL_GPIO_WritePin(M_1_GPIO_Port, M_1_Pin, uart_buffer[4]);
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <request_data_check+0x90>)
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	4814      	ldr	r0, [pc, #80]	; (80005d8 <request_data_check+0x94>)
 8000586:	001a      	movs	r2, r3
 8000588:	2101      	movs	r1, #1
 800058a:	f001 fec8 	bl	800231e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, uart_buffer[4]);
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <request_data_check+0x90>)
 8000590:	791a      	ldrb	r2, [r3, #4]
 8000592:	2390      	movs	r3, #144	; 0x90
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	2102      	movs	r1, #2
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fec0 	bl	800231e <HAL_GPIO_WritePin>
			break;
 800059e:	e015      	b.n	80005cc <request_data_check+0x88>
			} else if (uart_buffer[3] == 2) // Vibrating motor 2
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <request_data_check+0x90>)
 80005a2:	78db      	ldrb	r3, [r3, #3]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d111      	bne.n	80005cc <request_data_check+0x88>
				HAL_GPIO_WritePin(M_2_GPIO_Port, M_2_Pin, uart_buffer[4]);
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <request_data_check+0x90>)
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <request_data_check+0x94>)
 80005ae:	001a      	movs	r2, r3
 80005b0:	2102      	movs	r1, #2
 80005b2:	f001 feb4 	bl	800231e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, uart_buffer[4]);
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <request_data_check+0x90>)
 80005b8:	791a      	ldrb	r2, [r3, #4]
 80005ba:	2390      	movs	r3, #144	; 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2102      	movs	r1, #2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 feac 	bl	800231e <HAL_GPIO_WritePin>
			break;
 80005c6:	e001      	b.n	80005cc <request_data_check+0x88>
		}
	}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	e000      	b.n	80005ce <request_data_check+0x8a>
			break;
 80005cc:	46c0      	nop			; (mov r8, r8)
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000cc 	.word	0x200000cc
 80005d8:	48001400 	.word	0x48001400

080005dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	/* Init Load Cell A/D HX711 */
	HX711_sensor.gpioSck = HX711SCK_GPIO_Port;
 80005e2:	4b94      	ldr	r3, [pc, #592]	; (8000834 <main+0x258>)
 80005e4:	2290      	movs	r2, #144	; 0x90
 80005e6:	05d2      	lsls	r2, r2, #23
 80005e8:	601a      	str	r2, [r3, #0]
	HX711_sensor.gpioData = HX711OUTPUT_GPIO_Port;
 80005ea:	4b92      	ldr	r3, [pc, #584]	; (8000834 <main+0x258>)
 80005ec:	2290      	movs	r2, #144	; 0x90
 80005ee:	05d2      	lsls	r2, r2, #23
 80005f0:	605a      	str	r2, [r3, #4]
	HX711_sensor.pinSck = HX711SCK_Pin;
 80005f2:	4b90      	ldr	r3, [pc, #576]	; (8000834 <main+0x258>)
 80005f4:	2220      	movs	r2, #32
 80005f6:	811a      	strh	r2, [r3, #8]
	HX711_sensor.pinData = HX711OUTPUT_Pin;
 80005f8:	4b8e      	ldr	r3, [pc, #568]	; (8000834 <main+0x258>)
 80005fa:	2210      	movs	r2, #16
 80005fc:	815a      	strh	r2, [r3, #10]
	HX711_sensor.offset = 0;
 80005fe:	4b8d      	ldr	r3, [pc, #564]	; (8000834 <main+0x258>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
	HX711_sensor.gain = 1; // channel A, gain factor 128
 8000604:	4b8b      	ldr	r3, [pc, #556]	; (8000834 <main+0x258>)
 8000606:	2201      	movs	r2, #1
 8000608:	611a      	str	r2, [r3, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060a:	f001 f9ff 	bl	8001a0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800060e:	f000 f939 	bl	8000884 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000612:	f000 fa97 	bl	8000b44 <MX_GPIO_Init>
	MX_DMA_Init();
 8000616:	f000 fa7f 	bl	8000b18 <MX_DMA_Init>
	MX_I2C1_Init();
 800061a:	f000 f9b5 	bl	8000988 <MX_I2C1_Init>
	MX_TIM1_Init();
 800061e:	f000 f9f3 	bl	8000a08 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000622:	f000 fa49 	bl	8000ab8 <MX_USART1_UART_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000626:	f000 f991 	bl	800094c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	logI("SeamlessVision Start!\r\n");
 800062a:	4b83      	ldr	r3, [pc, #524]	; (8000838 <main+0x25c>)
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fc45 	bl	8000ebc <logI>

	/* Init Load Cell A/D HX711 */
	HX711_Init(HX711_sensor);
 8000632:	4b80      	ldr	r3, [pc, #512]	; (8000834 <main+0x258>)
 8000634:	466a      	mov	r2, sp
 8000636:	6919      	ldr	r1, [r3, #16]
 8000638:	6011      	str	r1, [r2, #0]
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	6859      	ldr	r1, [r3, #4]
 800063e:	689a      	ldr	r2, [r3, #8]
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	f7ff fe0b 	bl	800025c <HX711_Init>

	/* Init delay */
	TM_DELAY_Init();
 8000646:	f000 ff67 	bl	8001518 <TM_DELAY_Init>

	//Set Load Cell frequency (ms)
#if LOG_ENABLED
	SWTIM1 = TM_DELAY_TimerCreate(500, 1, 1, SWTIM1_Callback, NULL);
#else
	SWTIM1 = TM_DELAY_TimerCreate(500, 1, 1, SWTIM1_Callback, NULL);
 800064a:	4a7c      	ldr	r2, [pc, #496]	; (800083c <main+0x260>)
 800064c:	23fa      	movs	r3, #250	; 0xfa
 800064e:	0058      	lsls	r0, r3, #1
 8000650:	2300      	movs	r3, #0
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	0013      	movs	r3, r2
 8000656:	2201      	movs	r2, #1
 8000658:	2101      	movs	r1, #1
 800065a:	f000 ff63 	bl	8001524 <TM_DELAY_TimerCreate>
 800065e:	0002      	movs	r2, r0
 8000660:	4b77      	ldr	r3, [pc, #476]	; (8000840 <main+0x264>)
 8000662:	601a      	str	r2, [r3, #0]
#endif

	/* Init button: idx, PORT, PIN, STATE when PRESSED */
	BTN_HOME = TM_BUTTON_Init(1, SW_HOME_GPIO_Port, SW_HOME_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 8000664:	4977      	ldr	r1, [pc, #476]	; (8000844 <main+0x268>)
 8000666:	4b78      	ldr	r3, [pc, #480]	; (8000848 <main+0x26c>)
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2301      	movs	r3, #1
 800066c:	2210      	movs	r2, #16
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fe02 	bl	8001278 <TM_BUTTON_Init>
 8000674:	0002      	movs	r2, r0
 8000676:	4b75      	ldr	r3, [pc, #468]	; (800084c <main+0x270>)
 8000678:	601a      	str	r2, [r3, #0]
	BTN_SELECT = TM_BUTTON_Init(2, SW_SELECT_GPIO_Port, SW_SELECT_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	011a      	lsls	r2, r3, #4
 800067e:	2390      	movs	r3, #144	; 0x90
 8000680:	05d9      	lsls	r1, r3, #23
 8000682:	4b71      	ldr	r3, [pc, #452]	; (8000848 <main+0x26c>)
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	2002      	movs	r0, #2
 800068a:	f000 fdf5 	bl	8001278 <TM_BUTTON_Init>
 800068e:	0002      	movs	r2, r0
 8000690:	4b6f      	ldr	r3, [pc, #444]	; (8000850 <main+0x274>)
 8000692:	601a      	str	r2, [r3, #0]
	BTN_SELECT_DOWN = TM_BUTTON_Init(3, SW_SELECT_DOWN_GPIO_Port, SW_SELECT_DOWN_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	015a      	lsls	r2, r3, #5
 8000698:	2390      	movs	r3, #144	; 0x90
 800069a:	05d9      	lsls	r1, r3, #23
 800069c:	4b6a      	ldr	r3, [pc, #424]	; (8000848 <main+0x26c>)
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2301      	movs	r3, #1
 80006a2:	2003      	movs	r0, #3
 80006a4:	f000 fde8 	bl	8001278 <TM_BUTTON_Init>
 80006a8:	0002      	movs	r2, r0
 80006aa:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <main+0x278>)
 80006ac:	601a      	str	r2, [r3, #0]
	BTN_SELECT_UP = TM_BUTTON_Init(4, SW_SELECT_UP_GPIO_Port, SW_SELECT_UP_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	05d9      	lsls	r1, r3, #23
 80006b2:	4b65      	ldr	r3, [pc, #404]	; (8000848 <main+0x26c>)
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	2240      	movs	r2, #64	; 0x40
 80006ba:	2004      	movs	r0, #4
 80006bc:	f000 fddc 	bl	8001278 <TM_BUTTON_Init>
 80006c0:	0002      	movs	r2, r0
 80006c2:	4b65      	ldr	r3, [pc, #404]	; (8000858 <main+0x27c>)
 80006c4:	601a      	str	r2, [r3, #0]
	BTN_L_UP = TM_BUTTON_Init(5, SW_L_UP_GPIO_Port, SW_L_UP_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 80006c6:	2390      	movs	r3, #144	; 0x90
 80006c8:	05d9      	lsls	r1, r3, #23
 80006ca:	4b5f      	ldr	r3, [pc, #380]	; (8000848 <main+0x26c>)
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	2005      	movs	r0, #5
 80006d4:	f000 fdd0 	bl	8001278 <TM_BUTTON_Init>
 80006d8:	0002      	movs	r2, r0
 80006da:	4b60      	ldr	r3, [pc, #384]	; (800085c <main+0x280>)
 80006dc:	601a      	str	r2, [r3, #0]
	BTN_L_DOWN = TM_BUTTON_Init(6, SW_L_DOWN_GPIO_Port, SW_L_DOWN_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 80006de:	4959      	ldr	r1, [pc, #356]	; (8000844 <main+0x268>)
 80006e0:	4b59      	ldr	r3, [pc, #356]	; (8000848 <main+0x26c>)
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	2201      	movs	r2, #1
 80006e8:	2006      	movs	r0, #6
 80006ea:	f000 fdc5 	bl	8001278 <TM_BUTTON_Init>
 80006ee:	0002      	movs	r2, r0
 80006f0:	4b5b      	ldr	r3, [pc, #364]	; (8000860 <main+0x284>)
 80006f2:	601a      	str	r2, [r3, #0]
	BTN_VOICE = TM_BUTTON_Init(7, SW_VOICE_GPIO_Port, SW_VOICE_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 80006f4:	4953      	ldr	r1, [pc, #332]	; (8000844 <main+0x268>)
 80006f6:	4b54      	ldr	r3, [pc, #336]	; (8000848 <main+0x26c>)
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	2202      	movs	r2, #2
 80006fe:	2007      	movs	r0, #7
 8000700:	f000 fdba 	bl	8001278 <TM_BUTTON_Init>
 8000704:	0002      	movs	r2, r0
 8000706:	4b57      	ldr	r3, [pc, #348]	; (8000864 <main+0x288>)
 8000708:	601a      	str	r2, [r3, #0]
	BTN_R_DOWN = TM_BUTTON_Init(8, SW_R_DOWN_GPIO_Port, SW_R_DOWN_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 800070a:	494e      	ldr	r1, [pc, #312]	; (8000844 <main+0x268>)
 800070c:	4b4e      	ldr	r3, [pc, #312]	; (8000848 <main+0x26c>)
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2301      	movs	r3, #1
 8000712:	2220      	movs	r2, #32
 8000714:	2008      	movs	r0, #8
 8000716:	f000 fdaf 	bl	8001278 <TM_BUTTON_Init>
 800071a:	0002      	movs	r2, r0
 800071c:	4b52      	ldr	r3, [pc, #328]	; (8000868 <main+0x28c>)
 800071e:	601a      	str	r2, [r3, #0]
	BTN_R_UP = TM_BUTTON_Init(9, SW_R_UP_GPIO_Port, SW_R_UP_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 8000720:	4948      	ldr	r1, [pc, #288]	; (8000844 <main+0x268>)
 8000722:	4b49      	ldr	r3, [pc, #292]	; (8000848 <main+0x26c>)
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2301      	movs	r3, #1
 8000728:	2240      	movs	r2, #64	; 0x40
 800072a:	2009      	movs	r0, #9
 800072c:	f000 fda4 	bl	8001278 <TM_BUTTON_Init>
 8000730:	0002      	movs	r2, r0
 8000732:	4b4e      	ldr	r3, [pc, #312]	; (800086c <main+0x290>)
 8000734:	601a      	str	r2, [r3, #0]
	BTN_SOS = TM_BUTTON_Init(10, SW_SOS_GPIO_Port, SW_SOS_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 8000736:	4943      	ldr	r1, [pc, #268]	; (8000844 <main+0x268>)
 8000738:	4b43      	ldr	r3, [pc, #268]	; (8000848 <main+0x26c>)
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	200a      	movs	r0, #10
 8000742:	f000 fd99 	bl	8001278 <TM_BUTTON_Init>
 8000746:	0002      	movs	r2, r0
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <main+0x294>)
 800074a:	601a      	str	r2, [r3, #0]

	BTN_TOUCH = TM_BUTTON_Init(11, TOUCH_1_GPIO_Port, TOUCH_1_Pin, TM_BUTTON_PressType_Normal, BUTTON_Callback);
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	021a      	lsls	r2, r3, #8
 8000750:	2390      	movs	r3, #144	; 0x90
 8000752:	05d9      	lsls	r1, r3, #23
 8000754:	4b3c      	ldr	r3, [pc, #240]	; (8000848 <main+0x26c>)
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	200b      	movs	r0, #11
 800075c:	f000 fd8c 	bl	8001278 <TM_BUTTON_Init>
 8000760:	0002      	movs	r2, r0
 8000762:	4b44      	ldr	r3, [pc, #272]	; (8000874 <main+0x298>)
 8000764:	601a      	str	r2, [r3, #0]

	/* Init all buttons */
	/* Set time how button is detected, 30 ms for normal press, 2000 ms for long press */
	TM_BUTTON_SetPressTime(BTN_HOME, 30, 2000);
 8000766:	4b39      	ldr	r3, [pc, #228]	; (800084c <main+0x270>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	23fa      	movs	r3, #250	; 0xfa
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	001a      	movs	r2, r3
 8000770:	211e      	movs	r1, #30
 8000772:	f000 fdf3 	bl	800135c <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(BTN_SELECT, 30, 2000);
 8000776:	4b36      	ldr	r3, [pc, #216]	; (8000850 <main+0x274>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	23fa      	movs	r3, #250	; 0xfa
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	001a      	movs	r2, r3
 8000780:	211e      	movs	r1, #30
 8000782:	f000 fdeb 	bl	800135c <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(BTN_SELECT_DOWN, 30, 2000);
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <main+0x278>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	23fa      	movs	r3, #250	; 0xfa
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	001a      	movs	r2, r3
 8000790:	211e      	movs	r1, #30
 8000792:	f000 fde3 	bl	800135c <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(BTN_SELECT_UP, 30, 2000);
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <main+0x27c>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	23fa      	movs	r3, #250	; 0xfa
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	001a      	movs	r2, r3
 80007a0:	211e      	movs	r1, #30
 80007a2:	f000 fddb 	bl	800135c <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(BTN_L_UP, 30, 2000);
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <main+0x280>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	23fa      	movs	r3, #250	; 0xfa
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	001a      	movs	r2, r3
 80007b0:	211e      	movs	r1, #30
 80007b2:	f000 fdd3 	bl	800135c <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(BTN_L_DOWN, 30, 2000);
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <main+0x284>)
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	23fa      	movs	r3, #250	; 0xfa
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	001a      	movs	r2, r3
 80007c0:	211e      	movs	r1, #30
 80007c2:	f000 fdcb 	bl	800135c <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(BTN_VOICE, 30, 2000);
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <main+0x288>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	23fa      	movs	r3, #250	; 0xfa
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	001a      	movs	r2, r3
 80007d0:	211e      	movs	r1, #30
 80007d2:	f000 fdc3 	bl	800135c <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(BTN_R_DOWN, 30, 2000);
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <main+0x28c>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	001a      	movs	r2, r3
 80007e0:	211e      	movs	r1, #30
 80007e2:	f000 fdbb 	bl	800135c <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(BTN_R_UP, 30, 2000);
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <main+0x290>)
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	23fa      	movs	r3, #250	; 0xfa
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	001a      	movs	r2, r3
 80007f0:	211e      	movs	r1, #30
 80007f2:	f000 fdb3 	bl	800135c <TM_BUTTON_SetPressTime>
	TM_BUTTON_SetPressTime(BTN_SOS, 30, 2000);
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <main+0x294>)
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	23fa      	movs	r3, #250	; 0xfa
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	001a      	movs	r2, r3
 8000800:	211e      	movs	r1, #30
 8000802:	f000 fdab 	bl	800135c <TM_BUTTON_SetPressTime>

	TM_BUTTON_SetPressTime(BTN_TOUCH, 30, 2000);
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <main+0x298>)
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	23fa      	movs	r3, #250	; 0xfa
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	001a      	movs	r2, r3
 8000810:	211e      	movs	r1, #30
 8000812:	f000 fda3 	bl	800135c <TM_BUTTON_SetPressTime>

	logI("Started successfully\r\n");
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <main+0x29c>)
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fb4f 	bl	8000ebc <logI>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) rx_uart_buffer, RXBUFFERSIZE);
 800081e:	4917      	ldr	r1, [pc, #92]	; (800087c <main+0x2a0>)
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <main+0x2a4>)
 8000822:	220a      	movs	r2, #10
 8000824:	0018      	movs	r0, r3
 8000826:	f002 ff61 	bl	80036ec <HAL_UART_Receive_DMA>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		/* Update all buttons */
		TM_BUTTON_Update();
 800082a:	f000 fdb1 	bl	8001390 <TM_BUTTON_Update>
		usart_rx_check();
 800082e:	f7ff fe07 	bl	8000440 <usart_rx_check>
		TM_BUTTON_Update();
 8000832:	e7fa      	b.n	800082a <main+0x24e>
 8000834:	20000314 	.word	0x20000314
 8000838:	08004494 	.word	0x08004494
 800083c:	08000cf5 	.word	0x08000cf5
 8000840:	20000300 	.word	0x20000300
 8000844:	48000400 	.word	0x48000400
 8000848:	080003e9 	.word	0x080003e9
 800084c:	20000150 	.word	0x20000150
 8000850:	200002bc 	.word	0x200002bc
 8000854:	20000308 	.word	0x20000308
 8000858:	20000304 	.word	0x20000304
 800085c:	20000310 	.word	0x20000310
 8000860:	20000328 	.word	0x20000328
 8000864:	200001a8 	.word	0x200001a8
 8000868:	20000154 	.word	0x20000154
 800086c:	200001ac 	.word	0x200001ac
 8000870:	2000030c 	.word	0x2000030c
 8000874:	200002b8 	.word	0x200002b8
 8000878:	080044ac 	.word	0x080044ac
 800087c:	2000008c 	.word	0x2000008c
 8000880:	20000238 	.word	0x20000238

08000884 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b095      	sub	sp, #84	; 0x54
 8000888:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800088a:	2420      	movs	r4, #32
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2330      	movs	r3, #48	; 0x30
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f003 fd61 	bl	800435c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800089a:	2310      	movs	r3, #16
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	0018      	movs	r0, r3
 80008a0:	2310      	movs	r3, #16
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f003 fd59 	bl	800435c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80008aa:	003b      	movs	r3, r7
 80008ac:	0018      	movs	r0, r3
 80008ae:	2310      	movs	r3, #16
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f003 fd52 	bl	800435c <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2202      	movs	r2, #2
 80008be:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2201      	movs	r2, #1
 80008c4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2210      	movs	r2, #16
 80008ca:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2202      	movs	r2, #2
 80008d0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	22a0      	movs	r2, #160	; 0xa0
 80008dc:	0392      	lsls	r2, r2, #14
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 fe9b 	bl	8002624 <HAL_RCC_OscConfig>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x72>
		Error_Handler();
 80008f2:	f000 faed 	bl	8000ed0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80008f6:	2110      	movs	r1, #16
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2207      	movs	r2, #7
 80008fc:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2202      	movs	r2, #2
 8000902:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2101      	movs	r1, #1
 8000914:	0018      	movs	r0, r3
 8000916:	f002 f9a1 	bl	8002c5c <HAL_RCC_ClockConfig>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x9e>
		Error_Handler();
 800091e:	f000 fad7 	bl	8000ed0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 8000922:	003b      	movs	r3, r7
 8000924:	2221      	movs	r2, #33	; 0x21
 8000926:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000928:	003b      	movs	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800092e:	003b      	movs	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000934:	003b      	movs	r3, r7
 8000936:	0018      	movs	r0, r3
 8000938:	f002 fae2 	bl	8002f00 <HAL_RCCEx_PeriphCLKConfig>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc0>
		Error_Handler();
 8000940:	f000 fac6 	bl	8000ed0 <Error_Handler>
	}
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b015      	add	sp, #84	; 0x54
 800094a:	bd90      	pop	{r4, r7, pc}

0800094c <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	/* DMA1_Channel4_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	200b      	movs	r0, #11
 8000956:	f001 f94d 	bl	8001bf4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800095a:	200b      	movs	r0, #11
 800095c:	f001 f95f 	bl	8001c1e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200a      	movs	r0, #10
 8000966:	f001 f945 	bl	8001bf4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800096a:	200a      	movs	r0, #10
 800096c:	f001 f957 	bl	8001c1e <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	201b      	movs	r0, #27
 8000976:	f001 f93d 	bl	8001bf4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800097a:	201b      	movs	r0, #27
 800097c:	f001 f94f 	bl	8001c1e <HAL_NVIC_EnableIRQ>
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_I2C1_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <MX_I2C1_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00101D7C;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_I2C1_Init+0x74>)
 8000994:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <MX_I2C1_Init+0x7c>)
 8000996:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_I2C1_Init+0x74>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_I2C1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_I2C1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_I2C1_Init+0x74>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fcff 	bl	80023c8 <HAL_I2C_Init>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80009ce:	f000 fa7f 	bl	8000ed0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_I2C1_Init+0x74>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 fd8c 	bl	80024f4 <HAL_I2CEx_ConfigAnalogFilter>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_I2C1_Init+0x5c>
		Error_Handler();
 80009e0:	f000 fa76 	bl	8000ed0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_I2C1_Init+0x74>)
 80009e6:	2100      	movs	r1, #0
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fdcf 	bl	800258c <HAL_I2CEx_ConfigDigitalFilter>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80009f2:	f000 fa6d 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000158 	.word	0x20000158
 8000a00:	40005400 	.word	0x40005400
 8000a04:	00101d7c 	.word	0x00101d7c

08000a08 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000a0e:	230c      	movs	r3, #12
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	0018      	movs	r0, r3
 8000a14:	2314      	movs	r3, #20
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f003 fc9f 	bl	800435c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	0018      	movs	r0, r3
 8000a22:	2308      	movs	r3, #8
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f003 fc98 	bl	800435c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a2e:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <MX_TIM1_Init+0xac>)
 8000a30:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 fb1f 	bl	800309c <HAL_TIM_Base_Init>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0x5e>
		Error_Handler();
 8000a62:	f000 fa35 	bl	8000ed0 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a66:	210c      	movs	r1, #12
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	601a      	str	r2, [r3, #0]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8000a74:	187a      	adds	r2, r7, r1
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 fb3a 	bl	80030f4 <HAL_TIM_SlaveConfigSynchro>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0x80>
		Error_Handler();
 8000a84:	f000 fa24 	bl	8000ed0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000a94:	1d3a      	adds	r2, r7, #4
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fcea 	bl	8003474 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0xa0>
		Error_Handler();
 8000aa4:	f000 fa14 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b008      	add	sp, #32
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002c0 	.word	0x200002c0
 8000ab4:	40012c00 	.word	0x40012c00

08000ab8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ac4:	2296      	movs	r2, #150	; 0x96
 8000ac6:	0212      	lsls	r2, r2, #8
 8000ac8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 fd11 	bl	8003524 <HAL_UART_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000b06:	f000 f9e3 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000238 	.word	0x20000238
 8000b14:	40013800 	.word	0x40013800

08000b18 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_DMA_Init+0x28>)
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_DMA_Init+0x28>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	430a      	orrs	r2, r1
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MX_DMA_Init+0x28>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4013      	ands	r3, r2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000

08000b44 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b4a:	240c      	movs	r4, #12
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2314      	movs	r3, #20
 8000b52:	001a      	movs	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	f003 fc01 	bl	800435c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5a:	4b61      	ldr	r3, [pc, #388]	; (8000ce0 <MX_GPIO_Init+0x19c>)
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	4b60      	ldr	r3, [pc, #384]	; (8000ce0 <MX_GPIO_Init+0x19c>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	03c9      	lsls	r1, r1, #15
 8000b64:	430a      	orrs	r2, r1
 8000b66:	615a      	str	r2, [r3, #20]
 8000b68:	4b5d      	ldr	r3, [pc, #372]	; (8000ce0 <MX_GPIO_Init+0x19c>)
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	03db      	lsls	r3, r3, #15
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b5a      	ldr	r3, [pc, #360]	; (8000ce0 <MX_GPIO_Init+0x19c>)
 8000b78:	695a      	ldr	r2, [r3, #20]
 8000b7a:	4b59      	ldr	r3, [pc, #356]	; (8000ce0 <MX_GPIO_Init+0x19c>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0289      	lsls	r1, r1, #10
 8000b80:	430a      	orrs	r2, r1
 8000b82:	615a      	str	r2, [r3, #20]
 8000b84:	4b56      	ldr	r3, [pc, #344]	; (8000ce0 <MX_GPIO_Init+0x19c>)
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	029b      	lsls	r3, r3, #10
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <MX_GPIO_Init+0x19c>)
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	4b52      	ldr	r3, [pc, #328]	; (8000ce0 <MX_GPIO_Init+0x19c>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	02c9      	lsls	r1, r1, #11
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	4b4f      	ldr	r3, [pc, #316]	; (8000ce0 <MX_GPIO_Init+0x19c>)
 8000ba2:	695a      	ldr	r2, [r3, #20]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	02db      	lsls	r3, r3, #11
 8000ba8:	4013      	ands	r3, r2
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, M_1_Pin | M_2_Pin, GPIO_PIN_RESET);
 8000bae:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 fbb2 	bl	800231e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | HX711SCK_Pin, GPIO_PIN_RESET);
 8000bba:	2390      	movs	r3, #144	; 0x90
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2123      	movs	r1, #35	; 0x23
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f001 fbab 	bl	800231e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <MX_GPIO_Init+0x1a4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2108      	movs	r1, #8
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fba5 	bl	800231e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M_1_Pin M_2_Pin */
	GPIO_InitStruct.Pin = M_1_Pin | M_2_Pin;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	2201      	movs	r2, #1
 8000bde:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2202      	movs	r2, #2
 8000be4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <MX_GPIO_Init+0x1a0>)
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	0010      	movs	r0, r2
 8000bf4:	f001 fa0e 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin HX711SCK_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | HX711SCK_Pin;
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	2223      	movs	r2, #35	; 0x23
 8000bfc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	2201      	movs	r2, #1
 8000c02:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	193a      	adds	r2, r7, r4
 8000c12:	2390      	movs	r3, #144	; 0x90
 8000c14:	05db      	lsls	r3, r3, #23
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 f9fb 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pins : HX711OUTPUT_Pin SW_SELECT_UP_Pin SW_L_UP_Pin SW_SELECT_Pin
	 SW_SELECT_DOWN_Pin */
	GPIO_InitStruct.Pin = HX711OUTPUT_Pin | SW_SELECT_UP_Pin | SW_L_UP_Pin | SW_SELECT_Pin | SW_SELECT_DOWN_Pin;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	4a32      	ldr	r2, [pc, #200]	; (8000cec <MX_GPIO_Init+0x1a8>)
 8000c22:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	193a      	adds	r2, r7, r4
 8000c32:	2390      	movs	r3, #144	; 0x90
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 f9eb 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_L_DOWN_Pin SW_VOICE_Pin SW_HOME_Pin SW_R_DOWN_Pin
	 SW_R_UP_Pin SW_SOS_Pin */
	GPIO_InitStruct.Pin = SW_L_DOWN_Pin | SW_VOICE_Pin | SW_HOME_Pin | SW_R_DOWN_Pin | SW_R_UP_Pin | SW_SOS_Pin;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	22f3      	movs	r2, #243	; 0xf3
 8000c42:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <MX_GPIO_Init+0x1a4>)
 8000c54:	0019      	movs	r1, r3
 8000c56:	0010      	movs	r0, r2
 8000c58:	f001 f9dc 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pin : IRQ_Pin */
	GPIO_InitStruct.Pin = IRQ_Pin;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	0052      	lsls	r2, r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <MX_GPIO_Init+0x1ac>)
 8000c68:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c70:	193a      	adds	r2, r7, r4
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f001 f9cb 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_1_Pin */
	GPIO_InitStruct.Pin = TOUCH_1_Pin;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	0212      	lsls	r2, r2, #8
 8000c84:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(TOUCH_1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	193a      	adds	r2, r7, r4
 8000c94:	2390      	movs	r3, #144	; 0x90
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f001 f9ba 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_3_Pin */
	GPIO_InitStruct.Pin = LED_3_Pin;
 8000ca0:	0021      	movs	r1, r4
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2208      	movs	r2, #8
 8000ca6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2201      	movs	r2, #1
 8000cac:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <MX_GPIO_Init+0x1a4>)
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	f001 f9a7 	bl	8002014 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 ff92 	bl	8001bf4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cd0:	2007      	movs	r0, #7
 8000cd2:	f000 ffa4 	bl	8001c1e <HAL_NVIC_EnableIRQ>

}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b009      	add	sp, #36	; 0x24
 8000cdc:	bd90      	pop	{r4, r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48001400 	.word	0x48001400
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	000018d0 	.word	0x000018d0
 8000cf0:	10110000 	.word	0x10110000

08000cf4 <SWTIM1_Callback>:

/* USER CODE BEGIN 4 */

/* Callback function for SWTIM1 */
void SWTIM1_Callback(TM_DELAY_Timer_t *SWTIM, void *UserParameters) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	HX711_val = HX711_Value(HX711_sensor);
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <SWTIM1_Callback+0x4c>)
 8000d00:	466a      	mov	r2, sp
 8000d02:	6919      	ldr	r1, [r3, #16]
 8000d04:	6011      	str	r1, [r2, #0]
 8000d06:	6818      	ldr	r0, [r3, #0]
 8000d08:	6859      	ldr	r1, [r3, #4]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	f7ff facb 	bl	80002a8 <HX711_Value>
 8000d12:	0002      	movs	r2, r0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <SWTIM1_Callback+0x50>)
 8000d16:	601a      	str	r2, [r3, #0]
	//HX711_val = HX711_AverageValue(hx11, 5);

	logI("HX711 Val:%d\r\n", HX711_val);
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <SWTIM1_Callback+0x50>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <SWTIM1_Callback+0x54>)
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 f8cb 	bl	8000ebc <logI>

	uint8_t *bytes = (uint8_t*) &HX711_val;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <SWTIM1_Callback+0x50>)
 8000d28:	60fb      	str	r3, [r7, #12]
	 bytes[1] = (HX711_val >> 8)  & 0xFF;
	 bytes[2] = (HX711_val >> 16) & 0xFF;
	 bytes[3] = (HX711_val >> 24) & 0xFF;
	 */

	UART_TX_DATA(UART_DATA_TYPE_LOAD_CELL, bytes, sizeof(bytes));
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	0019      	movs	r1, r3
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f80b 	bl	8000d4c <UART_TX_DATA>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b004      	add	sp, #16
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	20000314 	.word	0x20000314
 8000d44:	200001a4 	.word	0x200001a4
 8000d48:	080044c4 	.word	0x080044c4

08000d4c <UART_TX_DATA>:

void UART_TX_DATA(uint8_t type, uint8_t *data, uint8_t size) {
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6039      	str	r1, [r7, #0]
 8000d54:	0011      	movs	r1, r2
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	1c02      	adds	r2, r0, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
 8000d5c:	1dbb      	adds	r3, r7, #6
 8000d5e:	1c0a      	adds	r2, r1, #0
 8000d60:	701a      	strb	r2, [r3, #0]
#if LOG_ENABLED
	return;
#else
	uint8_t i, j;
	uint8_t tx_uart_size = size + 5;
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	1dba      	adds	r2, r7, #6
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	3205      	adds	r2, #5
 8000d6c:	701a      	strb	r2, [r3, #0]

	uint32_t uart_busy = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]

	tx_uart_buffer[0] = '$';
 8000d72:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <UART_TX_DATA+0xf0>)
 8000d74:	2224      	movs	r2, #36	; 0x24
 8000d76:	701a      	strb	r2, [r3, #0]
	tx_uart_buffer[1] = 'H';
 8000d78:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <UART_TX_DATA+0xf0>)
 8000d7a:	2248      	movs	r2, #72	; 0x48
 8000d7c:	705a      	strb	r2, [r3, #1]
	tx_uart_buffer[2] = type;
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <UART_TX_DATA+0xf0>)
 8000d80:	1dfa      	adds	r2, r7, #7
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	709a      	strb	r2, [r3, #2]

	for (i = 3, j = 0; j < size; i++, j++)
 8000d86:	2317      	movs	r3, #23
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	2316      	movs	r3, #22
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e014      	b.n	8000dc2 <UART_TX_DATA+0x76>
		tx_uart_buffer[i] = data[j];
 8000d98:	2016      	movs	r0, #22
 8000d9a:	183b      	adds	r3, r7, r0
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	18d2      	adds	r2, r2, r3
 8000da2:	2417      	movs	r4, #23
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <UART_TX_DATA+0xf0>)
 8000dac:	54d1      	strb	r1, [r2, r3]
	for (i = 3, j = 0; j < size; i++, j++)
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	3201      	adds	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	183b      	adds	r3, r7, r0
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	183b      	adds	r3, r7, r0
 8000dbe:	3201      	adds	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	2316      	movs	r3, #22
 8000dc4:	18fa      	adds	r2, r7, r3
 8000dc6:	1dbb      	adds	r3, r7, #6
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d3e3      	bcc.n	8000d98 <UART_TX_DATA+0x4c>

	tx_uart_buffer[tx_uart_size - 2] = '\r';
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	183b      	adds	r3, r7, r0
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <UART_TX_DATA+0xf0>)
 8000dda:	210d      	movs	r1, #13
 8000ddc:	54d1      	strb	r1, [r2, r3]
	tx_uart_buffer[tx_uart_size - 1] = '\n';
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <UART_TX_DATA+0xf0>)
 8000de6:	210a      	movs	r1, #10
 8000de8:	54d1      	strb	r1, [r2, r3]

	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY && HAL_UART_GetState(&huart1) != HAL_UART_STATE_BUSY_RX) {
 8000dea:	e006      	b.n	8000dfa <UART_TX_DATA+0xae>
		uart_busy++;
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	3301      	adds	r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
		if(uart_busy>10000)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <UART_TX_DATA+0xf4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d81b      	bhi.n	8000e32 <UART_TX_DATA+0xe6>
	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY && HAL_UART_GetState(&huart1) != HAL_UART_STATE_BUSY_RX) {
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <UART_TX_DATA+0xf8>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 fe59 	bl	8003ab4 <HAL_UART_GetState>
 8000e02:	0003      	movs	r3, r0
 8000e04:	2b20      	cmp	r3, #32
 8000e06:	d006      	beq.n	8000e16 <UART_TX_DATA+0xca>
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <UART_TX_DATA+0xf8>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 fe52 	bl	8003ab4 <HAL_UART_GetState>
 8000e10:	0003      	movs	r3, r0
 8000e12:	2b22      	cmp	r3, #34	; 0x22
 8000e14:	d1ea      	bne.n	8000dec <UART_TX_DATA+0xa0>
			return;
	}

	if (HAL_UART_Transmit_DMA(&huart1, tx_uart_buffer, tx_uart_size) != HAL_OK) {
 8000e16:	230f      	movs	r3, #15
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4907      	ldr	r1, [pc, #28]	; (8000e3c <UART_TX_DATA+0xf0>)
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <UART_TX_DATA+0xf8>)
 8000e22:	0018      	movs	r0, r3
 8000e24:	f002 fbd2 	bl	80035cc <HAL_UART_Transmit_DMA>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d003      	beq.n	8000e34 <UART_TX_DATA+0xe8>
		Error_Handler();
 8000e2c:	f000 f850 	bl	8000ed0 <Error_Handler>
 8000e30:	e000      	b.n	8000e34 <UART_TX_DATA+0xe8>
			return;
 8000e32:	46c0      	nop			; (mov r8, r8)
	}
#endif
}
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b007      	add	sp, #28
 8000e38:	bd90      	pop	{r4, r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	20000098 	.word	0x20000098
 8000e40:	00002710 	.word	0x00002710
 8000e44:	20000238 	.word	0x20000238

08000e48 <send_app_ver>:

void send_app_ver() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint8_t bytes[3];
	bytes[0] = APP_VER;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
	bytes[1] = APP_VER;
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2201      	movs	r2, #1
 8000e58:	705a      	strb	r2, [r3, #1]
	bytes[2] = APP_VER;
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	709a      	strb	r2, [r3, #2]

	UART_TX_DATA(UART_DATA_TYPE_VERSION, bytes, sizeof(bytes));
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2203      	movs	r2, #3
 8000e64:	0019      	movs	r1, r3
 8000e66:	2004      	movs	r0, #4
 8000e68:	f7ff ff70 	bl	8000d4c <UART_TX_DATA>
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_UART_TxCpltCallback>:

// Tx Transfer completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
	//__NOP();
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_UART_RxCpltCallback>:

//Rx Transfer completed callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_UART_ErrorCallback>:

//UART error callbacks
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000e9c:	f000 f818 	bl	8000ed0 <Error_Handler>
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief EXTI line detection callbacks
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	0002      	movs	r2, r0
 8000eb0:	1dbb      	adds	r3, r7, #6
 8000eb2:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_8) {

	}
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <logI>:

/** LOG procedure - Info
 * @param *fmt String to print
 * @param ... Parameters list
 */
void logI(const char *fmt, ...) {
 8000ebc:	b40f      	push	{r0, r1, r2, r3}
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0

	va_start(argp, fmt);
	logPrint('I', fmt, argp);
	va_end(argp);
#else
	return;
 8000ec2:	46c0      	nop			; (mov r8, r8)
#endif

}
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	bc08      	pop	{r3}
 8000eca:	b004      	add	sp, #16
 8000ecc:	4718      	bx	r3
	...

08000ed0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	for (uint8_t i = 0; i < 3; i++) {
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e00e      	b.n	8000efc <Error_Handler+0x2c>
		HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <Error_Handler+0x38>)
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 fa38 	bl	8002358 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000ee8:	23fa      	movs	r3, #250	; 0xfa
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f000 fc23 	bl	8001738 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	3201      	adds	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d9ec      	bls.n	8000ede <Error_Handler+0xe>
	}

	NVIC_SystemReset();
 8000f04:	f7ff fa60 	bl	80003c8 <__NVIC_SystemReset>
 8000f08:	48000400 	.word	0x48000400

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_MspInit+0x44>)
 8000f14:	699a      	ldr	r2, [r3, #24]
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_MspInit+0x44>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	619a      	str	r2, [r3, #24]
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_MspInit+0x44>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	2201      	movs	r2, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_MspInit+0x44>)
 8000f2c:	69da      	ldr	r2, [r3, #28]
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_MspInit+0x44>)
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	0549      	lsls	r1, r1, #21
 8000f34:	430a      	orrs	r2, r1
 8000f36:	61da      	str	r2, [r3, #28]
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_MspInit+0x44>)
 8000f3a:	69da      	ldr	r2, [r3, #28]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	055b      	lsls	r3, r3, #21
 8000f40:	4013      	ands	r3, r2
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	2314      	movs	r3, #20
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	0018      	movs	r0, r3
 8000f62:	2314      	movs	r3, #20
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f003 f9f8 	bl	800435c <memset>
  if(hi2c->Instance==I2C1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_I2C_MspInit+0x94>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d133      	bne.n	8000fde <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_I2C_MspInit+0x98>)
 8000f78:	695a      	ldr	r2, [r3, #20]
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_I2C_MspInit+0x98>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	0289      	lsls	r1, r1, #10
 8000f80:	430a      	orrs	r2, r1
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_I2C_MspInit+0x98>)
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	029b      	lsls	r3, r3, #10
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f92:	2114      	movs	r1, #20
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	22c0      	movs	r2, #192	; 0xc0
 8000f98:	00d2      	lsls	r2, r2, #3
 8000f9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2212      	movs	r2, #18
 8000fa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2203      	movs	r2, #3
 8000fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	187a      	adds	r2, r7, r1
 8000fb6:	2390      	movs	r3, #144	; 0x90
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f001 f829 	bl	8002014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_I2C_MspInit+0x98>)
 8000fc4:	69da      	ldr	r2, [r3, #28]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_I2C_MspInit+0x98>)
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	0389      	lsls	r1, r1, #14
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	61da      	str	r2, [r3, #28]
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_I2C_MspInit+0x98>)
 8000fd2:	69da      	ldr	r2, [r3, #28]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	039b      	lsls	r3, r3, #14
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b00a      	add	sp, #40	; 0x28
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_TIM_Base_MspInit+0x38>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10d      	bne.n	800101e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_TIM_Base_MspInit+0x3c>)
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_TIM_Base_MspInit+0x3c>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0109      	lsls	r1, r1, #4
 800100c:	430a      	orrs	r2, r1
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_TIM_Base_MspInit+0x3c>)
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	40012c00 	.word	0x40012c00
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	2314      	movs	r3, #20
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	0018      	movs	r0, r3
 800103e:	2314      	movs	r3, #20
 8001040:	001a      	movs	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	f003 f98a 	bl	800435c <memset>
  if(huart->Instance==USART1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a46      	ldr	r2, [pc, #280]	; (8001168 <HAL_UART_MspInit+0x138>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d000      	beq.n	8001054 <HAL_UART_MspInit+0x24>
 8001052:	e085      	b.n	8001160 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001054:	4b45      	ldr	r3, [pc, #276]	; (800116c <HAL_UART_MspInit+0x13c>)
 8001056:	699a      	ldr	r2, [r3, #24]
 8001058:	4b44      	ldr	r3, [pc, #272]	; (800116c <HAL_UART_MspInit+0x13c>)
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	01c9      	lsls	r1, r1, #7
 800105e:	430a      	orrs	r2, r1
 8001060:	619a      	str	r2, [r3, #24]
 8001062:	4b42      	ldr	r3, [pc, #264]	; (800116c <HAL_UART_MspInit+0x13c>)
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	01db      	lsls	r3, r3, #7
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <HAL_UART_MspInit+0x13c>)
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	4b3d      	ldr	r3, [pc, #244]	; (800116c <HAL_UART_MspInit+0x13c>)
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	0289      	lsls	r1, r1, #10
 800107a:	430a      	orrs	r2, r1
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_UART_MspInit+0x13c>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800108c:	2114      	movs	r1, #20
 800108e:	187b      	adds	r3, r7, r1
 8001090:	220c      	movs	r2, #12
 8001092:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2202      	movs	r2, #2
 8001098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2203      	movs	r2, #3
 80010a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2201      	movs	r2, #1
 80010aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	187a      	adds	r2, r7, r1
 80010ae:	2390      	movs	r3, #144	; 0x90
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 ffad 	bl	8002014 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_UART_MspInit+0x140>)
 80010bc:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <HAL_UART_MspInit+0x144>)
 80010be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_UART_MspInit+0x140>)
 80010c2:	2210      	movs	r2, #16
 80010c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_UART_MspInit+0x140>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <HAL_UART_MspInit+0x140>)
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_UART_MspInit+0x140>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_UART_MspInit+0x140>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_UART_MspInit+0x140>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_UART_MspInit+0x140>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_UART_MspInit+0x140>)
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 fdb3 	bl	8001c58 <HAL_DMA_Init>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80010f6:	f7ff feeb 	bl	8000ed0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <HAL_UART_MspInit+0x148>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_UART_MspInit+0x148>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0089      	lsls	r1, r1, #2
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_UART_MspInit+0x140>)
 800110c:	669a      	str	r2, [r3, #104]	; 0x68
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_UART_MspInit+0x140>)
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_UART_MspInit+0x14c>)
 8001116:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <HAL_UART_MspInit+0x150>)
 8001118:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_UART_MspInit+0x14c>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_UART_MspInit+0x14c>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_UART_MspInit+0x14c>)
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_UART_MspInit+0x14c>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_UART_MspInit+0x14c>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_UART_MspInit+0x14c>)
 800113a:	2220      	movs	r2, #32
 800113c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_UART_MspInit+0x14c>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_UART_MspInit+0x14c>)
 8001146:	0018      	movs	r0, r3
 8001148:	f000 fd86 	bl	8001c58 <HAL_DMA_Init>
 800114c:	1e03      	subs	r3, r0, #0
 800114e:	d001      	beq.n	8001154 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8001150:	f7ff febe 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <HAL_UART_MspInit+0x14c>)
 8001158:	66da      	str	r2, [r3, #108]	; 0x6c
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_UART_MspInit+0x14c>)
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b00a      	add	sp, #40	; 0x28
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40013800 	.word	0x40013800
 800116c:	40021000 	.word	0x40021000
 8001170:	200001b0 	.word	0x200001b0
 8001174:	40020044 	.word	0x40020044
 8001178:	40010000 	.word	0x40010000
 800117c:	200001f4 	.word	0x200001f4
 8001180:	40020030 	.word	0x40020030

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 fa22 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	0018      	movs	r0, r3
 80011c0:	f001 f8e6 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80011d2:	0018      	movs	r0, r3
 80011d4:	f000 fe34 	bl	8001e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	200001f4 	.word	0x200001f4

080011e4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 fe28 	bl	8001e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	200001b0 	.word	0x200001b0

080011fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <USART1_IRQHandler+0x14>)
 8001202:	0018      	movs	r0, r3
 8001204:	f002 fb0a 	bl	800381c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	20000238 	.word	0x20000238

08001214 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <_sbrk+0x50>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x16>
		heap_end = &end;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <_sbrk+0x50>)
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <_sbrk+0x54>)
 8001228:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <_sbrk+0x50>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <_sbrk+0x50>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	18d3      	adds	r3, r2, r3
 8001238:	466a      	mov	r2, sp
 800123a:	4293      	cmp	r3, r2
 800123c:	d907      	bls.n	800124e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800123e:	f003 f859 	bl	80042f4 <__errno>
 8001242:	0003      	movs	r3, r0
 8001244:	220c      	movs	r2, #12
 8001246:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001248:	2301      	movs	r3, #1
 800124a:	425b      	negs	r3, r3
 800124c:	e006      	b.n	800125c <_sbrk+0x48>
	}

	heap_end += incr;
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <_sbrk+0x50>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	18d2      	adds	r2, r2, r3
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <_sbrk+0x50>)
 8001258:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b004      	add	sp, #16
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200000dc 	.word	0x200000dc
 8001268:	20000330 	.word	0x20000330

0800126c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <TM_BUTTON_Init>:
static TM_BUTTON_INT_t Buttons;

/* Internal functions */
static void TM_BUTTON_INT_CheckButton(TM_BUTTON_t* ButtonStruct);

TM_BUTTON_t* TM_BUTTON_Init(uint8_t idx, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t ButtonState, void (*ButtonHandler)(TM_BUTTON_t*, TM_BUTTON_PressType_t)) {
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af02      	add	r7, sp, #8
 800127e:	0004      	movs	r4, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	0010      	movs	r0, r2
 8001284:	0019      	movs	r1, r3
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	1c22      	adds	r2, r4, #0
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	1c02      	adds	r2, r0, #0
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	1dbb      	adds	r3, r7, #6
 8001294:	1c0a      	adds	r2, r1, #0
 8001296:	701a      	strb	r2, [r3, #0]
	TM_BUTTON_t* ButtonStruct;
	TM_GPIO_PuPd_t P;
	
	/* Init delay function */
	TM_DELAY_Init();
 8001298:	f000 f93e 	bl	8001518 <TM_DELAY_Init>
	
	/* Check if available */
	if (Buttons.ButtonsCount >= BUTTON_MAX_BUTTONS) {
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <TM_BUTTON_Init+0xdc>)
 800129e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	d901      	bls.n	80012a8 <TM_BUTTON_Init+0x30>
		return NULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e051      	b.n	800134c <TM_BUTTON_Init+0xd4>
	}
	
	/* Allocate memory for button */
	ButtonStruct = (TM_BUTTON_t *) malloc(sizeof(TM_BUTTON_t));
 80012a8:	201c      	movs	r0, #28
 80012aa:	f003 f84d 	bl	8004348 <malloc>
 80012ae:	0003      	movs	r3, r0
 80012b0:	60bb      	str	r3, [r7, #8]
	
	/* Check if allocated */
	if (ButtonStruct == NULL) {
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <TM_BUTTON_Init+0x44>
		return NULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e047      	b.n	800134c <TM_BUTTON_Init+0xd4>
	}
	
	/* Save settings */
	ButtonStruct->idx = idx;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1dfa      	adds	r2, r7, #7
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	701a      	strb	r2, [r3, #0]
	ButtonStruct->GPIOx = GPIOx;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	605a      	str	r2, [r3, #4]
	ButtonStruct->GPIO_Pin = GPIO_Pin;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1d3a      	adds	r2, r7, #4
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	811a      	strh	r2, [r3, #8]
	ButtonStruct->GPIO_State = ButtonState ? 1 : 0;
 80012d2:	1dbb      	adds	r3, r7, #6
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	4193      	sbcs	r3, r2
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	001a      	movs	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	729a      	strb	r2, [r3, #10]
	ButtonStruct->ButtonHandler = ButtonHandler;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	6a3a      	ldr	r2, [r7, #32]
 80012e6:	60da      	str	r2, [r3, #12]
	ButtonStruct->State = BUTTON_STATE_START;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2200      	movs	r2, #0
 80012ec:	755a      	strb	r2, [r3, #21]
	
	/* Set default values */
	ButtonStruct->PressNormalTime = BUTTON_NORMAL_PRESS_TIME;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2264      	movs	r2, #100	; 0x64
 80012f2:	831a      	strh	r2, [r3, #24]
	ButtonStruct->PressLongTime = BUTTON_LONG_PRESS_TIME;
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4a18      	ldr	r2, [pc, #96]	; (8001358 <TM_BUTTON_Init+0xe0>)
 80012f8:	835a      	strh	r2, [r3, #26]
	ButtonStruct->PressDebounceTime = BUTTON_DEBOUNCE_TIME;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2205      	movs	r2, #5
 80012fe:	82da      	strh	r2, [r3, #22]
	
	/* Init pin with pull resistor */
	if (ButtonStruct->GPIO_State) {
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	7a9b      	ldrb	r3, [r3, #10]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <TM_BUTTON_Init+0x9a>
		/* Pulldown */
		P = TM_GPIO_PuPd_DOWN;
 8001308:	230f      	movs	r3, #15
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	2202      	movs	r2, #2
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	e003      	b.n	800131a <TM_BUTTON_Init+0xa2>
	} else {
		/* Pullup */
		P = TM_GPIO_PuPd_UP;
 8001312:	230f      	movs	r3, #15
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
	}
	
	/* Init GPIO pin as input with proper pull resistor */
	TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, P, TM_GPIO_Speed_Low);
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	8819      	ldrh	r1, [r3, #0]
 800131e:	6838      	ldr	r0, [r7, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	230f      	movs	r3, #15
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2300      	movs	r3, #0
 800132e:	2200      	movs	r2, #0
 8001330:	f000 fa36 	bl	80017a0 <TM_GPIO_Init>
	
	/* Save button */
	Buttons.Buttons[Buttons.ButtonsCount++] = ButtonStruct;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <TM_BUTTON_Init+0xdc>)
 8001336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	b291      	uxth	r1, r2
 800133c:	4a05      	ldr	r2, [pc, #20]	; (8001354 <TM_BUTTON_Init+0xdc>)
 800133e:	8511      	strh	r1, [r2, #40]	; 0x28
 8001340:	001a      	movs	r2, r3
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <TM_BUTTON_Init+0xdc>)
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	50d1      	str	r1, [r2, r3]
	
	/* Return button pointer */
	return ButtonStruct;
 800134a:	68bb      	ldr	r3, [r7, #8]
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b005      	add	sp, #20
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	200000e0 	.word	0x200000e0
 8001358:	000005dc 	.word	0x000005dc

0800135c <TM_BUTTON_SetPressTime>:

TM_BUTTON_t* TM_BUTTON_SetPressTime(TM_BUTTON_t* ButtonStruct, uint16_t Normal, uint16_t Long) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	0008      	movs	r0, r1
 8001366:	0011      	movs	r1, r2
 8001368:	1cbb      	adds	r3, r7, #2
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	801a      	strh	r2, [r3, #0]
 800136e:	003b      	movs	r3, r7
 8001370:	1c0a      	adds	r2, r1, #0
 8001372:	801a      	strh	r2, [r3, #0]
	/* Set values */
	ButtonStruct->PressNormalTime = Normal;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1cba      	adds	r2, r7, #2
 8001378:	8812      	ldrh	r2, [r2, #0]
 800137a:	831a      	strh	r2, [r3, #24]
	ButtonStruct->PressLongTime = Long;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	003a      	movs	r2, r7
 8001380:	8812      	ldrh	r2, [r2, #0]
 8001382:	835a      	strh	r2, [r3, #26]
	
	/* Return pointer */
	return ButtonStruct;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <TM_BUTTON_Update>:

void TM_BUTTON_Update(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	uint16_t i;
	
	/* Go through all buttons */
	for (i = 0; i < Buttons.ButtonsCount; i++) {
 8001396:	1dbb      	adds	r3, r7, #6
 8001398:	2200      	movs	r2, #0
 800139a:	801a      	strh	r2, [r3, #0]
 800139c:	e00c      	b.n	80013b8 <TM_BUTTON_Update+0x28>
		/* Check button */
		TM_BUTTON_INT_CheckButton(Buttons.Buttons[i]);
 800139e:	1dbb      	adds	r3, r7, #6
 80013a0:	881a      	ldrh	r2, [r3, #0]
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <TM_BUTTON_Update+0x3c>)
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	58d3      	ldr	r3, [r2, r3]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f000 f811 	bl	80013d0 <TM_BUTTON_INT_CheckButton>
	for (i = 0; i < Buttons.ButtonsCount; i++) {
 80013ae:	1dbb      	adds	r3, r7, #6
 80013b0:	881a      	ldrh	r2, [r3, #0]
 80013b2:	1dbb      	adds	r3, r7, #6
 80013b4:	3201      	adds	r2, #1
 80013b6:	801a      	strh	r2, [r3, #0]
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <TM_BUTTON_Update+0x3c>)
 80013ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013bc:	1dba      	adds	r2, r7, #6
 80013be:	8812      	ldrh	r2, [r2, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3ec      	bcc.n	800139e <TM_BUTTON_Update+0xe>
	}
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200000e0 	.word	0x200000e0

080013d0 <TM_BUTTON_INT_CheckButton>:

/* Internal functions */
static void TM_BUTTON_INT_CheckButton(TM_BUTTON_t* ButtonStruct) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	uint32_t now, status;
	
	/* Read values */
	now = TM_DELAY_Time();
 80013d8:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <TM_BUTTON_INT_CheckButton+0x144>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
	status = TM_GPIO_GetInputPinValue(ButtonStruct->GPIOx, ButtonStruct->GPIO_Pin);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	8912      	ldrh	r2, [r2, #8]
 80013e8:	4013      	ands	r3, r2
 80013ea:	1e5a      	subs	r2, r3, #1
 80013ec:	4193      	sbcs	r3, r2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	60bb      	str	r3, [r7, #8]
	
	/* First stage */
	if (ButtonStruct->State == BUTTON_STATE_START) {
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7d5b      	ldrb	r3, [r3, #21]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10b      	bne.n	8001412 <TM_BUTTON_INT_CheckButton+0x42>
		/* Check if pressed */
		if (status == ButtonStruct->GPIO_State) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a9b      	ldrb	r3, [r3, #10]
 80013fe:	001a      	movs	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4293      	cmp	r3, r2
 8001404:	d105      	bne.n	8001412 <TM_BUTTON_INT_CheckButton+0x42>
			/* Button pressed, go to stage BUTTON_STATE_START */
			ButtonStruct->State = BUTTON_STATE_DEBOUNCE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	755a      	strb	r2, [r3, #21]
			
			/* Save pressed time */
			ButtonStruct->StartTime = now;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	611a      	str	r2, [r3, #16]
		}
	}

	if (ButtonStruct->State == BUTTON_STATE_DEBOUNCE) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7d5b      	ldrb	r3, [r3, #21]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d124      	bne.n	8001464 <TM_BUTTON_INT_CheckButton+0x94>
		/* Button still pressed */
		/* Check for debounce */
		if (status == ButtonStruct->GPIO_State) {
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7a9b      	ldrb	r3, [r3, #10]
 800141e:	001a      	movs	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4293      	cmp	r3, r2
 8001424:	d115      	bne.n	8001452 <TM_BUTTON_INT_CheckButton+0x82>
			if ((now - ButtonStruct->StartTime) > ButtonStruct->PressDebounceTime) {
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	8ad2      	ldrh	r2, [r2, #22]
 8001432:	4293      	cmp	r3, r2
 8001434:	d916      	bls.n	8001464 <TM_BUTTON_INT_CheckButton+0x94>
				/* Button debounce OK, Goto Normal Press */
				ButtonStruct->State = BUTTON_STATE_PRESSED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2202      	movs	r2, #2
 800143a:	755a      	strb	r2, [r3, #21]

				/* Try to call user function */
				if (ButtonStruct->ButtonHandler) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00f      	beq.n	8001464 <TM_BUTTON_INT_CheckButton+0x94>
					/* Call function callback */
					ButtonStruct->ButtonHandler(ButtonStruct, TM_BUTTON_PressType_OnPressed);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	2100      	movs	r1, #0
 800144c:	0010      	movs	r0, r2
 800144e:	4798      	blx	r3
 8001450:	e008      	b.n	8001464 <TM_BUTTON_INT_CheckButton+0x94>
				}
			}
		} else if (status != ButtonStruct->GPIO_State) {
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7a9b      	ldrb	r3, [r3, #10]
 8001456:	001a      	movs	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4293      	cmp	r3, r2
 800145c:	d002      	beq.n	8001464 <TM_BUTTON_INT_CheckButton+0x94>
			/* Not pressed */
			/* It was bounce, start over */
			/* Go to state BUTTON_STATE_START */
			ButtonStruct->State = BUTTON_STATE_START;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	755a      	strb	r2, [r3, #21]
		}
	}
	
	if (ButtonStruct->State == BUTTON_STATE_PRESSED) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7d5b      	ldrb	r3, [r3, #21]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d13e      	bne.n	80014ea <TM_BUTTON_INT_CheckButton+0x11a>
		/* Button still pressed */
		/* Check for long press */
		if (status == ButtonStruct->GPIO_State) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7a9b      	ldrb	r3, [r3, #10]
 8001470:	001a      	movs	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	4293      	cmp	r3, r2
 8001476:	d115      	bne.n	80014a4 <TM_BUTTON_INT_CheckButton+0xd4>
			if ((now - ButtonStruct->StartTime) > ButtonStruct->PressLongTime) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	8b52      	ldrh	r2, [r2, #26]
 8001484:	4293      	cmp	r3, r2
 8001486:	d930      	bls.n	80014ea <TM_BUTTON_INT_CheckButton+0x11a>
				/* Button pressed OK, call function */
				if (ButtonStruct->ButtonHandler) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <TM_BUTTON_INT_CheckButton+0xcc>
					/* Call function callback */
					ButtonStruct->ButtonHandler(ButtonStruct, TM_BUTTON_PressType_Long);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	2102      	movs	r1, #2
 8001498:	0010      	movs	r0, r2
 800149a:	4798      	blx	r3
				}
				
				/* Go to stage BUTTON_STATE_WAITRELEASE */
				ButtonStruct->State = BUTTON_STATE_WAITRELEASE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2203      	movs	r2, #3
 80014a0:	755a      	strb	r2, [r3, #21]
 80014a2:	e022      	b.n	80014ea <TM_BUTTON_INT_CheckButton+0x11a>
			}
		} else if (status != ButtonStruct->GPIO_State) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7a9b      	ldrb	r3, [r3, #10]
 80014a8:	001a      	movs	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d019      	beq.n	80014e4 <TM_BUTTON_INT_CheckButton+0x114>
			/* Not pressed */
			if ((now - ButtonStruct->StartTime) > ButtonStruct->PressNormalTime) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	8b12      	ldrh	r2, [r2, #24]
 80014bc:	4293      	cmp	r3, r2
 80014be:	d90d      	bls.n	80014dc <TM_BUTTON_INT_CheckButton+0x10c>
				/* Button pressed OK, call function */
				if (ButtonStruct->ButtonHandler) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <TM_BUTTON_INT_CheckButton+0x104>
					/* Call function callback */
					ButtonStruct->ButtonHandler(ButtonStruct, TM_BUTTON_PressType_Normal);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	2101      	movs	r1, #1
 80014d0:	0010      	movs	r0, r2
 80014d2:	4798      	blx	r3
				}
				
				/* Go to stage BUTTON_STATE_WAITRELEASE */
				ButtonStruct->State = BUTTON_STATE_WAITRELEASE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	755a      	strb	r2, [r3, #21]
 80014da:	e006      	b.n	80014ea <TM_BUTTON_INT_CheckButton+0x11a>
			} else {
				/* Go to state BUTTON_STATE_START */
				ButtonStruct->State = BUTTON_STATE_START;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	755a      	strb	r2, [r3, #21]
 80014e2:	e002      	b.n	80014ea <TM_BUTTON_INT_CheckButton+0x11a>
			}
		} else {
			/* Go to state BUTTON_STATE_START */
			ButtonStruct->State = BUTTON_STATE_START;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	755a      	strb	r2, [r3, #21]
		}
	}
	
	if (ButtonStruct->State == BUTTON_STATE_WAITRELEASE) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7d5b      	ldrb	r3, [r3, #21]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d108      	bne.n	8001504 <TM_BUTTON_INT_CheckButton+0x134>
		/* Wait till button released */
		if (status != ButtonStruct->GPIO_State) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7a9b      	ldrb	r3, [r3, #10]
 80014f6:	001a      	movs	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d002      	beq.n	8001504 <TM_BUTTON_INT_CheckButton+0x134>
			/* Go to stage 0 again */
			ButtonStruct->State = BUTTON_STATE_START;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	755a      	strb	r2, [r3, #21]
		}
	}
	
	/* Save current status */
	ButtonStruct->LastStatus = status;
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	751a      	strb	r2, [r3, #20]
}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b004      	add	sp, #16
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000110 	.word	0x20000110

08001518 <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
#else
	/* Return OK */
	return 1;
 800151c:	2301      	movs	r3, #1
#endif
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <TM_DELAY_TimerCreate>:

TM_DELAY_Timer_t* TM_DELAY_TimerCreate(uint32_t ReloadValue, uint8_t AutoReloadCmd, uint8_t StartTimer, void (*TM_DELAY_CustomTimerCallback)(struct _TM_DELAY_Timer_t*, void *), void* UserParameters) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	0008      	movs	r0, r1
 800152e:	0011      	movs	r1, r2
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	230b      	movs	r3, #11
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	1c02      	adds	r2, r0, #0
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	230a      	movs	r3, #10
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	1c0a      	adds	r2, r1, #0
 8001540:	701a      	strb	r2, [r3, #0]
	TM_DELAY_Timer_t* tmp;
	
	/* Check if available */
	if (CustomTimers.Count >= DELAY_MAX_CUSTOM_TIMERS) {
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <TM_DELAY_TimerCreate+0xc0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b04      	cmp	r3, #4
 8001548:	d901      	bls.n	800154e <TM_DELAY_TimerCreate+0x2a>
		return NULL;
 800154a:	2300      	movs	r3, #0
 800154c:	e045      	b.n	80015da <TM_DELAY_TimerCreate+0xb6>
	}
	
	/* Try to allocate memory for timer structure */
	tmp = (TM_DELAY_Timer_t *) LIB_ALLOC_FUNC(sizeof(TM_DELAY_Timer_t));
 800154e:	2014      	movs	r0, #20
 8001550:	f002 fefa 	bl	8004348 <malloc>
 8001554:	0003      	movs	r3, r0
 8001556:	617b      	str	r3, [r7, #20]
	
	/* Check if allocated */
	if (tmp == NULL) {
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <TM_DELAY_TimerCreate+0x3e>
		return NULL;
 800155e:	2300      	movs	r3, #0
 8001560:	e03b      	b.n	80015da <TM_DELAY_TimerCreate+0xb6>
	}
	
	/* Fill settings */
	tmp->ARR = ReloadValue;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	605a      	str	r2, [r3, #4]
	tmp->CNT = tmp->ARR;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	609a      	str	r2, [r3, #8]
	tmp->Flags.F.AREN = AutoReloadCmd;
 8001570:	230b      	movs	r3, #11
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2201      	movs	r2, #1
 8001578:	4013      	ands	r3, r2
 800157a:	b2da      	uxtb	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2101      	movs	r1, #1
 8001580:	400a      	ands	r2, r1
 8001582:	0010      	movs	r0, r2
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	2101      	movs	r1, #1
 8001588:	438a      	bics	r2, r1
 800158a:	1c11      	adds	r1, r2, #0
 800158c:	1c02      	adds	r2, r0, #0
 800158e:	430a      	orrs	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
	tmp->Flags.F.CNTEN = StartTimer;
 8001592:	230a      	movs	r3, #10
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	b2da      	uxtb	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2101      	movs	r1, #1
 80015a2:	400a      	ands	r2, r1
 80015a4:	1890      	adds	r0, r2, r2
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	2102      	movs	r1, #2
 80015aa:	438a      	bics	r2, r1
 80015ac:	1c11      	adds	r1, r2, #0
 80015ae:	1c02      	adds	r2, r0, #0
 80015b0:	430a      	orrs	r2, r1
 80015b2:	701a      	strb	r2, [r3, #0]
	tmp->Callback = TM_DELAY_CustomTimerCallback;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	60da      	str	r2, [r3, #12]
	tmp->UserParameters = UserParameters;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	6a3a      	ldr	r2, [r7, #32]
 80015be:	611a      	str	r2, [r3, #16]
	
	/* Increase number of timers in memory */
	CustomTimers.Timers[CustomTimers.Count++] = tmp;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <TM_DELAY_TimerCreate+0xc0>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	b2d1      	uxtb	r1, r2
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <TM_DELAY_TimerCreate+0xc0>)
 80015ca:	7011      	strb	r1, [r2, #0]
 80015cc:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <TM_DELAY_TimerCreate+0xc0>)
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	18d3      	adds	r3, r2, r3
 80015d2:	3304      	adds	r3, #4
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]
	
	/* Return pointer to user */
	return tmp;
 80015d8:	697b      	ldr	r3, [r7, #20]
}
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b006      	add	sp, #24
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	20000114 	.word	0x20000114

080015e8 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Increase system time */
	TM_Time++;
 80015fa:	4b4c      	ldr	r3, [pc, #304]	; (800172c <HAL_IncTick+0x138>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	4b4a      	ldr	r3, [pc, #296]	; (800172c <HAL_IncTick+0x138>)
 8001602:	601a      	str	r2, [r3, #0]

	/* Decrease other system time */
	if (TM_Time2) {
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <HAL_IncTick+0x13c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <HAL_IncTick+0x22>
		TM_Time2--;
 800160c:	4b48      	ldr	r3, [pc, #288]	; (8001730 <HAL_IncTick+0x13c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_IncTick+0x13c>)
 8001614:	601a      	str	r2, [r3, #0]
	}

	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e079      	b.n	8001712 <HAL_IncTick+0x11e>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4a44      	ldr	r2, [pc, #272]	; (8001734 <HAL_IncTick+0x140>)
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	18d3      	adds	r3, r2, r3
 8001628:	3304      	adds	r3, #4
 800162a:	681b      	ldr	r3, [r3, #0]
		if (
 800162c:	2b00      	cmp	r3, #0
 800162e:	d06b      	beq.n	8001708 <HAL_IncTick+0x114>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4a3f      	ldr	r2, [pc, #252]	; (8001734 <HAL_IncTick+0x140>)
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	3304      	adds	r3, #4
 800163c:	681b      	ldr	r3, [r3, #0]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2202      	movs	r2, #2
 8001642:	4013      	ands	r3, r2
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d05e      	beq.n	8001708 <HAL_IncTick+0x114>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4a39      	ldr	r2, [pc, #228]	; (8001734 <HAL_IncTick+0x140>)
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	18d3      	adds	r3, r2, r3
 8001654:	3304      	adds	r3, #4
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_IncTick+0x7e>
				CustomTimers.Timers[i]->CNT--;
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4a34      	ldr	r2, [pc, #208]	; (8001734 <HAL_IncTick+0x140>)
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	18d3      	adds	r3, r2, r3
 8001668:	3304      	adds	r3, #4
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	3a01      	subs	r2, #1
 8001670:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4a2f      	ldr	r2, [pc, #188]	; (8001734 <HAL_IncTick+0x140>)
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	3304      	adds	r3, #4
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d140      	bne.n	8001708 <HAL_IncTick+0x114>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4a2a      	ldr	r2, [pc, #168]	; (8001734 <HAL_IncTick+0x140>)
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	18d3      	adds	r3, r2, r3
 8001690:	3304      	adds	r3, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4926      	ldr	r1, [pc, #152]	; (8001734 <HAL_IncTick+0x140>)
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	18cb      	adds	r3, r1, r3
 80016a0:	3304      	adds	r3, #4
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4922      	ldr	r1, [pc, #136]	; (8001734 <HAL_IncTick+0x140>)
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	18cb      	adds	r3, r1, r3
 80016ae:	3304      	adds	r3, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	0019      	movs	r1, r3
 80016b6:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80016b8:	1dfb      	adds	r3, r7, #7
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <HAL_IncTick+0x140>)
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	18d3      	adds	r3, r2, r3
 80016c2:	3304      	adds	r3, #4
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	491a      	ldr	r1, [pc, #104]	; (8001734 <HAL_IncTick+0x140>)
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	18cb      	adds	r3, r1, r3
 80016d0:	3304      	adds	r3, #4
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6852      	ldr	r2, [r2, #4]
 80016d6:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4a15      	ldr	r2, [pc, #84]	; (8001734 <HAL_IncTick+0x140>)
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	3304      	adds	r3, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10a      	bne.n	8001708 <HAL_IncTick+0x114>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4a0f      	ldr	r2, [pc, #60]	; (8001734 <HAL_IncTick+0x140>)
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	18d3      	adds	r3, r2, r3
 80016fc:	3304      	adds	r3, #4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	2102      	movs	r1, #2
 8001704:	438a      	bics	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	3201      	adds	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_IncTick+0x140>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	1dfa      	adds	r2, r7, #7
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d200      	bcs.n	8001720 <HAL_IncTick+0x12c>
 800171e:	e77e      	b.n	800161e <HAL_IncTick+0x2a>
			}
		}
	}

	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8001720:	f7ff ff62 	bl	80015e8 <TM_DELAY_1msHandler>
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000110 	.word	0x20000110
 8001730:	2000010c 	.word	0x2000010c
 8001734:	20000114 	.word	0x20000114

08001738 <HAL_Delay>:

void HAL_Delay(uint32_t Delay) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001740:	f3ef 8305 	mrs	r3, IPSR
 8001744:	60bb      	str	r3, [r7, #8]
  return(result);
 8001746:	68bb      	ldr	r3, [r7, #8]
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 8001748:	2b00      	cmp	r3, #0
 800174a:	d116      	bne.n	800177a <HAL_Delay+0x42>
		/* Called from thread mode */
		uint32_t tickstart = HAL_GetTick();
 800174c:	f000 f81e 	bl	800178c <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]

		/* Count interrupts */
		while ((HAL_GetTick() - tickstart) < Delay) {
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	f000 f819 	bl	800178c <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d8f7      	bhi.n	8001756 <HAL_Delay+0x1e>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				Delay--;
			}
		}
	}
}
 8001766:	e00b      	b.n	8001780 <HAL_Delay+0x48>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <HAL_Delay+0x50>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	4013      	ands	r3, r2
 8001772:	d002      	beq.n	800177a <HAL_Delay+0x42>
				Delay--;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	607b      	str	r3, [r7, #4]
		while (Delay) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f3      	bne.n	8001768 <HAL_Delay+0x30>
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b004      	add	sp, #16
 8001786:	bd80      	pop	{r7, pc}
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_GetTick>:

uint32_t HAL_GetTick(void) {
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_GetTick+0x10>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	20000110 	.word	0x20000110

080017a0 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	000c      	movs	r4, r1
 80017aa:	0010      	movs	r0, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	1cbb      	adds	r3, r7, #2
 80017b0:	1c22      	adds	r2, r4, #0
 80017b2:	801a      	strh	r2, [r3, #0]
 80017b4:	1c7b      	adds	r3, r7, #1
 80017b6:	1c02      	adds	r2, r0, #0
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	003b      	movs	r3, r7
 80017bc:	1c0a      	adds	r2, r1, #0
 80017be:	701a      	strb	r2, [r3, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 80017c0:	1cbb      	adds	r3, r7, #2
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d016      	beq.n	80017f6 <TM_GPIO_Init+0x56>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 f826 	bl	800181c <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80017d0:	003b      	movs	r3, r7
 80017d2:	781c      	ldrb	r4, [r3, #0]
 80017d4:	1c7b      	adds	r3, r7, #1
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	1cbb      	adds	r3, r7, #2
 80017da:	8819      	ldrh	r1, [r3, #0]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	231c      	movs	r3, #28
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2318      	movs	r3, #24
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	0023      	movs	r3, r4
 80017f0:	f000 f82c 	bl	800184c <TM_GPIO_INT_Init>
 80017f4:	e000      	b.n	80017f8 <TM_GPIO_Init+0x58>
		return;
 80017f6:	46c0      	nop			; (mov r8, r8)
}
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b003      	add	sp, #12
 80017fc:	bd90      	pop	{r4, r7, pc}

080017fe <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	22b8      	movs	r2, #184	; 0xb8
 800180a:	0612      	lsls	r2, r2, #24
 800180c:	4694      	mov	ip, r2
 800180e:	4463      	add	r3, ip
 8001810:	0a9b      	lsrs	r3, r3, #10
 8001812:	b29b      	uxth	r3, r3
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff ffe9 	bl	80017fe <TM_GPIO_GetPortSource>
 800182c:	0003      	movs	r3, r0
 800182e:	3311      	adds	r3, #17
 8001830:	2201      	movs	r2, #1
 8001832:	409a      	lsls	r2, r3
 8001834:	0011      	movs	r1, r2
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <TM_GPIO_INT_EnableClock+0x2c>)
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	4b03      	ldr	r3, [pc, #12]	; (8001848 <TM_GPIO_INT_EnableClock+0x2c>)
 800183c:	430a      	orrs	r2, r1
 800183e:	615a      	str	r2, [r3, #20]
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000

0800184c <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	000c      	movs	r4, r1
 8001856:	0010      	movs	r0, r2
 8001858:	0019      	movs	r1, r3
 800185a:	1cbb      	adds	r3, r7, #2
 800185c:	1c22      	adds	r2, r4, #0
 800185e:	801a      	strh	r2, [r3, #0]
 8001860:	1c7b      	adds	r3, r7, #1
 8001862:	1c02      	adds	r2, r0, #0
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	003b      	movs	r3, r7
 8001868:	1c0a      	adds	r2, r1, #0
 800186a:	701a      	strb	r2, [r3, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	0018      	movs	r0, r3
 8001870:	f7ff ffc5 	bl	80017fe <TM_GPIO_GetPortSource>
 8001874:	0003      	movs	r3, r0
 8001876:	001a      	movs	r2, r3
 8001878:	230e      	movs	r3, #14
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	701a      	strb	r2, [r3, #0]
	
#if defined(STM32F0xx)
	/* STM32F0xx series does not have FAST speed mode available */
	if (GPIO_Speed == TM_GPIO_Speed_Fast) {
 800187e:	2324      	movs	r3, #36	; 0x24
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d103      	bne.n	8001890 <TM_GPIO_INT_Init+0x44>
		/* Set speed to high mode */
		GPIO_Speed = TM_GPIO_Speed_High;
 8001888:	2324      	movs	r3, #36	; 0x24
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2203      	movs	r2, #3
 800188e:	701a      	strb	r2, [r3, #0]
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001890:	230f      	movs	r3, #15
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	e082      	b.n	80019a0 <TM_GPIO_INT_Init+0x154>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800189a:	1cbb      	adds	r3, r7, #2
 800189c:	881a      	ldrh	r2, [r3, #0]
 800189e:	230f      	movs	r3, #15
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	411a      	asrs	r2, r3
 80018a6:	0013      	movs	r3, r2
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	d071      	beq.n	8001992 <TM_GPIO_INT_Init+0x146>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80018ae:	240e      	movs	r4, #14
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <TM_GPIO_INT_Init+0x168>)
 80018b6:	0052      	lsls	r2, r2, #1
 80018b8:	5ad3      	ldrh	r3, [r2, r3]
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	200f      	movs	r0, #15
 80018be:	183b      	adds	r3, r7, r0
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2101      	movs	r1, #1
 80018c4:	4099      	lsls	r1, r3
 80018c6:	000b      	movs	r3, r1
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b219      	sxth	r1, r3
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	b289      	uxth	r1, r1
 80018d4:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <TM_GPIO_INT_Init+0x168>)
 80018d6:	0052      	lsls	r2, r2, #1
 80018d8:	52d1      	strh	r1, [r2, r3]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	183a      	adds	r2, r7, r0
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	0052      	lsls	r2, r2, #1
 80018e4:	2103      	movs	r1, #3
 80018e6:	4091      	lsls	r1, r2
 80018e8:	000a      	movs	r2, r1
 80018ea:	43d2      	mvns	r2, r2
 80018ec:	4013      	ands	r3, r2
 80018ee:	2220      	movs	r2, #32
 80018f0:	18ba      	adds	r2, r7, r2
 80018f2:	7811      	ldrb	r1, [r2, #0]
 80018f4:	183a      	adds	r2, r7, r0
 80018f6:	7812      	ldrb	r2, [r2, #0]
 80018f8:	0052      	lsls	r2, r2, #1
 80018fa:	4091      	lsls	r1, r2
 80018fc:	000a      	movs	r2, r1
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	183a      	adds	r2, r7, r0
 800190a:	7812      	ldrb	r2, [r2, #0]
 800190c:	0052      	lsls	r2, r2, #1
 800190e:	2103      	movs	r1, #3
 8001910:	4091      	lsls	r1, r2
 8001912:	000a      	movs	r2, r1
 8001914:	43d2      	mvns	r2, r2
 8001916:	4013      	ands	r3, r2
 8001918:	1c7a      	adds	r2, r7, #1
 800191a:	7811      	ldrb	r1, [r2, #0]
 800191c:	183a      	adds	r2, r7, r0
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	0052      	lsls	r2, r2, #1
 8001922:	4091      	lsls	r1, r2
 8001924:	000a      	movs	r2, r1
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800192c:	1c7b      	adds	r3, r7, #1
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d003      	beq.n	800193c <TM_GPIO_INT_Init+0xf0>
 8001934:	1c7b      	adds	r3, r7, #1
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d12b      	bne.n	8001994 <TM_GPIO_INT_Init+0x148>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	200f      	movs	r0, #15
 8001942:	183a      	adds	r2, r7, r0
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	2101      	movs	r1, #1
 8001948:	4091      	lsls	r1, r2
 800194a:	000a      	movs	r2, r1
 800194c:	b292      	uxth	r2, r2
 800194e:	43d2      	mvns	r2, r2
 8001950:	4013      	ands	r3, r2
 8001952:	003a      	movs	r2, r7
 8001954:	7811      	ldrb	r1, [r2, #0]
 8001956:	183a      	adds	r2, r7, r0
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	4091      	lsls	r1, r2
 800195c:	000a      	movs	r2, r1
 800195e:	b292      	uxth	r2, r2
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	183a      	adds	r2, r7, r0
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	0052      	lsls	r2, r2, #1
 8001970:	2103      	movs	r1, #3
 8001972:	4091      	lsls	r1, r2
 8001974:	000a      	movs	r2, r1
 8001976:	43d2      	mvns	r2, r2
 8001978:	4013      	ands	r3, r2
 800197a:	2224      	movs	r2, #36	; 0x24
 800197c:	18ba      	adds	r2, r7, r2
 800197e:	7811      	ldrb	r1, [r2, #0]
 8001980:	183a      	adds	r2, r7, r0
 8001982:	7812      	ldrb	r2, [r2, #0]
 8001984:	0052      	lsls	r2, r2, #1
 8001986:	4091      	lsls	r1, r2
 8001988:	000a      	movs	r2, r1
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	e000      	b.n	8001994 <TM_GPIO_INT_Init+0x148>
			continue;
 8001992:	46c0      	nop			; (mov r8, r8)
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001994:	210f      	movs	r1, #15
 8001996:	187b      	adds	r3, r7, r1
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	187b      	adds	r3, r7, r1
 800199c:	3201      	adds	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	230f      	movs	r3, #15
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	d800      	bhi.n	80019ac <TM_GPIO_INT_Init+0x160>
 80019aa:	e776      	b.n	800189a <TM_GPIO_INT_Init+0x4e>
		}
	}
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b005      	add	sp, #20
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	2000012c 	.word	0x2000012c

080019b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b8:	480d      	ldr	r0, [pc, #52]	; (80019f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490e      	ldr	r1, [pc, #56]	; (80019f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0b      	ldr	r4, [pc, #44]	; (8001a04 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019e2:	f7ff fc43 	bl	800126c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019e6:	f002 fc8b 	bl	8004300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ea:	f7fe fdf7 	bl	80005dc <main>

080019ee <LoopForever>:

LoopForever:
    b LoopForever
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
  ldr   r0, =_estack
 80019f0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019fc:	08004528 	.word	0x08004528
  ldr r2, =_sbss
 8001a00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a04:	20000330 	.word	0x20000330

08001a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_IRQHandler>
	...

08001a0c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_Init+0x24>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_Init+0x24>)
 8001a16:	2110      	movs	r1, #16
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f000 f809 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a22:	f7ff fa73 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_InitTick+0x5c>)
 8001a3e:	681c      	ldr	r4, [r3, #0]
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_InitTick+0x60>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	0019      	movs	r1, r3
 8001a46:	23fa      	movs	r3, #250	; 0xfa
 8001a48:	0098      	lsls	r0, r3, #2
 8001a4a:	f7fe fb5d 	bl	8000108 <__udivsi3>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	0019      	movs	r1, r3
 8001a52:	0020      	movs	r0, r4
 8001a54:	f7fe fb58 	bl	8000108 <__udivsi3>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f8ef 	bl	8001c3e <HAL_SYSTICK_Config>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e00f      	b.n	8001a88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d80b      	bhi.n	8001a86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	2301      	movs	r3, #1
 8001a72:	425b      	negs	r3, r3
 8001a74:	2200      	movs	r2, #0
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 f8bc 	bl	8001bf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_InitTick+0x64>)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b003      	add	sp, #12
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000004 	.word	0x20000004

08001a9c <__NVIC_EnableIRQ>:
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	1dfb      	adds	r3, r7, #7
 8001aa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b7f      	cmp	r3, #127	; 0x7f
 8001aae:	d809      	bhi.n	8001ac4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	231f      	movs	r3, #31
 8001ab8:	401a      	ands	r2, r3
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_EnableIRQ+0x30>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	4091      	lsls	r1, r2
 8001ac0:	000a      	movs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b002      	add	sp, #8
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae4:	d828      	bhi.n	8001b38 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae6:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <__NVIC_SetPriority+0xd4>)
 8001ae8:	1dfb      	adds	r3, r7, #7
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	33c0      	adds	r3, #192	; 0xc0
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	589b      	ldr	r3, [r3, r2]
 8001af6:	1dfa      	adds	r2, r7, #7
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	0011      	movs	r1, r2
 8001afc:	2203      	movs	r2, #3
 8001afe:	400a      	ands	r2, r1
 8001b00:	00d2      	lsls	r2, r2, #3
 8001b02:	21ff      	movs	r1, #255	; 0xff
 8001b04:	4091      	lsls	r1, r2
 8001b06:	000a      	movs	r2, r1
 8001b08:	43d2      	mvns	r2, r2
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	22ff      	movs	r2, #255	; 0xff
 8001b14:	401a      	ands	r2, r3
 8001b16:	1dfb      	adds	r3, r7, #7
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	4003      	ands	r3, r0
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b24:	481f      	ldr	r0, [pc, #124]	; (8001ba4 <__NVIC_SetPriority+0xd4>)
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	33c0      	adds	r3, #192	; 0xc0
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	501a      	str	r2, [r3, r0]
}
 8001b36:	e031      	b.n	8001b9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <__NVIC_SetPriority+0xd8>)
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	0019      	movs	r1, r3
 8001b40:	230f      	movs	r3, #15
 8001b42:	400b      	ands	r3, r1
 8001b44:	3b08      	subs	r3, #8
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3306      	adds	r3, #6
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	18d3      	adds	r3, r2, r3
 8001b4e:	3304      	adds	r3, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	1dfa      	adds	r2, r7, #7
 8001b54:	7812      	ldrb	r2, [r2, #0]
 8001b56:	0011      	movs	r1, r2
 8001b58:	2203      	movs	r2, #3
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	00d2      	lsls	r2, r2, #3
 8001b5e:	21ff      	movs	r1, #255	; 0xff
 8001b60:	4091      	lsls	r1, r2
 8001b62:	000a      	movs	r2, r1
 8001b64:	43d2      	mvns	r2, r2
 8001b66:	401a      	ands	r2, r3
 8001b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	22ff      	movs	r2, #255	; 0xff
 8001b70:	401a      	ands	r2, r3
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	0018      	movs	r0, r3
 8001b78:	2303      	movs	r3, #3
 8001b7a:	4003      	ands	r3, r0
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <__NVIC_SetPriority+0xd8>)
 8001b82:	1dfb      	adds	r3, r7, #7
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	001c      	movs	r4, r3
 8001b88:	230f      	movs	r3, #15
 8001b8a:	4023      	ands	r3, r4
 8001b8c:	3b08      	subs	r3, #8
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	430a      	orrs	r2, r1
 8001b92:	3306      	adds	r3, #6
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	18c3      	adds	r3, r0, r3
 8001b98:	3304      	adds	r3, #4
 8001b9a:	601a      	str	r2, [r3, #0]
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b003      	add	sp, #12
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <SysTick_Config+0x40>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e010      	b.n	8001be4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <SysTick_Config+0x44>)
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	425b      	negs	r3, r3
 8001bce:	2103      	movs	r1, #3
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff ff7d 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <SysTick_Config+0x44>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <SysTick_Config+0x44>)
 8001bde:	2207      	movs	r2, #7
 8001be0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b002      	add	sp, #8
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	00ffffff 	.word	0x00ffffff
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	210f      	movs	r1, #15
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	1c02      	adds	r2, r0, #0
 8001c04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	0002      	movs	r2, r0
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff ff33 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b002      	add	sp, #8
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ffaf 	bl	8001bac <SysTick_Config>
 8001c4e:	0003      	movs	r3, r0
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e036      	b.n	8001cdc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2221      	movs	r2, #33	; 0x21
 8001c72:	2102      	movs	r1, #2
 8001c74:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_DMA_Init+0x8c>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 f98c 	bl	8001fdc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2221      	movs	r2, #33	; 0x21
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}  
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	ffffc00f 	.word	0xffffc00f

08001ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001cf6:	2317      	movs	r3, #23
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	5c9b      	ldrb	r3, [r3, r2]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_DMA_Start_IT+0x24>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e04f      	b.n	8001dac <HAL_DMA_Start_IT+0xc4>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	2101      	movs	r1, #1
 8001d12:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2221      	movs	r2, #33	; 0x21
 8001d18:	5c9b      	ldrb	r3, [r3, r2]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d13a      	bne.n	8001d96 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2221      	movs	r2, #33	; 0x21
 8001d24:	2102      	movs	r1, #2
 8001d26:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f91d 	bl	8001f84 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	210e      	movs	r1, #14
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e00f      	b.n	8001d84 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	210a      	movs	r1, #10
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2104      	movs	r1, #4
 8001d80:	438a      	bics	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e007      	b.n	8001da6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001d9e:	2317      	movs	r3, #23
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	2202      	movs	r2, #2
 8001da4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001da6:	2317      	movs	r3, #23
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	781b      	ldrb	r3, [r3, #0]
} 
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b006      	add	sp, #24
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2221      	movs	r2, #33	; 0x21
 8001dc8:	5c9b      	ldrb	r3, [r3, r2]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d007      	beq.n	8001de0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001dd6:	230f      	movs	r3, #15
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e028      	b.n	8001e32 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	210e      	movs	r1, #14
 8001dec:	438a      	bics	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4091      	lsls	r1, r2
 8001e0c:	000a      	movs	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2221      	movs	r2, #33	; 0x21
 8001e14:	2101      	movs	r1, #1
 8001e16:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	0010      	movs	r0, r2
 8001e30:	4798      	blx	r3
    } 
  }
  return status;
 8001e32:	230f      	movs	r3, #15
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	781b      	ldrb	r3, [r3, #0]
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b004      	add	sp, #16
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	0013      	movs	r3, r2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	d024      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x72>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d020      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2220      	movs	r2, #32
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d107      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2104      	movs	r1, #4
 8001e88:	438a      	bics	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	2104      	movs	r1, #4
 8001e96:	4091      	lsls	r1, r2
 8001e98:	000a      	movs	r2, r1
 8001e9a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d100      	bne.n	8001ea6 <HAL_DMA_IRQHandler+0x66>
 8001ea4:	e06a      	b.n	8001f7c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	0010      	movs	r0, r2
 8001eae:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001eb0:	e064      	b.n	8001f7c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d02b      	beq.n	8001f1a <HAL_DMA_IRQHandler+0xda>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d027      	beq.n	8001f1a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d10b      	bne.n	8001eee <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	210a      	movs	r1, #10
 8001ee2:	438a      	bics	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2221      	movs	r2, #33	; 0x21
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	4091      	lsls	r1, r2
 8001efa:	000a      	movs	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2220      	movs	r2, #32
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d036      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	0010      	movs	r0, r2
 8001f16:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001f18:	e030      	b.n	8001f7c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2208      	movs	r2, #8
 8001f20:	409a      	lsls	r2, r3
 8001f22:	0013      	movs	r3, r2
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	d028      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x13c>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d024      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	210e      	movs	r1, #14
 8001f3e:	438a      	bics	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4091      	lsls	r1, r2
 8001f4e:	000a      	movs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2221      	movs	r2, #33	; 0x21
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	0010      	movs	r0, r2
 8001f78:	4798      	blx	r3
    }
   }
}  
 8001f7a:	e7ff      	b.n	8001f7c <HAL_DMA_IRQHandler+0x13c>
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b004      	add	sp, #16
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	4091      	lsls	r1, r2
 8001f9e:	000a      	movs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d108      	bne.n	8001fc4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fc2:	e007      	b.n	8001fd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	60da      	str	r2, [r3, #12]
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a08      	ldr	r2, [pc, #32]	; (800200c <DMA_CalcBaseAndBitshift+0x30>)
 8001fea:	4694      	mov	ip, r2
 8001fec:	4463      	add	r3, ip
 8001fee:	2114      	movs	r1, #20
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7fe f889 	bl	8000108 <__udivsi3>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	009a      	lsls	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <DMA_CalcBaseAndBitshift+0x34>)
 8002002:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}
 800200c:	bffdfff8 	.word	0xbffdfff8
 8002010:	40020000 	.word	0x40020000

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002022:	e149      	b.n	80022b8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4091      	lsls	r1, r2
 800202e:	000a      	movs	r2, r1
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d100      	bne.n	800203c <HAL_GPIO_Init+0x28>
 800203a:	e13a      	b.n	80022b2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x38>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b12      	cmp	r3, #18
 800204a:	d123      	bne.n	8002094 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	08da      	lsrs	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3208      	adds	r2, #8
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	58d3      	ldr	r3, [r2, r3]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2207      	movs	r2, #7
 800205e:	4013      	ands	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	409a      	lsls	r2, r3
 8002066:	0013      	movs	r3, r2
 8002068:	43da      	mvns	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2107      	movs	r1, #7
 8002078:	400b      	ands	r3, r1
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	409a      	lsls	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	6939      	ldr	r1, [r7, #16]
 8002092:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	409a      	lsls	r2, r3
 80020a2:	0013      	movs	r3, r2
 80020a4:	43da      	mvns	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	409a      	lsls	r2, r3
 80020ba:	0013      	movs	r3, r2
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d00b      	beq.n	80020e8 <HAL_GPIO_Init+0xd4>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b12      	cmp	r3, #18
 80020e6:	d130      	bne.n	800214a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	409a      	lsls	r2, r3
 80020f6:	0013      	movs	r3, r2
 80020f8:	43da      	mvns	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	409a      	lsls	r2, r3
 800210a:	0013      	movs	r3, r2
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211e:	2201      	movs	r2, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
 8002124:	0013      	movs	r3, r2
 8002126:	43da      	mvns	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	2201      	movs	r2, #1
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
 800213c:	0013      	movs	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	409a      	lsls	r2, r3
 8002158:	0013      	movs	r3, r2
 800215a:	43da      	mvns	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	055b      	lsls	r3, r3, #21
 8002182:	4013      	ands	r3, r2
 8002184:	d100      	bne.n	8002188 <HAL_GPIO_Init+0x174>
 8002186:	e094      	b.n	80022b2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002188:	4b51      	ldr	r3, [pc, #324]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 800218e:	2101      	movs	r1, #1
 8002190:	430a      	orrs	r2, r1
 8002192:	619a      	str	r2, [r3, #24]
 8002194:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2201      	movs	r2, #1
 800219a:	4013      	ands	r3, r2
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021a0:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <HAL_GPIO_Init+0x2c0>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	589b      	ldr	r3, [r3, r2]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4013      	ands	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	409a      	lsls	r2, r3
 80021ba:	0013      	movs	r3, r2
 80021bc:	43da      	mvns	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	2390      	movs	r3, #144	; 0x90
 80021c8:	05db      	lsls	r3, r3, #23
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d00d      	beq.n	80021ea <HAL_GPIO_Init+0x1d6>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a41      	ldr	r2, [pc, #260]	; (80022d8 <HAL_GPIO_Init+0x2c4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x1d2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a40      	ldr	r2, [pc, #256]	; (80022dc <HAL_GPIO_Init+0x2c8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_GPIO_Init+0x1ce>
 80021de:	2302      	movs	r3, #2
 80021e0:	e004      	b.n	80021ec <HAL_GPIO_Init+0x1d8>
 80021e2:	2305      	movs	r3, #5
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_Init+0x1d8>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_Init+0x1d8>
 80021ea:	2300      	movs	r3, #0
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	2103      	movs	r1, #3
 80021f0:	400a      	ands	r2, r1
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4093      	lsls	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021fc:	4935      	ldr	r1, [pc, #212]	; (80022d4 <HAL_GPIO_Init+0x2c0>)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220a:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43da      	mvns	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	025b      	lsls	r3, r3, #9
 8002222:	4013      	ands	r3, r2
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43da      	mvns	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	029b      	lsls	r3, r3, #10
 800224c:	4013      	ands	r3, r2
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43da      	mvns	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	035b      	lsls	r3, r3, #13
 8002276:	4013      	ands	r3, r2
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43da      	mvns	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	039b      	lsls	r3, r3, #14
 80022a0:	4013      	ands	r3, r2
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	40da      	lsrs	r2, r3
 80022c0:	1e13      	subs	r3, r2, #0
 80022c2:	d000      	beq.n	80022c6 <HAL_GPIO_Init+0x2b2>
 80022c4:	e6ae      	b.n	8002024 <HAL_GPIO_Init+0x10>
  } 
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b006      	add	sp, #24
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010000 	.word	0x40010000
 80022d8:	48000400 	.word	0x48000400
 80022dc:	48000800 	.word	0x48000800
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	000a      	movs	r2, r1
 80022ee:	1cbb      	adds	r3, r7, #2
 80022f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	1cba      	adds	r2, r7, #2
 80022f8:	8812      	ldrh	r2, [r2, #0]
 80022fa:	4013      	ands	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80022fe:	230f      	movs	r3, #15
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e003      	b.n	8002310 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002308:	230f      	movs	r3, #15
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002310:	230f      	movs	r3, #15
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	781b      	ldrb	r3, [r3, #0]
  }
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b004      	add	sp, #16
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	0008      	movs	r0, r1
 8002328:	0011      	movs	r1, r2
 800232a:	1cbb      	adds	r3, r7, #2
 800232c:	1c02      	adds	r2, r0, #0
 800232e:	801a      	strh	r2, [r3, #0]
 8002330:	1c7b      	adds	r3, r7, #1
 8002332:	1c0a      	adds	r2, r1, #0
 8002334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002336:	1c7b      	adds	r3, r7, #1
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800233e:	1cbb      	adds	r3, r7, #2
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002346:	e003      	b.n	8002350 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002348:	1cbb      	adds	r3, r7, #2
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	000a      	movs	r2, r1
 8002362:	1cbb      	adds	r3, r7, #2
 8002364:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	1cba      	adds	r2, r7, #2
 800236c:	8812      	ldrh	r2, [r2, #0]
 800236e:	4013      	ands	r3, r2
 8002370:	d005      	beq.n	800237e <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002372:	1cbb      	adds	r3, r7, #2
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	041a      	lsls	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237e:	1cbb      	adds	r3, r7, #2
 8002380:	881a      	ldrh	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	0002      	movs	r2, r0
 8002398:	1dbb      	adds	r3, r7, #6
 800239a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	1dba      	adds	r2, r7, #6
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	4013      	ands	r3, r2
 80023a6:	d008      	beq.n	80023ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80023aa:	1dba      	adds	r2, r7, #6
 80023ac:	8812      	ldrh	r2, [r2, #0]
 80023ae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b0:	1dbb      	adds	r3, r7, #6
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7fe fd77 	bl	8000ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	40010400 	.word	0x40010400

080023c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e082      	b.n	80024e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2241      	movs	r2, #65	; 0x41
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d107      	bne.n	80023f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2240      	movs	r2, #64	; 0x40
 80023ea:	2100      	movs	r1, #0
 80023ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7fe fdaf 	bl	8000f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2241      	movs	r2, #65	; 0x41
 80023fa:	2124      	movs	r1, #36	; 0x24
 80023fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	438a      	bics	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4934      	ldr	r1, [pc, #208]	; (80024e8 <HAL_I2C_Init+0x120>)
 8002418:	400a      	ands	r2, r1
 800241a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4931      	ldr	r1, [pc, #196]	; (80024ec <HAL_I2C_Init+0x124>)
 8002428:	400a      	ands	r2, r1
 800242a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d108      	bne.n	8002446 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0209      	lsls	r1, r1, #8
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	e007      	b.n	8002456 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2184      	movs	r1, #132	; 0x84
 8002450:	0209      	lsls	r1, r1, #8
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d104      	bne.n	8002468 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	491f      	ldr	r1, [pc, #124]	; (80024f0 <HAL_I2C_Init+0x128>)
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	491a      	ldr	r1, [pc, #104]	; (80024ec <HAL_I2C_Init+0x124>)
 8002484:	400a      	ands	r2, r1
 8002486:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	431a      	orrs	r2, r3
 8002492:	0011      	movs	r1, r2
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	021a      	lsls	r2, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69d9      	ldr	r1, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2241      	movs	r2, #65	; 0x41
 80024cc:	2120      	movs	r1, #32
 80024ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2242      	movs	r2, #66	; 0x42
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	f0ffffff 	.word	0xf0ffffff
 80024ec:	ffff7fff 	.word	0xffff7fff
 80024f0:	02008000 	.word	0x02008000

080024f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2241      	movs	r2, #65	; 0x41
 8002502:	5c9b      	ldrb	r3, [r3, r2]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	d138      	bne.n	800257c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2240      	movs	r2, #64	; 0x40
 800250e:	5c9b      	ldrb	r3, [r3, r2]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002514:	2302      	movs	r3, #2
 8002516:	e032      	b.n	800257e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2240      	movs	r2, #64	; 0x40
 800251c:	2101      	movs	r1, #1
 800251e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2241      	movs	r2, #65	; 0x41
 8002524:	2124      	movs	r1, #36	; 0x24
 8002526:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	438a      	bics	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4911      	ldr	r1, [pc, #68]	; (8002588 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002544:	400a      	ands	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2101      	movs	r1, #1
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2241      	movs	r2, #65	; 0x41
 800256c:	2120      	movs	r1, #32
 800256e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2240      	movs	r2, #64	; 0x40
 8002574:	2100      	movs	r1, #0
 8002576:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	ffffefff 	.word	0xffffefff

0800258c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2241      	movs	r2, #65	; 0x41
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d139      	bne.n	8002616 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e033      	b.n	8002618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2241      	movs	r2, #65	; 0x41
 80025bc:	2124      	movs	r1, #36	; 0x24
 80025be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a11      	ldr	r2, [pc, #68]	; (8002620 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2241      	movs	r2, #65	; 0x41
 8002606:	2120      	movs	r1, #32
 8002608:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2240      	movs	r2, #64	; 0x40
 800260e:	2100      	movs	r1, #0
 8002610:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002616:	2302      	movs	r3, #2
  }
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}
 8002620:	fffff0ff 	.word	0xfffff0ff

08002624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e303      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d100      	bne.n	8002642 <HAL_RCC_OscConfig+0x1e>
 8002640:	e08d      	b.n	800275e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002642:	4bc4      	ldr	r3, [pc, #784]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	220c      	movs	r2, #12
 8002648:	4013      	ands	r3, r2
 800264a:	2b04      	cmp	r3, #4
 800264c:	d00e      	beq.n	800266c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800264e:	4bc1      	ldr	r3, [pc, #772]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	220c      	movs	r2, #12
 8002654:	4013      	ands	r3, r2
 8002656:	2b08      	cmp	r3, #8
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x64>
 800265a:	4bbe      	ldr	r3, [pc, #760]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	025b      	lsls	r3, r3, #9
 8002662:	401a      	ands	r2, r3
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	025b      	lsls	r3, r3, #9
 8002668:	429a      	cmp	r2, r3
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	4bb9      	ldr	r3, [pc, #740]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	029b      	lsls	r3, r3, #10
 8002674:	4013      	ands	r3, r2
 8002676:	d100      	bne.n	800267a <HAL_RCC_OscConfig+0x56>
 8002678:	e070      	b.n	800275c <HAL_RCC_OscConfig+0x138>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d000      	beq.n	8002684 <HAL_RCC_OscConfig+0x60>
 8002682:	e06b      	b.n	800275c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e2da      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_OscConfig+0x7c>
 8002690:	4bb0      	ldr	r3, [pc, #704]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4baf      	ldr	r3, [pc, #700]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	0249      	lsls	r1, r1, #9
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e02f      	b.n	8002700 <HAL_RCC_OscConfig+0xdc>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x9e>
 80026a8:	4baa      	ldr	r3, [pc, #680]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4ba9      	ldr	r3, [pc, #676]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026ae:	49aa      	ldr	r1, [pc, #680]	; (8002958 <HAL_RCC_OscConfig+0x334>)
 80026b0:	400a      	ands	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	4ba7      	ldr	r3, [pc, #668]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4ba6      	ldr	r3, [pc, #664]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026ba:	49a8      	ldr	r1, [pc, #672]	; (800295c <HAL_RCC_OscConfig+0x338>)
 80026bc:	400a      	ands	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e01e      	b.n	8002700 <HAL_RCC_OscConfig+0xdc>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d10e      	bne.n	80026e8 <HAL_RCC_OscConfig+0xc4>
 80026ca:	4ba2      	ldr	r3, [pc, #648]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4ba1      	ldr	r3, [pc, #644]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	02c9      	lsls	r1, r1, #11
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	4b9e      	ldr	r3, [pc, #632]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b9d      	ldr	r3, [pc, #628]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	0249      	lsls	r1, r1, #9
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0xdc>
 80026e8:	4b9a      	ldr	r3, [pc, #616]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b99      	ldr	r3, [pc, #612]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026ee:	499a      	ldr	r1, [pc, #616]	; (8002958 <HAL_RCC_OscConfig+0x334>)
 80026f0:	400a      	ands	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	4b97      	ldr	r3, [pc, #604]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b96      	ldr	r3, [pc, #600]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026fa:	4998      	ldr	r1, [pc, #608]	; (800295c <HAL_RCC_OscConfig+0x338>)
 80026fc:	400a      	ands	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d014      	beq.n	8002732 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff f840 	bl	800178c <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002712:	f7ff f83b 	bl	800178c <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e28c      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002724:	4b8b      	ldr	r3, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0xee>
 8002730:	e015      	b.n	800275e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7ff f82b 	bl	800178c <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff f826 	bl	800178c <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e277      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	4b81      	ldr	r3, [pc, #516]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	029b      	lsls	r3, r3, #10
 8002756:	4013      	ands	r3, r2
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x118>
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d100      	bne.n	800276a <HAL_RCC_OscConfig+0x146>
 8002768:	e069      	b.n	800283e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800276a:	4b7a      	ldr	r3, [pc, #488]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	220c      	movs	r2, #12
 8002770:	4013      	ands	r3, r2
 8002772:	d00b      	beq.n	800278c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002774:	4b77      	ldr	r3, [pc, #476]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	220c      	movs	r2, #12
 800277a:	4013      	ands	r3, r2
 800277c:	2b08      	cmp	r3, #8
 800277e:	d11c      	bne.n	80027ba <HAL_RCC_OscConfig+0x196>
 8002780:	4b74      	ldr	r3, [pc, #464]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	025b      	lsls	r3, r3, #9
 8002788:	4013      	ands	r3, r2
 800278a:	d116      	bne.n	80027ba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278c:	4b71      	ldr	r3, [pc, #452]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2202      	movs	r2, #2
 8002792:	4013      	ands	r3, r2
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x17e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e24d      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b6c      	ldr	r3, [pc, #432]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	22f8      	movs	r2, #248	; 0xf8
 80027a8:	4393      	bics	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	00da      	lsls	r2, r3, #3
 80027b2:	4b68      	ldr	r3, [pc, #416]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b8:	e041      	b.n	800283e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d024      	beq.n	800280c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c2:	4b64      	ldr	r3, [pc, #400]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b63      	ldr	r3, [pc, #396]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80027c8:	2101      	movs	r1, #1
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe ffdd 	bl	800178c <HAL_GetTick>
 80027d2:	0003      	movs	r3, r0
 80027d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe ffd8 	bl	800178c <HAL_GetTick>
 80027dc:	0002      	movs	r2, r0
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e229      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2202      	movs	r2, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d0f1      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b57      	ldr	r3, [pc, #348]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	22f8      	movs	r2, #248	; 0xf8
 80027fa:	4393      	bics	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00da      	lsls	r2, r3, #3
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e018      	b.n	800283e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280c:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b50      	ldr	r3, [pc, #320]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002812:	2101      	movs	r1, #1
 8002814:	438a      	bics	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7fe ffb8 	bl	800178c <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe ffb3 	bl	800178c <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e204      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d1f1      	bne.n	8002822 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2208      	movs	r2, #8
 8002844:	4013      	ands	r3, r2
 8002846:	d036      	beq.n	80028b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d019      	beq.n	8002884 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002850:	4b40      	ldr	r3, [pc, #256]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002854:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002856:	2101      	movs	r1, #1
 8002858:	430a      	orrs	r2, r1
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7fe ff96 	bl	800178c <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002866:	f7fe ff91 	bl	800178c <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1e2      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2202      	movs	r2, #2
 800287e:	4013      	ands	r3, r2
 8002880:	d0f1      	beq.n	8002866 <HAL_RCC_OscConfig+0x242>
 8002882:	e018      	b.n	80028b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002884:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002888:	4b32      	ldr	r3, [pc, #200]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 800288a:	2101      	movs	r1, #1
 800288c:	438a      	bics	r2, r1
 800288e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7fe ff7c 	bl	800178c <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289a:	f7fe ff77 	bl	800178c <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e1c8      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2202      	movs	r2, #2
 80028b2:	4013      	ands	r3, r2
 80028b4:	d1f1      	bne.n	800289a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	d100      	bne.n	80028c2 <HAL_RCC_OscConfig+0x29e>
 80028c0:	e0b6      	b.n	8002a30 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	231f      	movs	r3, #31
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b22      	ldr	r3, [pc, #136]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	055b      	lsls	r3, r3, #21
 80028d2:	4013      	ands	r3, r2
 80028d4:	d111      	bne.n	80028fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80028d8:	69da      	ldr	r2, [r3, #28]
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80028dc:	2180      	movs	r1, #128	; 0x80
 80028de:	0549      	lsls	r1, r1, #21
 80028e0:	430a      	orrs	r2, r1
 80028e2:	61da      	str	r2, [r3, #28]
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	055b      	lsls	r3, r3, #21
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028f2:	231f      	movs	r3, #31
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_RCC_OscConfig+0x33c>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4013      	ands	r3, r2
 8002904:	d11a      	bne.n	800293c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_RCC_OscConfig+0x33c>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_RCC_OscConfig+0x33c>)
 800290c:	2180      	movs	r1, #128	; 0x80
 800290e:	0049      	lsls	r1, r1, #1
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002914:	f7fe ff3a 	bl	800178c <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291e:	f7fe ff35 	bl	800178c <HAL_GetTick>
 8002922:	0002      	movs	r2, r0
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b64      	cmp	r3, #100	; 0x64
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e186      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_OscConfig+0x33c>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4013      	ands	r3, r2
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10f      	bne.n	8002964 <HAL_RCC_OscConfig+0x340>
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	4b02      	ldr	r3, [pc, #8]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 800294a:	2101      	movs	r1, #1
 800294c:	430a      	orrs	r2, r1
 800294e:	621a      	str	r2, [r3, #32]
 8002950:	e036      	b.n	80029c0 <HAL_RCC_OscConfig+0x39c>
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	40021000 	.word	0x40021000
 8002958:	fffeffff 	.word	0xfffeffff
 800295c:	fffbffff 	.word	0xfffbffff
 8002960:	40007000 	.word	0x40007000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10c      	bne.n	8002986 <HAL_RCC_OscConfig+0x362>
 800296c:	4bb6      	ldr	r3, [pc, #728]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 800296e:	6a1a      	ldr	r2, [r3, #32]
 8002970:	4bb5      	ldr	r3, [pc, #724]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002972:	2101      	movs	r1, #1
 8002974:	438a      	bics	r2, r1
 8002976:	621a      	str	r2, [r3, #32]
 8002978:	4bb3      	ldr	r3, [pc, #716]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	4bb2      	ldr	r3, [pc, #712]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 800297e:	2104      	movs	r1, #4
 8002980:	438a      	bics	r2, r1
 8002982:	621a      	str	r2, [r3, #32]
 8002984:	e01c      	b.n	80029c0 <HAL_RCC_OscConfig+0x39c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b05      	cmp	r3, #5
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x384>
 800298e:	4bae      	ldr	r3, [pc, #696]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	4bad      	ldr	r3, [pc, #692]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002994:	2104      	movs	r1, #4
 8002996:	430a      	orrs	r2, r1
 8002998:	621a      	str	r2, [r3, #32]
 800299a:	4bab      	ldr	r3, [pc, #684]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	4baa      	ldr	r3, [pc, #680]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	621a      	str	r2, [r3, #32]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0x39c>
 80029a8:	4ba7      	ldr	r3, [pc, #668]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	4ba6      	ldr	r3, [pc, #664]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 80029ae:	2101      	movs	r1, #1
 80029b0:	438a      	bics	r2, r1
 80029b2:	621a      	str	r2, [r3, #32]
 80029b4:	4ba4      	ldr	r3, [pc, #656]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	4ba3      	ldr	r3, [pc, #652]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 80029ba:	2104      	movs	r1, #4
 80029bc:	438a      	bics	r2, r1
 80029be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d014      	beq.n	80029f2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7fe fee0 	bl	800178c <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	e009      	b.n	80029e6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fedb 	bl	800178c <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	4a9b      	ldr	r2, [pc, #620]	; (8002c4c <HAL_RCC_OscConfig+0x628>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e12b      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	4b98      	ldr	r3, [pc, #608]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3ae>
 80029f0:	e013      	b.n	8002a1a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fecb 	bl	800178c <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fa:	e009      	b.n	8002a10 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe fec6 	bl	800178c <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	4a91      	ldr	r2, [pc, #580]	; (8002c4c <HAL_RCC_OscConfig+0x628>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e116      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a10:	4b8d      	ldr	r3, [pc, #564]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	2202      	movs	r2, #2
 8002a16:	4013      	ands	r3, r2
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a1a:	231f      	movs	r3, #31
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a24:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	4b87      	ldr	r3, [pc, #540]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a2a:	4989      	ldr	r1, [pc, #548]	; (8002c50 <HAL_RCC_OscConfig+0x62c>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2210      	movs	r2, #16
 8002a36:	4013      	ands	r3, r2
 8002a38:	d063      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d12a      	bne.n	8002a98 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a42:	4b81      	ldr	r3, [pc, #516]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a46:	4b80      	ldr	r3, [pc, #512]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a48:	2104      	movs	r1, #4
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a4e:	4b7e      	ldr	r3, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a54:	2101      	movs	r1, #1
 8002a56:	430a      	orrs	r2, r1
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fe97 	bl	800178c <HAL_GetTick>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a64:	f7fe fe92 	bl	800178c <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0e3      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a76:	4b74      	ldr	r3, [pc, #464]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d0f1      	beq.n	8002a64 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a80:	4b71      	ldr	r3, [pc, #452]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	22f8      	movs	r2, #248	; 0xf8
 8002a86:	4393      	bics	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	00da      	lsls	r2, r3, #3
 8002a90:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002a92:	430a      	orrs	r2, r1
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34
 8002a96:	e034      	b.n	8002b02 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	3305      	adds	r3, #5
 8002a9e:	d111      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002aa0:	4b69      	ldr	r3, [pc, #420]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002aac:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	22f8      	movs	r2, #248	; 0xf8
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	00da      	lsls	r2, r3, #3
 8002abc:	4b62      	ldr	r3, [pc, #392]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac2:	e01e      	b.n	8002b02 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ac4:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac8:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002aca:	2104      	movs	r1, #4
 8002acc:	430a      	orrs	r2, r1
 8002ace:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ad0:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad4:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	438a      	bics	r2, r1
 8002ada:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fe fe56 	bl	800178c <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ae6:	f7fe fe51 	bl	800178c <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0a2      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	2202      	movs	r2, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d1f1      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d100      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4e8>
 8002b0a:	e097      	b.n	8002c3c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0c:	4b4e      	ldr	r3, [pc, #312]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	220c      	movs	r2, #12
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d100      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4f6>
 8002b18:	e06b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d14c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b48      	ldr	r3, [pc, #288]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b28:	494a      	ldr	r1, [pc, #296]	; (8002c54 <HAL_RCC_OscConfig+0x630>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fe2d 	bl	800178c <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fe28 	bl	800178c <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e079      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	049b      	lsls	r3, r3, #18
 8002b52:	4013      	ands	r3, r2
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b56:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	220f      	movs	r2, #15
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b64:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a3a      	ldr	r2, [pc, #232]	; (8002c58 <HAL_RCC_OscConfig+0x634>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002b8a:	2180      	movs	r1, #128	; 0x80
 8002b8c:	0449      	lsls	r1, r1, #17
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fdfb 	bl	800178c <HAL_GetTick>
 8002b96:	0003      	movs	r3, r0
 8002b98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fdf6 	bl	800178c <HAL_GetTick>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e047      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	049b      	lsls	r3, r3, #18
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x578>
 8002bba:	e03f      	b.n	8002c3c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbc:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002bc2:	4924      	ldr	r1, [pc, #144]	; (8002c54 <HAL_RCC_OscConfig+0x630>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fde0 	bl	800178c <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe fddb 	bl	800178c <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e02c      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	049b      	lsls	r3, r3, #18
 8002bec:	4013      	ands	r3, r2
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5ae>
 8002bf0:	e024      	b.n	8002c3c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e01f      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	025b      	lsls	r3, r3, #9
 8002c10:	401a      	ands	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d10e      	bne.n	8002c38 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	401a      	ands	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	23f0      	movs	r3, #240	; 0xf0
 8002c2c:	039b      	lsls	r3, r3, #14
 8002c2e:	401a      	ands	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b008      	add	sp, #32
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	00001388 	.word	0x00001388
 8002c50:	efffffff 	.word	0xefffffff
 8002c54:	feffffff 	.word	0xfeffffff
 8002c58:	ffc2ffff 	.word	0xffc2ffff

08002c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0b3      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b5b      	ldr	r3, [pc, #364]	; (8002de0 <HAL_RCC_ClockConfig+0x184>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2201      	movs	r2, #1
 8002c76:	4013      	ands	r3, r2
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d911      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <HAL_RCC_ClockConfig+0x184>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4393      	bics	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <HAL_RCC_ClockConfig+0x184>)
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x184>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	4013      	ands	r3, r2
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e09a      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d015      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d006      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002cb6:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002cbc:	21e0      	movs	r1, #224	; 0xe0
 8002cbe:	00c9      	lsls	r1, r1, #3
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	22f0      	movs	r2, #240	; 0xf0
 8002cca:	4393      	bics	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	4b44      	ldr	r3, [pc, #272]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d040      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	029b      	lsls	r3, r3, #10
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d114      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06e      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b38      	ldr	r3, [pc, #224]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	049b      	lsls	r3, r3, #18
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e062      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2202      	movs	r2, #2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e05b      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2203      	movs	r2, #3
 8002d26:	4393      	bics	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002d30:	430a      	orrs	r2, r1
 8002d32:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fd2a 	bl	800178c <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3e:	f7fe fd25 	bl	800178c <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <HAL_RCC_ClockConfig+0x18c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e042      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	220c      	movs	r2, #12
 8002d58:	401a      	ands	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1ec      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <HAL_RCC_ClockConfig+0x184>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d211      	bcs.n	8002d96 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_RCC_ClockConfig+0x184>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4393      	bics	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCC_ClockConfig+0x184>)
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x184>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e020      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_RCC_ClockConfig+0x190>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002db4:	f000 f820 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002db8:	0001      	movs	r1, r0
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x194>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	000a      	movs	r2, r1
 8002dca:	40da      	lsrs	r2, r3
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_ClockConfig+0x198>)
 8002dce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fe fe2f 	bl	8001a34 <HAL_InitTick>
  
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b004      	add	sp, #16
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40022000 	.word	0x40022000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	00001388 	.word	0x00001388
 8002dec:	fffff8ff 	.word	0xfffff8ff
 8002df0:	08004508 	.word	0x08004508
 8002df4:	20000000 	.word	0x20000000

08002df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b08f      	sub	sp, #60	; 0x3c
 8002dfc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002dfe:	2314      	movs	r3, #20
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e06:	c313      	stmia	r3!, {r0, r1, r4}
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e12:	c313      	stmia	r3!, {r0, r1, r4}
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e20:	2300      	movs	r3, #0
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002e2c:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	220c      	movs	r2, #12
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d002      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x4a>
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d003      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x50>
 8002e40:	e02d      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e46:	e02d      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	0c9b      	lsrs	r3, r3, #18
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2214      	movs	r2, #20
 8002e52:	18ba      	adds	r2, r7, r2
 8002e54:	5cd3      	ldrb	r3, [r2, r3]
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	4013      	ands	r3, r2
 8002e60:	1d3a      	adds	r2, r7, #4
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	025b      	lsls	r3, r3, #9
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d009      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e72:	4812      	ldr	r0, [pc, #72]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e74:	f7fd f948 	bl	8000108 <__udivsi3>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	4353      	muls	r3, r2
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
 8002e82:	e009      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e86:	000a      	movs	r2, r1
 8002e88:	0152      	lsls	r2, r2, #5
 8002e8a:	1a52      	subs	r2, r2, r1
 8002e8c:	0193      	lsls	r3, r2, #6
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	185b      	adds	r3, r3, r1
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e9c:	e002      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ea2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b00f      	add	sp, #60	; 0x3c
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	080044e8 	.word	0x080044e8
 8002eb4:	080044f8 	.word	0x080044f8
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ed8:	f7ff fff2 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002edc:	0001      	movs	r1, r0
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	4a04      	ldr	r2, [pc, #16]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	40d9      	lsrs	r1, r3
 8002eee:	000b      	movs	r3, r1
}    
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	08004518 	.word	0x08004518

08002f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	025b      	lsls	r3, r3, #9
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002f1c:	e08f      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	2317      	movs	r3, #23
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b57      	ldr	r3, [pc, #348]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	055b      	lsls	r3, r3, #21
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d111      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	4b54      	ldr	r3, [pc, #336]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	4b53      	ldr	r3, [pc, #332]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	0549      	lsls	r1, r1, #21
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
 8002f40:	4b50      	ldr	r3, [pc, #320]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	055b      	lsls	r3, r3, #21
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2317      	movs	r3, #23
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d11a      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b49      	ldr	r3, [pc, #292]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b48      	ldr	r3, [pc, #288]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f70:	f7fe fc0c 	bl	800178c <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	e008      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7a:	f7fe fc07 	bl	800178c <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b64      	cmp	r3, #100	; 0x64
 8002f86:	d901      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e077      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4013      	ands	r3, r2
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f98:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	23c0      	movs	r3, #192	; 0xc0
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d034      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	23c0      	movs	r3, #192	; 0xc0
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d02c      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fba:	4b32      	ldr	r3, [pc, #200]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a33      	ldr	r2, [pc, #204]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	0249      	lsls	r1, r1, #9
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fd8:	492d      	ldr	r1, [pc, #180]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002fda:	400a      	ands	r2, r1
 8002fdc:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d013      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe fbce 	bl	800178c <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	e009      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe fbc9 	bl	800178c <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	4a24      	ldr	r2, [pc, #144]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e038      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	2202      	movs	r2, #2
 8003010:	4013      	ands	r3, r2
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003024:	430a      	orrs	r2, r1
 8003026:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003028:	2317      	movs	r3, #23
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003038:	4917      	ldr	r1, [pc, #92]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800303a:	400a      	ands	r2, r1
 800303c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	4013      	ands	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	2203      	movs	r2, #3
 800304e:	4393      	bics	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003058:	430a      	orrs	r2, r1
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2220      	movs	r2, #32
 8003062:	4013      	ands	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	2210      	movs	r2, #16
 800306c:	4393      	bics	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003076:	430a      	orrs	r2, r1
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b006      	add	sp, #24
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	40007000 	.word	0x40007000
 800308c:	fffffcff 	.word	0xfffffcff
 8003090:	fffeffff 	.word	0xfffeffff
 8003094:	00001388 	.word	0x00001388
 8003098:	efffffff 	.word	0xefffffff

0800309c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e01e      	b.n	80030ec <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	223d      	movs	r2, #61	; 0x3d
 80030b2:	5c9b      	ldrb	r3, [r3, r2]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	223c      	movs	r2, #60	; 0x3c
 80030be:	2100      	movs	r1, #0
 80030c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7fd ff93 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	223d      	movs	r2, #61	; 0x3d
 80030ce:	2102      	movs	r1, #2
 80030d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	0019      	movs	r1, r3
 80030dc:	0010      	movs	r0, r2
 80030de:	f000 f84f 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	223d      	movs	r2, #61	; 0x3d
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	223c      	movs	r2, #60	; 0x3c
 8003102:	5c9b      	ldrb	r3, [r3, r2]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003108:	2302      	movs	r3, #2
 800310a:	e032      	b.n	8003172 <HAL_TIM_SlaveConfigSynchro+0x7e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	223c      	movs	r2, #60	; 0x3c
 8003110:	2101      	movs	r1, #1
 8003112:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	223d      	movs	r2, #61	; 0x3d
 8003118:	2102      	movs	r1, #2
 800311a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0011      	movs	r1, r2
 8003122:	0018      	movs	r0, r3
 8003124:	f000 f8a2 	bl	800326c <TIM_SlaveTimer_SetConfig>
 8003128:	1e03      	subs	r3, r0, #0
 800312a:	d009      	beq.n	8003140 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	223d      	movs	r2, #61	; 0x3d
 8003130:	2101      	movs	r1, #1
 8003132:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	223c      	movs	r2, #60	; 0x3c
 8003138:	2100      	movs	r1, #0
 800313a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e018      	b.n	8003172 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2140      	movs	r1, #64	; 0x40
 800314c:	438a      	bics	r2, r1
 800314e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <HAL_TIM_SlaveConfigSynchro+0x88>)
 800315c:	400a      	ands	r2, r1
 800315e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	223d      	movs	r2, #61	; 0x3d
 8003164:	2101      	movs	r1, #1
 8003166:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	223c      	movs	r2, #60	; 0x3c
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b002      	add	sp, #8
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	ffffbfff 	.word	0xffffbfff

08003180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a30      	ldr	r2, [pc, #192]	; (8003254 <TIM_Base_SetConfig+0xd4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d008      	beq.n	80031aa <TIM_Base_SetConfig+0x2a>
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	05db      	lsls	r3, r3, #23
 800319e:	429a      	cmp	r2, r3
 80031a0:	d003      	beq.n	80031aa <TIM_Base_SetConfig+0x2a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <TIM_Base_SetConfig+0xd8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d108      	bne.n	80031bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2270      	movs	r2, #112	; 0x70
 80031ae:	4393      	bics	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a25      	ldr	r2, [pc, #148]	; (8003254 <TIM_Base_SetConfig+0xd4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d014      	beq.n	80031ee <TIM_Base_SetConfig+0x6e>
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	05db      	lsls	r3, r3, #23
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d00f      	beq.n	80031ee <TIM_Base_SetConfig+0x6e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <TIM_Base_SetConfig+0xd8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <TIM_Base_SetConfig+0x6e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <TIM_Base_SetConfig+0xdc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0x6e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <TIM_Base_SetConfig+0xe0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0x6e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <TIM_Base_SetConfig+0xe4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <TIM_Base_SetConfig+0xe8>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	4393      	bics	r3, r2
 8003206:	001a      	movs	r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <TIM_Base_SetConfig+0xd4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <TIM_Base_SetConfig+0xbe>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a0b      	ldr	r2, [pc, #44]	; (8003260 <TIM_Base_SetConfig+0xe0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_Base_SetConfig+0xbe>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <TIM_Base_SetConfig+0xe4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d103      	bne.n	8003246 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	615a      	str	r2, [r3, #20]
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b004      	add	sp, #16
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400
 800325c:	40002000 	.word	0x40002000
 8003260:	40014400 	.word	0x40014400
 8003264:	40014800 	.word	0x40014800
 8003268:	fffffcff 	.word	0xfffffcff

0800326c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2270      	movs	r2, #112	; 0x70
 8003282:	4393      	bics	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2207      	movs	r2, #7
 8003294:	4393      	bics	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b30      	cmp	r3, #48	; 0x30
 80032b0:	d05a      	beq.n	8003368 <TIM_SlaveTimer_SetConfig+0xfc>
 80032b2:	d806      	bhi.n	80032c2 <TIM_SlaveTimer_SetConfig+0x56>
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d057      	beq.n	8003368 <TIM_SlaveTimer_SetConfig+0xfc>
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d055      	beq.n	8003368 <TIM_SlaveTimer_SetConfig+0xfc>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d053      	beq.n	8003368 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80032c0:	e053      	b.n	800336a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 80032c2:	2b50      	cmp	r3, #80	; 0x50
 80032c4:	d03c      	beq.n	8003340 <TIM_SlaveTimer_SetConfig+0xd4>
 80032c6:	d802      	bhi.n	80032ce <TIM_SlaveTimer_SetConfig+0x62>
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d010      	beq.n	80032ee <TIM_SlaveTimer_SetConfig+0x82>
      break;
 80032cc:	e04d      	b.n	800336a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 80032ce:	2b60      	cmp	r3, #96	; 0x60
 80032d0:	d040      	beq.n	8003354 <TIM_SlaveTimer_SetConfig+0xe8>
 80032d2:	2b70      	cmp	r3, #112	; 0x70
 80032d4:	d000      	beq.n	80032d8 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 80032d6:	e048      	b.n	800336a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68d9      	ldr	r1, [r3, #12]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f000 f8a4 	bl	8003434 <TIM_ETR_SetConfig>
      break;
 80032ec:	e03d      	b.n	800336a <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d101      	bne.n	80032fa <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e038      	b.n	800336c <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a1a      	ldr	r2, [r3, #32]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2101      	movs	r1, #1
 800330e:	438a      	bics	r2, r1
 8003310:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	22f0      	movs	r2, #240	; 0xf0
 800331e:	4393      	bics	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	621a      	str	r2, [r3, #32]
      break;
 800333e:	e014      	b.n	800336a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	001a      	movs	r2, r3
 800334e:	f000 f811 	bl	8003374 <TIM_TI1_ConfigInputStage>
      break;
 8003352:	e00a      	b.n	800336a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6899      	ldr	r1, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	001a      	movs	r2, r3
 8003362:	f000 f835 	bl	80033d0 <TIM_TI2_ConfigInputStage>
      break;
 8003366:	e000      	b.n	800336a <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 8003368:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	b006      	add	sp, #24
 8003372:	bd80      	pop	{r7, pc}

08003374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	2201      	movs	r2, #1
 800338c:	4393      	bics	r3, r2
 800338e:	001a      	movs	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	22f0      	movs	r2, #240	; 0xf0
 800339e:	4393      	bics	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	220a      	movs	r2, #10
 80033b0:	4393      	bics	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b006      	add	sp, #24
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	2210      	movs	r2, #16
 80033e2:	4393      	bics	r3, r2
 80033e4:	001a      	movs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <TIM_TI2_ConfigInputStage+0x60>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	031b      	lsls	r3, r3, #12
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	22a0      	movs	r2, #160	; 0xa0
 800340c:	4393      	bics	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	621a      	str	r2, [r3, #32]
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b006      	add	sp, #24
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	ffff0fff 	.word	0xffff0fff

08003434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4a09      	ldr	r2, [pc, #36]	; (8003470 <TIM_ETR_SetConfig+0x3c>)
 800344c:	4013      	ands	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	021a      	lsls	r2, r3, #8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	431a      	orrs	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	609a      	str	r2, [r3, #8]
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b006      	add	sp, #24
 800346e:	bd80      	pop	{r7, pc}
 8003470:	ffff00ff 	.word	0xffff00ff

08003474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	223c      	movs	r2, #60	; 0x3c
 8003482:	5c9b      	ldrb	r3, [r3, r2]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003488:	2302      	movs	r3, #2
 800348a:	e042      	b.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	223c      	movs	r2, #60	; 0x3c
 8003490:	2101      	movs	r1, #1
 8003492:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	223d      	movs	r2, #61	; 0x3d
 8003498:	2102      	movs	r1, #2
 800349a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2270      	movs	r2, #112	; 0x70
 80034b0:	4393      	bics	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00a      	beq.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	05db      	lsls	r3, r3, #23
 80034d8:	429a      	cmp	r2, r3
 80034da:	d004      	beq.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10c      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2280      	movs	r2, #128	; 0x80
 80034ea:	4393      	bics	r3, r2
 80034ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	223d      	movs	r2, #61	; 0x3d
 8003504:	2101      	movs	r1, #1
 8003506:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	223c      	movs	r2, #60	; 0x3c
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b004      	add	sp, #16
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40000400 	.word	0x40000400

08003524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e044      	b.n	80035c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353a:	2b00      	cmp	r3, #0
 800353c:	d107      	bne.n	800354e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2270      	movs	r2, #112	; 0x70
 8003542:	2100      	movs	r1, #0
 8003544:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f7fd fd71 	bl	8001030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2224      	movs	r2, #36	; 0x24
 8003552:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	438a      	bics	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 fab6 	bl	8003ad8 <UART_SetConfig>
 800356c:	0003      	movs	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e024      	b.n	80035c0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 fc17 	bl	8003db4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	490d      	ldr	r1, [pc, #52]	; (80035c8 <HAL_UART_Init+0xa4>)
 8003592:	400a      	ands	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	212a      	movs	r1, #42	; 0x2a
 80035a2:	438a      	bics	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f000 fcaf 	bl	8003f1c <UART_CheckIdleState>
 80035be:	0003      	movs	r3, r0
}
 80035c0:	0018      	movs	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	ffffb7ff 	.word	0xffffb7ff

080035cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	1dbb      	adds	r3, r7, #6
 80035d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d000      	beq.n	80035e4 <HAL_UART_Transmit_DMA+0x18>
 80035e2:	e077      	b.n	80036d4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_UART_Transmit_DMA+0x26>
 80035ea:	1dbb      	adds	r3, r7, #6
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e06f      	b.n	80036d6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	015b      	lsls	r3, r3, #5
 80035fe:	429a      	cmp	r2, r3
 8003600:	d109      	bne.n	8003616 <HAL_UART_Transmit_DMA+0x4a>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2201      	movs	r2, #1
 800360e:	4013      	ands	r3, r2
 8003610:	d001      	beq.n	8003616 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e05f      	b.n	80036d6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    __HAL_LOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2270      	movs	r2, #112	; 0x70
 800361a:	5c9b      	ldrb	r3, [r3, r2]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_UART_Transmit_DMA+0x58>
 8003620:	2302      	movs	r3, #2
 8003622:	e058      	b.n	80036d6 <HAL_UART_Transmit_DMA+0x10a>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2270      	movs	r2, #112	; 0x70
 8003628:	2101      	movs	r1, #1
 800362a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1dba      	adds	r2, r7, #6
 8003636:	2150      	movs	r1, #80	; 0x50
 8003638:	8812      	ldrh	r2, [r2, #0]
 800363a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1dba      	adds	r2, r7, #6
 8003640:	2152      	movs	r1, #82	; 0x52
 8003642:	8812      	ldrh	r2, [r2, #0]
 8003644:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2221      	movs	r2, #33	; 0x21
 8003650:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02a      	beq.n	80036b0 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800365e:	4a20      	ldr	r2, [pc, #128]	; (80036e0 <HAL_UART_Transmit_DMA+0x114>)
 8003660:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003666:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_UART_Transmit_DMA+0x118>)
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800366e:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <HAL_UART_Transmit_DMA+0x11c>)
 8003670:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	0019      	movs	r1, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3328      	adds	r3, #40	; 0x28
 800368a:	001a      	movs	r2, r3
 800368c:	1dbb      	adds	r3, r7, #6
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	f7fe fb2a 	bl	8001ce8 <HAL_DMA_Start_IT>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2210      	movs	r2, #16
 800369c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2270      	movs	r2, #112	; 0x70
 80036a2:	2100      	movs	r1, #0
 80036a4:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e012      	b.n	80036d6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2270      	movs	r2, #112	; 0x70
 80036bc:	2100      	movs	r1, #0
 80036be:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2180      	movs	r1, #128	; 0x80
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	0800410d 	.word	0x0800410d
 80036e4:	0800415d 	.word	0x0800415d
 80036e8:	08004203 	.word	0x08004203

080036ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	1dbb      	adds	r3, r7, #6
 80036f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d000      	beq.n	8003704 <HAL_UART_Receive_DMA+0x18>
 8003702:	e07f      	b.n	8003804 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_UART_Receive_DMA+0x26>
 800370a:	1dbb      	adds	r3, r7, #6
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e077      	b.n	8003806 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	015b      	lsls	r3, r3, #5
 800371e:	429a      	cmp	r2, r3
 8003720:	d109      	bne.n	8003736 <HAL_UART_Receive_DMA+0x4a>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2201      	movs	r2, #1
 800372e:	4013      	ands	r3, r2
 8003730:	d001      	beq.n	8003736 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e067      	b.n	8003806 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2270      	movs	r2, #112	; 0x70
 800373a:	5c9b      	ldrb	r3, [r3, r2]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_UART_Receive_DMA+0x58>
 8003740:	2302      	movs	r3, #2
 8003742:	e060      	b.n	8003806 <HAL_UART_Receive_DMA+0x11a>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2270      	movs	r2, #112	; 0x70
 8003748:	2101      	movs	r1, #1
 800374a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1dba      	adds	r2, r7, #6
 8003756:	2158      	movs	r1, #88	; 0x58
 8003758:	8812      	ldrh	r2, [r2, #0]
 800375a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2222      	movs	r2, #34	; 0x22
 8003766:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02a      	beq.n	80037c6 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003774:	4a26      	ldr	r2, [pc, #152]	; (8003810 <HAL_UART_Receive_DMA+0x124>)
 8003776:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <HAL_UART_Receive_DMA+0x128>)
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <HAL_UART_Receive_DMA+0x12c>)
 8003786:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378c:	2200      	movs	r2, #0
 800378e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3324      	adds	r3, #36	; 0x24
 800379a:	0019      	movs	r1, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	001a      	movs	r2, r3
 80037a2:	1dbb      	adds	r3, r7, #6
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	f7fe fa9f 	bl	8001ce8 <HAL_DMA_Start_IT>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2210      	movs	r2, #16
 80037b2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2270      	movs	r2, #112	; 0x70
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e01f      	b.n	8003806 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2270      	movs	r2, #112	; 0x70
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	0049      	lsls	r1, r1, #1
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2101      	movs	r1, #1
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e000      	b.n	8003806 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003804:	2302      	movs	r3, #2
  }
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	0800417d 	.word	0x0800417d
 8003814:	080041e5 	.word	0x080041e5
 8003818:	08004203 	.word	0x08004203

0800381c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4a93      	ldr	r2, [pc, #588]	; (8003a8c <HAL_UART_IRQHandler+0x270>)
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d112      	bne.n	8003870 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2220      	movs	r2, #32
 800384e:	4013      	ands	r3, r2
 8003850:	d00e      	beq.n	8003870 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2220      	movs	r2, #32
 8003856:	4013      	ands	r3, r2
 8003858:	d00a      	beq.n	8003870 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385e:	2b00      	cmp	r3, #0
 8003860:	d100      	bne.n	8003864 <HAL_UART_IRQHandler+0x48>
 8003862:	e10b      	b.n	8003a7c <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	0010      	movs	r0, r2
 800386c:	4798      	blx	r3
      }
      return;
 800386e:	e105      	b.n	8003a7c <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d100      	bne.n	8003878 <HAL_UART_IRQHandler+0x5c>
 8003876:	e0cd      	b.n	8003a14 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2201      	movs	r2, #1
 800387c:	4013      	ands	r3, r2
 800387e:	d105      	bne.n	800388c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	2390      	movs	r3, #144	; 0x90
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4013      	ands	r3, r2
 8003888:	d100      	bne.n	800388c <HAL_UART_IRQHandler+0x70>
 800388a:	e0c3      	b.n	8003a14 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2201      	movs	r2, #1
 8003890:	4013      	ands	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_UART_IRQHandler+0x96>
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4013      	ands	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038aa:	2201      	movs	r2, #1
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	2202      	movs	r2, #2
 80038b6:	4013      	ands	r3, r2
 80038b8:	d00d      	beq.n	80038d6 <HAL_UART_IRQHandler+0xba>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2201      	movs	r2, #1
 80038be:	4013      	ands	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ce:	2204      	movs	r2, #4
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	2204      	movs	r2, #4
 80038da:	4013      	ands	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_UART_IRQHandler+0xde>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2201      	movs	r2, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2204      	movs	r2, #4
 80038ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f2:	2202      	movs	r2, #2
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2208      	movs	r2, #8
 80038fe:	4013      	ands	r3, r2
 8003900:	d011      	beq.n	8003926 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2220      	movs	r2, #32
 8003906:	4013      	ands	r3, r2
 8003908:	d103      	bne.n	8003912 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2201      	movs	r2, #1
 800390e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003910:	d009      	beq.n	8003926 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2208      	movs	r2, #8
 8003918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391e:	2208      	movs	r2, #8
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	4013      	ands	r3, r2
 800392e:	d00f      	beq.n	8003950 <HAL_UART_IRQHandler+0x134>
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	04db      	lsls	r3, r3, #19
 8003936:	4013      	ands	r3, r2
 8003938:	d00a      	beq.n	8003950 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	0112      	lsls	r2, r2, #4
 8003942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003948:	2220      	movs	r2, #32
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d100      	bne.n	800395a <HAL_UART_IRQHandler+0x13e>
 8003958:	e092      	b.n	8003a80 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2220      	movs	r2, #32
 800395e:	4013      	ands	r3, r2
 8003960:	d00c      	beq.n	800397c <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2220      	movs	r2, #32
 8003966:	4013      	ands	r3, r2
 8003968:	d008      	beq.n	800397c <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	0010      	movs	r0, r2
 800397a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003980:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2240      	movs	r2, #64	; 0x40
 800398a:	4013      	ands	r3, r2
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d003      	beq.n	8003998 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2228      	movs	r2, #40	; 0x28
 8003994:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003996:	d033      	beq.n	8003a00 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 fb96 	bl	80040cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2240      	movs	r2, #64	; 0x40
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d123      	bne.n	80039f6 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	438a      	bics	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d012      	beq.n	80039ec <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ca:	4a31      	ldr	r2, [pc, #196]	; (8003a90 <HAL_UART_IRQHandler+0x274>)
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fe f9ee 	bl	8001db4 <HAL_DMA_Abort_IT>
 80039d8:	1e03      	subs	r3, r0, #0
 80039da:	d019      	beq.n	8003a10 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e6:	0018      	movs	r0, r3
 80039e8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ea:	e011      	b.n	8003a10 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fd fa50 	bl	8000e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f4:	e00c      	b.n	8003a10 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7fd fa4b 	bl	8000e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fe:	e007      	b.n	8003a10 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7fd fa46 	bl	8000e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003a0e:	e037      	b.n	8003a80 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	46c0      	nop			; (mov r8, r8)
    return;
 8003a12:	e035      	b.n	8003a80 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	035b      	lsls	r3, r3, #13
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_UART_IRQHandler+0x220>
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	03db      	lsls	r3, r3, #15
 8003a24:	4013      	ands	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	0352      	lsls	r2, r2, #13
 8003a30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0018      	movs	r0, r3
 8003a36:	f000 fc54 	bl	80042e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a3a:	e024      	b.n	8003a86 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	4013      	ands	r3, r2
 8003a42:	d00d      	beq.n	8003a60 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d017      	beq.n	8003a84 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	0010      	movs	r0, r2
 8003a5c:	4798      	blx	r3
    }
    return;
 8003a5e:	e011      	b.n	8003a84 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <HAL_UART_IRQHandler+0x26a>
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2240      	movs	r2, #64	; 0x40
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d00a      	beq.n	8003a86 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fc1b 	bl	80042ae <UART_EndTransmit_IT>
    return;
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	e004      	b.n	8003a86 <HAL_UART_IRQHandler+0x26a>
      return;
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	e002      	b.n	8003a86 <HAL_UART_IRQHandler+0x26a>
    return;
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	e000      	b.n	8003a86 <HAL_UART_IRQHandler+0x26a>
    return;
 8003a84:	46c0      	nop			; (mov r8, r8)
  }

}
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b008      	add	sp, #32
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	0000080f 	.word	0x0000080f
 8003a90:	08004281 	.word	0x08004281

08003a94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b004      	add	sp, #16
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae4:	2317      	movs	r3, #23
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4aa3      	ldr	r2, [pc, #652]	; (8003d98 <UART_SetConfig+0x2c0>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	0019      	movs	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a9e      	ldr	r2, [pc, #632]	; (8003d9c <UART_SetConfig+0x2c4>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a95      	ldr	r2, [pc, #596]	; (8003da0 <UART_SetConfig+0x2c8>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b58:	4b92      	ldr	r3, [pc, #584]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d00f      	beq.n	8003b84 <UART_SetConfig+0xac>
 8003b64:	d304      	bcc.n	8003b70 <UART_SetConfig+0x98>
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d011      	beq.n	8003b8e <UART_SetConfig+0xb6>
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d005      	beq.n	8003b7a <UART_SetConfig+0xa2>
 8003b6e:	e013      	b.n	8003b98 <UART_SetConfig+0xc0>
 8003b70:	231f      	movs	r3, #31
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e012      	b.n	8003ba0 <UART_SetConfig+0xc8>
 8003b7a:	231f      	movs	r3, #31
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2202      	movs	r2, #2
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e00d      	b.n	8003ba0 <UART_SetConfig+0xc8>
 8003b84:	231f      	movs	r3, #31
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	2204      	movs	r2, #4
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	e008      	b.n	8003ba0 <UART_SetConfig+0xc8>
 8003b8e:	231f      	movs	r3, #31
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	2208      	movs	r2, #8
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e003      	b.n	8003ba0 <UART_SetConfig+0xc8>
 8003b98:	231f      	movs	r3, #31
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d000      	beq.n	8003bb0 <UART_SetConfig+0xd8>
 8003bae:	e07d      	b.n	8003cac <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8003bb0:	231f      	movs	r3, #31
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d01c      	beq.n	8003bf4 <UART_SetConfig+0x11c>
 8003bba:	dc02      	bgt.n	8003bc2 <UART_SetConfig+0xea>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <UART_SetConfig+0xf4>
 8003bc0:	e04b      	b.n	8003c5a <UART_SetConfig+0x182>
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d025      	beq.n	8003c12 <UART_SetConfig+0x13a>
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d037      	beq.n	8003c3a <UART_SetConfig+0x162>
 8003bca:	e046      	b.n	8003c5a <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f7ff f982 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	005a      	lsls	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	18d2      	adds	r2, r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	0019      	movs	r1, r3
 8003be6:	0010      	movs	r0, r2
 8003be8:	f7fc fa8e 	bl	8000108 <__udivsi3>
 8003bec:	0003      	movs	r3, r0
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	61bb      	str	r3, [r7, #24]
        break;
 8003bf2:	e037      	b.n	8003c64 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	4a6b      	ldr	r2, [pc, #428]	; (8003da8 <UART_SetConfig+0x2d0>)
 8003bfc:	189a      	adds	r2, r3, r2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	0019      	movs	r1, r3
 8003c04:	0010      	movs	r0, r2
 8003c06:	f7fc fa7f 	bl	8000108 <__udivsi3>
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	61bb      	str	r3, [r7, #24]
        break;
 8003c10:	e028      	b.n	8003c64 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c12:	f7ff f8f1 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8003c16:	0003      	movs	r3, r0
 8003c18:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	005a      	lsls	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	18d2      	adds	r2, r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	0010      	movs	r0, r2
 8003c2e:	f7fc fa6b 	bl	8000108 <__udivsi3>
 8003c32:	0003      	movs	r3, r0
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	61bb      	str	r3, [r7, #24]
        break;
 8003c38:	e014      	b.n	8003c64 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	2280      	movs	r2, #128	; 0x80
 8003c42:	0252      	lsls	r2, r2, #9
 8003c44:	189a      	adds	r2, r3, r2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	0010      	movs	r0, r2
 8003c4e:	f7fc fa5b 	bl	8000108 <__udivsi3>
 8003c52:	0003      	movs	r3, r0
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	61bb      	str	r3, [r7, #24]
        break;
 8003c58:	e004      	b.n	8003c64 <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 8003c5a:	2317      	movs	r3, #23
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
        break;
 8003c62:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d91b      	bls.n	8003ca2 <UART_SetConfig+0x1ca>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4a4f      	ldr	r2, [pc, #316]	; (8003dac <UART_SetConfig+0x2d4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d817      	bhi.n	8003ca2 <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	200a      	movs	r0, #10
 8003c78:	183b      	adds	r3, r7, r0
 8003c7a:	210f      	movs	r1, #15
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2207      	movs	r2, #7
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b299      	uxth	r1, r3
 8003c8c:	183b      	adds	r3, r7, r0
 8003c8e:	183a      	adds	r2, r7, r0
 8003c90:	8812      	ldrh	r2, [r2, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	183a      	adds	r2, r7, r0
 8003c9c:	8812      	ldrh	r2, [r2, #0]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	e06c      	b.n	8003d7c <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8003ca2:	2317      	movs	r3, #23
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	e067      	b.n	8003d7c <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 8003cac:	231f      	movs	r3, #31
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d01b      	beq.n	8003cee <UART_SetConfig+0x216>
 8003cb6:	dc02      	bgt.n	8003cbe <UART_SetConfig+0x1e6>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <UART_SetConfig+0x1f0>
 8003cbc:	e049      	b.n	8003d52 <UART_SetConfig+0x27a>
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d024      	beq.n	8003d0c <UART_SetConfig+0x234>
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d035      	beq.n	8003d32 <UART_SetConfig+0x25a>
 8003cc6:	e044      	b.n	8003d52 <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc8:	f7ff f904 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	085a      	lsrs	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	18d2      	adds	r2, r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	0019      	movs	r1, r3
 8003ce0:	0010      	movs	r0, r2
 8003ce2:	f7fc fa11 	bl	8000108 <__udivsi3>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	61bb      	str	r3, [r7, #24]
        break;
 8003cec:	e036      	b.n	8003d5c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	4a2e      	ldr	r2, [pc, #184]	; (8003db0 <UART_SetConfig+0x2d8>)
 8003cf6:	189a      	adds	r2, r3, r2
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	0010      	movs	r0, r2
 8003d00:	f7fc fa02 	bl	8000108 <__udivsi3>
 8003d04:	0003      	movs	r3, r0
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	61bb      	str	r3, [r7, #24]
        break;
 8003d0a:	e027      	b.n	8003d5c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0c:	f7ff f874 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8003d10:	0003      	movs	r3, r0
 8003d12:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	085a      	lsrs	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	18d2      	adds	r2, r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	0019      	movs	r1, r3
 8003d24:	0010      	movs	r0, r2
 8003d26:	f7fc f9ef 	bl	8000108 <__udivsi3>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	61bb      	str	r3, [r7, #24]
        break;
 8003d30:	e014      	b.n	8003d5c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	2280      	movs	r2, #128	; 0x80
 8003d3a:	0212      	lsls	r2, r2, #8
 8003d3c:	189a      	adds	r2, r3, r2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	0019      	movs	r1, r3
 8003d44:	0010      	movs	r0, r2
 8003d46:	f7fc f9df 	bl	8000108 <__udivsi3>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	61bb      	str	r3, [r7, #24]
        break;
 8003d50:	e004      	b.n	8003d5c <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 8003d52:	2317      	movs	r3, #23
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
        break;
 8003d5a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	d908      	bls.n	8003d74 <UART_SetConfig+0x29c>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	4a11      	ldr	r2, [pc, #68]	; (8003dac <UART_SetConfig+0x2d4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d804      	bhi.n	8003d74 <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	e003      	b.n	8003d7c <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8003d74:	2317      	movs	r3, #23
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	2201      	movs	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d88:	2317      	movs	r3, #23
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	781b      	ldrb	r3, [r3, #0]
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b008      	add	sp, #32
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	ffff69f3 	.word	0xffff69f3
 8003d9c:	ffffcfff 	.word	0xffffcfff
 8003da0:	fffff4ff 	.word	0xfffff4ff
 8003da4:	40021000 	.word	0x40021000
 8003da8:	00f42400 	.word	0x00f42400
 8003dac:	0000ffff 	.word	0x0000ffff
 8003db0:	007a1200 	.word	0x007a1200

08003db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d00b      	beq.n	8003dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a4a      	ldr	r2, [pc, #296]	; (8003ef8 <UART_AdvFeatureConfig+0x144>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2202      	movs	r2, #2
 8003de4:	4013      	ands	r3, r2
 8003de6:	d00b      	beq.n	8003e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4a43      	ldr	r2, [pc, #268]	; (8003efc <UART_AdvFeatureConfig+0x148>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	0019      	movs	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	2204      	movs	r2, #4
 8003e06:	4013      	ands	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a3b      	ldr	r2, [pc, #236]	; (8003f00 <UART_AdvFeatureConfig+0x14c>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	0019      	movs	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2208      	movs	r2, #8
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d00b      	beq.n	8003e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4a34      	ldr	r2, [pc, #208]	; (8003f04 <UART_AdvFeatureConfig+0x150>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	2210      	movs	r2, #16
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d00b      	beq.n	8003e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a2c      	ldr	r2, [pc, #176]	; (8003f08 <UART_AdvFeatureConfig+0x154>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d00b      	beq.n	8003e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <UART_AdvFeatureConfig+0x158>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	2240      	movs	r2, #64	; 0x40
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d01d      	beq.n	8003ece <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <UART_AdvFeatureConfig+0x15c>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	0019      	movs	r1, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	035b      	lsls	r3, r3, #13
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d10b      	bne.n	8003ece <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <UART_AdvFeatureConfig+0x160>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4a0e      	ldr	r2, [pc, #56]	; (8003f18 <UART_AdvFeatureConfig+0x164>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	fffdffff 	.word	0xfffdffff
 8003efc:	fffeffff 	.word	0xfffeffff
 8003f00:	fffbffff 	.word	0xfffbffff
 8003f04:	ffff7fff 	.word	0xffff7fff
 8003f08:	ffffefff 	.word	0xffffefff
 8003f0c:	ffffdfff 	.word	0xffffdfff
 8003f10:	ffefffff 	.word	0xffefffff
 8003f14:	ff9fffff 	.word	0xff9fffff
 8003f18:	fff7ffff 	.word	0xfff7ffff

08003f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f2a:	f7fd fc2f 	bl	800178c <HAL_GetTick>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2208      	movs	r2, #8
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d10d      	bne.n	8003f5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	0399      	lsls	r1, r3, #14
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <UART_CheckIdleState+0x88>)
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	0013      	movs	r3, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f000 f82a 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003f54:	1e03      	subs	r3, r0, #0
 8003f56:	d001      	beq.n	8003f5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e01f      	b.n	8003f9c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2204      	movs	r2, #4
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d10d      	bne.n	8003f86 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	03d9      	lsls	r1, r3, #15
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <UART_CheckIdleState+0x88>)
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	0013      	movs	r3, r2
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f000 f815 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d001      	beq.n	8003f86 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e00a      	b.n	8003f9c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2270      	movs	r2, #112	; 0x70
 8003f96:	2100      	movs	r1, #0
 8003f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	01ffffff 	.word	0x01ffffff

08003fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	e05d      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	d05a      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc0:	f7fd fbe4 	bl	800178c <HAL_GetTick>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d11b      	bne.n	800400e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	492f      	ldr	r1, [pc, #188]	; (80040a0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	438a      	bics	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2270      	movs	r2, #112	; 0x70
 8004006:	2100      	movs	r1, #0
 8004008:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e043      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2204      	movs	r2, #4
 8004016:	4013      	ands	r3, r2
 8004018:	d02d      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	401a      	ands	r2, r3
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	429a      	cmp	r2, r3
 800402c:	d123      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	0112      	lsls	r2, r2, #4
 8004036:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4917      	ldr	r1, [pc, #92]	; (80040a0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004044:	400a      	ands	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	438a      	bics	r2, r1
 8004056:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2270      	movs	r2, #112	; 0x70
 800406e:	2100      	movs	r1, #0
 8004070:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00f      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	425a      	negs	r2, r3
 8004086:	4153      	adcs	r3, r2
 8004088:	b2db      	uxtb	r3, r3
 800408a:	001a      	movs	r2, r3
 800408c:	1dfb      	adds	r3, r7, #7
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d092      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	fffffe5f 	.word	0xfffffe5f

080040a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	21c0      	movs	r1, #192	; 0xc0
 80040b8:	438a      	bics	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b002      	add	sp, #8
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	490a      	ldr	r1, [pc, #40]	; (8004108 <UART_EndRxTransfer+0x3c>)
 80040e0:	400a      	ands	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2101      	movs	r1, #1
 80040f0:	438a      	bics	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}
 8004108:	fffffedf 	.word	0xfffffedf

0800410c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b20      	cmp	r3, #32
 8004120:	d014      	beq.n	800414c <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2252      	movs	r2, #82	; 0x52
 8004126:	2100      	movs	r1, #0
 8004128:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2180      	movs	r1, #128	; 0x80
 8004136:	438a      	bics	r2, r1
 8004138:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2140      	movs	r1, #64	; 0x40
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800414a:	e003      	b.n	8004154 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	0018      	movs	r0, r3
 8004150:	f7fc fe90 	bl	8000e74 <HAL_UART_TxCpltCallback>
}
 8004154:	46c0      	nop			; (mov r8, r8)
 8004156:	46bd      	mov	sp, r7
 8004158:	b004      	add	sp, #16
 800415a:	bd80      	pop	{r7, pc}

0800415c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	0018      	movs	r0, r3
 800416e:	f7ff fc91 	bl	8003a94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b004      	add	sp, #16
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b20      	cmp	r3, #32
 8004190:	d01e      	beq.n	80041d0 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	225a      	movs	r2, #90	; 0x5a
 8004196:	2100      	movs	r1, #0
 8004198:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	490e      	ldr	r1, [pc, #56]	; (80041e0 <UART_DMAReceiveCplt+0x64>)
 80041a6:	400a      	ands	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2101      	movs	r1, #1
 80041b6:	438a      	bics	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2140      	movs	r1, #64	; 0x40
 80041c6:	438a      	bics	r2, r1
 80041c8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7fc fe56 	bl	8000e84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b004      	add	sp, #16
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	fffffeff 	.word	0xfffffeff

080041e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7ff fc55 	bl	8003aa4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b004      	add	sp, #16
 8004200:	bd80      	pop	{r7, pc}

08004202 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004214:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2280      	movs	r2, #128	; 0x80
 8004224:	4013      	ands	r3, r2
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d10a      	bne.n	8004240 <UART_DMAError+0x3e>
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b21      	cmp	r3, #33	; 0x21
 800422e:	d107      	bne.n	8004240 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2252      	movs	r2, #82	; 0x52
 8004234:	2100      	movs	r1, #0
 8004236:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff ff32 	bl	80040a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2240      	movs	r2, #64	; 0x40
 8004248:	4013      	ands	r3, r2
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d10a      	bne.n	8004264 <UART_DMAError+0x62>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b22      	cmp	r3, #34	; 0x22
 8004252:	d107      	bne.n	8004264 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	225a      	movs	r2, #90	; 0x5a
 8004258:	2100      	movs	r1, #0
 800425a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff ff34 	bl	80040cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004268:	2210      	movs	r2, #16
 800426a:	431a      	orrs	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	0018      	movs	r0, r3
 8004274:	f7fc fe0e 	bl	8000e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004278:	46c0      	nop			; (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b006      	add	sp, #24
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	225a      	movs	r2, #90	; 0x5a
 8004292:	2100      	movs	r1, #0
 8004294:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2252      	movs	r2, #82	; 0x52
 800429a:	2100      	movs	r1, #0
 800429c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fc fdf7 	bl	8000e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b004      	add	sp, #16
 80042ac:	bd80      	pop	{r7, pc}

080042ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	438a      	bics	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7fc fdcd 	bl	8000e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b002      	add	sp, #8
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b002      	add	sp, #8
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <__errno>:
 80042f4:	4b01      	ldr	r3, [pc, #4]	; (80042fc <__errno+0x8>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	4770      	bx	lr
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	2000000c 	.word	0x2000000c

08004300 <__libc_init_array>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	2600      	movs	r6, #0
 8004304:	4d0c      	ldr	r5, [pc, #48]	; (8004338 <__libc_init_array+0x38>)
 8004306:	4c0d      	ldr	r4, [pc, #52]	; (800433c <__libc_init_array+0x3c>)
 8004308:	1b64      	subs	r4, r4, r5
 800430a:	10a4      	asrs	r4, r4, #2
 800430c:	42a6      	cmp	r6, r4
 800430e:	d109      	bne.n	8004324 <__libc_init_array+0x24>
 8004310:	2600      	movs	r6, #0
 8004312:	f000 f89d 	bl	8004450 <_init>
 8004316:	4d0a      	ldr	r5, [pc, #40]	; (8004340 <__libc_init_array+0x40>)
 8004318:	4c0a      	ldr	r4, [pc, #40]	; (8004344 <__libc_init_array+0x44>)
 800431a:	1b64      	subs	r4, r4, r5
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	42a6      	cmp	r6, r4
 8004320:	d105      	bne.n	800432e <__libc_init_array+0x2e>
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	00b3      	lsls	r3, r6, #2
 8004326:	58eb      	ldr	r3, [r5, r3]
 8004328:	4798      	blx	r3
 800432a:	3601      	adds	r6, #1
 800432c:	e7ee      	b.n	800430c <__libc_init_array+0xc>
 800432e:	00b3      	lsls	r3, r6, #2
 8004330:	58eb      	ldr	r3, [r5, r3]
 8004332:	4798      	blx	r3
 8004334:	3601      	adds	r6, #1
 8004336:	e7f2      	b.n	800431e <__libc_init_array+0x1e>
 8004338:	08004520 	.word	0x08004520
 800433c:	08004520 	.word	0x08004520
 8004340:	08004520 	.word	0x08004520
 8004344:	08004524 	.word	0x08004524

08004348 <malloc>:
 8004348:	b510      	push	{r4, lr}
 800434a:	4b03      	ldr	r3, [pc, #12]	; (8004358 <malloc+0x10>)
 800434c:	0001      	movs	r1, r0
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	f000 f80c 	bl	800436c <_malloc_r>
 8004354:	bd10      	pop	{r4, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	2000000c 	.word	0x2000000c

0800435c <memset>:
 800435c:	0003      	movs	r3, r0
 800435e:	1812      	adds	r2, r2, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	d100      	bne.n	8004366 <memset+0xa>
 8004364:	4770      	bx	lr
 8004366:	7019      	strb	r1, [r3, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	e7f9      	b.n	8004360 <memset+0x4>

0800436c <_malloc_r>:
 800436c:	2303      	movs	r3, #3
 800436e:	b570      	push	{r4, r5, r6, lr}
 8004370:	1ccd      	adds	r5, r1, #3
 8004372:	439d      	bics	r5, r3
 8004374:	3508      	adds	r5, #8
 8004376:	0006      	movs	r6, r0
 8004378:	2d0c      	cmp	r5, #12
 800437a:	d21e      	bcs.n	80043ba <_malloc_r+0x4e>
 800437c:	250c      	movs	r5, #12
 800437e:	42a9      	cmp	r1, r5
 8004380:	d81d      	bhi.n	80043be <_malloc_r+0x52>
 8004382:	0030      	movs	r0, r6
 8004384:	f000 f862 	bl	800444c <__malloc_lock>
 8004388:	4a25      	ldr	r2, [pc, #148]	; (8004420 <_malloc_r+0xb4>)
 800438a:	6814      	ldr	r4, [r2, #0]
 800438c:	0021      	movs	r1, r4
 800438e:	2900      	cmp	r1, #0
 8004390:	d119      	bne.n	80043c6 <_malloc_r+0x5a>
 8004392:	4c24      	ldr	r4, [pc, #144]	; (8004424 <_malloc_r+0xb8>)
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <_malloc_r+0x36>
 800439a:	0030      	movs	r0, r6
 800439c:	f000 f844 	bl	8004428 <_sbrk_r>
 80043a0:	6020      	str	r0, [r4, #0]
 80043a2:	0029      	movs	r1, r5
 80043a4:	0030      	movs	r0, r6
 80043a6:	f000 f83f 	bl	8004428 <_sbrk_r>
 80043aa:	1c43      	adds	r3, r0, #1
 80043ac:	d12b      	bne.n	8004406 <_malloc_r+0x9a>
 80043ae:	230c      	movs	r3, #12
 80043b0:	0030      	movs	r0, r6
 80043b2:	6033      	str	r3, [r6, #0]
 80043b4:	f000 f84b 	bl	800444e <__malloc_unlock>
 80043b8:	e003      	b.n	80043c2 <_malloc_r+0x56>
 80043ba:	2d00      	cmp	r5, #0
 80043bc:	dadf      	bge.n	800437e <_malloc_r+0x12>
 80043be:	230c      	movs	r3, #12
 80043c0:	6033      	str	r3, [r6, #0]
 80043c2:	2000      	movs	r0, #0
 80043c4:	bd70      	pop	{r4, r5, r6, pc}
 80043c6:	680b      	ldr	r3, [r1, #0]
 80043c8:	1b5b      	subs	r3, r3, r5
 80043ca:	d419      	bmi.n	8004400 <_malloc_r+0x94>
 80043cc:	2b0b      	cmp	r3, #11
 80043ce:	d903      	bls.n	80043d8 <_malloc_r+0x6c>
 80043d0:	600b      	str	r3, [r1, #0]
 80043d2:	18cc      	adds	r4, r1, r3
 80043d4:	6025      	str	r5, [r4, #0]
 80043d6:	e003      	b.n	80043e0 <_malloc_r+0x74>
 80043d8:	684b      	ldr	r3, [r1, #4]
 80043da:	428c      	cmp	r4, r1
 80043dc:	d10d      	bne.n	80043fa <_malloc_r+0x8e>
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	0030      	movs	r0, r6
 80043e2:	f000 f834 	bl	800444e <__malloc_unlock>
 80043e6:	0020      	movs	r0, r4
 80043e8:	2207      	movs	r2, #7
 80043ea:	300b      	adds	r0, #11
 80043ec:	1d23      	adds	r3, r4, #4
 80043ee:	4390      	bics	r0, r2
 80043f0:	1ac3      	subs	r3, r0, r3
 80043f2:	d0e7      	beq.n	80043c4 <_malloc_r+0x58>
 80043f4:	425a      	negs	r2, r3
 80043f6:	50e2      	str	r2, [r4, r3]
 80043f8:	e7e4      	b.n	80043c4 <_malloc_r+0x58>
 80043fa:	6063      	str	r3, [r4, #4]
 80043fc:	000c      	movs	r4, r1
 80043fe:	e7ef      	b.n	80043e0 <_malloc_r+0x74>
 8004400:	000c      	movs	r4, r1
 8004402:	6849      	ldr	r1, [r1, #4]
 8004404:	e7c3      	b.n	800438e <_malloc_r+0x22>
 8004406:	2303      	movs	r3, #3
 8004408:	1cc4      	adds	r4, r0, #3
 800440a:	439c      	bics	r4, r3
 800440c:	42a0      	cmp	r0, r4
 800440e:	d0e1      	beq.n	80043d4 <_malloc_r+0x68>
 8004410:	1a21      	subs	r1, r4, r0
 8004412:	0030      	movs	r0, r6
 8004414:	f000 f808 	bl	8004428 <_sbrk_r>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d1db      	bne.n	80043d4 <_malloc_r+0x68>
 800441c:	e7c7      	b.n	80043ae <_malloc_r+0x42>
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	20000148 	.word	0x20000148
 8004424:	2000014c 	.word	0x2000014c

08004428 <_sbrk_r>:
 8004428:	2300      	movs	r3, #0
 800442a:	b570      	push	{r4, r5, r6, lr}
 800442c:	4c06      	ldr	r4, [pc, #24]	; (8004448 <_sbrk_r+0x20>)
 800442e:	0005      	movs	r5, r0
 8004430:	0008      	movs	r0, r1
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	f7fc feee 	bl	8001214 <_sbrk>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d103      	bne.n	8004444 <_sbrk_r+0x1c>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d000      	beq.n	8004444 <_sbrk_r+0x1c>
 8004442:	602b      	str	r3, [r5, #0]
 8004444:	bd70      	pop	{r4, r5, r6, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	2000032c 	.word	0x2000032c

0800444c <__malloc_lock>:
 800444c:	4770      	bx	lr

0800444e <__malloc_unlock>:
 800444e:	4770      	bx	lr

08004450 <_init>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr

0800445c <_fini>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr
