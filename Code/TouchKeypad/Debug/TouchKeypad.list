
TouchKeypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800261c  0800261c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800261c  0800261c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800261c  0800261c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800261c  0800261c  0001261c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002620  08002620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002630  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002630  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065e3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000125f  00000000  00000000  00026618  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  00027878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  00027f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012d97  00000000  00000000  00028580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005cc0  00000000  00000000  0003b317  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066bc4  00000000  00000000  00040fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a7b9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ab8  00000000  00000000  000a7c18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080025d8 	.word	0x080025d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080025d8 	.word	0x080025d8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbb4 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f832 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a4 	bl	80002a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f874 	bl	8000248 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 8000160:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000164:	f000 fc0c 	bl	8000980 <HAL_Delay>

    /* USER CODE BEGIN 3 */
	 //printf("while()\n");
	/* init MPR121 */

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016c:	4810      	ldr	r0, [pc, #64]	; (80001b0 <main+0x64>)
 800016e:	f000 fe7f 	bl	8000e70 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000176:	f000 fc03 	bl	8000980 <HAL_Delay>

	if(mpr121_init(&hi2c1)) {
 800017a:	480e      	ldr	r0, [pc, #56]	; (80001b4 <main+0x68>)
 800017c:	f000 f8f0 	bl	8000360 <mpr121_init>
 8000180:	4603      	mov	r3, r0
 8000182:	2b00      	cmp	r3, #0
 8000184:	d005      	beq.n	8000192 <main+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	480b      	ldr	r0, [pc, #44]	; (80001b8 <main+0x6c>)
 800018c:	f000 fe58 	bl	8000e40 <HAL_GPIO_WritePin>
 8000190:	e7ea      	b.n	8000168 <main+0x1c>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000192:	2201      	movs	r2, #1
 8000194:	2101      	movs	r1, #1
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <main+0x6c>)
 8000198:	f000 fe52 	bl	8000e40 <HAL_GPIO_WritePin>
		while(1)
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	4803      	ldr	r0, [pc, #12]	; (80001b0 <main+0x64>)
 80001a2:	f000 fe65 	bl	8000e70 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 80001a6:	20c8      	movs	r0, #200	; 0xc8
 80001a8:	f000 fbea 	bl	8000980 <HAL_Delay>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001ac:	e7f6      	b.n	800019c <main+0x50>
 80001ae:	bf00      	nop
 80001b0:	40011000 	.word	0x40011000
 80001b4:	20000028 	.word	0x20000028
 80001b8:	40010800 	.word	0x40010800

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	; 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 f9fc 	bl	80025c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001de:	2301      	movs	r3, #1
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f0:	2302      	movs	r3, #2
 80001f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	4618      	mov	r0, r3
 8000206:	f001 fdb3 	bl	8001d70 <HAL_RCC_OscConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000210:	f000 f8a0 	bl	8000354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000218:	2302      	movs	r3, #2
 800021a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2101      	movs	r1, #1
 800022e:	4618      	mov	r0, r3
 8000230:	f002 f81e 	bl	8002270 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800023a:	f000 f88b 	bl	8000354 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	; 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <MX_I2C1_Init+0x50>)
 800024e:	4a13      	ldr	r2, [pc, #76]	; (800029c <MX_I2C1_Init+0x54>)
 8000250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <MX_I2C1_Init+0x50>)
 8000254:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <MX_I2C1_Init+0x58>)
 8000256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000258:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_I2C1_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <MX_I2C1_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <MX_I2C1_Init+0x50>)
 8000266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800026a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <MX_I2C1_Init+0x50>)
 800027a:	2200      	movs	r2, #0
 800027c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <MX_I2C1_Init+0x50>)
 8000280:	2200      	movs	r2, #0
 8000282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <MX_I2C1_Init+0x50>)
 8000286:	f000 fe0b 	bl	8000ea0 <HAL_I2C_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000290:	f000 f860 	bl	8000354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000028 	.word	0x20000028
 800029c:	40005400 	.word	0x40005400
 80002a0:	000186a0 	.word	0x000186a0

080002a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	f107 0310 	add.w	r3, r7, #16
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b8:	4b24      	ldr	r3, [pc, #144]	; (800034c <MX_GPIO_Init+0xa8>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a23      	ldr	r2, [pc, #140]	; (800034c <MX_GPIO_Init+0xa8>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b21      	ldr	r3, [pc, #132]	; (800034c <MX_GPIO_Init+0xa8>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d0:	4b1e      	ldr	r3, [pc, #120]	; (800034c <MX_GPIO_Init+0xa8>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a1d      	ldr	r2, [pc, #116]	; (800034c <MX_GPIO_Init+0xa8>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_GPIO_Init+0xa8>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0320 	and.w	r3, r3, #32
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <MX_GPIO_Init+0xa8>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <MX_GPIO_Init+0xa8>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_GPIO_Init+0xa8>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_GPIO_Init+0xa8>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a11      	ldr	r2, [pc, #68]	; (800034c <MX_GPIO_Init+0xa8>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_GPIO_Init+0xa8>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0308 	and.w	r3, r3, #8
 8000314:	603b      	str	r3, [r7, #0]
 8000316:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031e:	480c      	ldr	r0, [pc, #48]	; (8000350 <MX_GPIO_Init+0xac>)
 8000320:	f000 fd8e 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2302      	movs	r3, #2
 8000334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_GPIO_Init+0xac>)
 800033e:	f000 fc25 	bl	8000b8c <HAL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3720      	adds	r7, #32
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	40011000 	.word	0x40011000

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <mpr121_init>:
}


/* MPR121 init */
bool mpr121_init(I2C_HandleTypeDef* hi2c)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	bool success;
	uint8_t electrodes_count;
  	uint8_t reg_value = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	733b      	strb	r3, [r7, #12]

	success = true;
 800036c:	2301      	movs	r3, #1
 800036e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8000370:	2300      	movs	r3, #0
 8000372:	737b      	strb	r3, [r7, #13]

	/* init port pins */
	pins_init();
 8000374:	f000 f9a7 	bl	80006c6 <pins_init>
	/* init I2C interface */
	i2c_init();
 8000378:	f000 f99f 	bl	80006ba <i2c_init>

	/* soft reset */
	status = write_register(hi2c, SRST, 0x63);
 800037c:	2263      	movs	r2, #99	; 0x63
 800037e:	2180      	movs	r1, #128	; 0x80
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f000 f93b 	bl	80005fc <write_register>
 8000386:	4603      	mov	r3, r0
 8000388:	737b      	strb	r3, [r7, #13]
	{

	}

	/* read AFE Configuration 2 */
	status = read_register(hi2c, AFE2, &reg_value);
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	461a      	mov	r2, r3
 8000390:	215d      	movs	r1, #93	; 0x5d
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 f95a 	bl	800064c <read_register>
 8000398:	4603      	mov	r3, r0
 800039a:	737b      	strb	r3, [r7, #13]

	if(status == HAL_OK)
 800039c:	7b7b      	ldrb	r3, [r7, #13]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d102      	bne.n	80003a8 <mpr121_init+0x48>
	{
		success = true;
 80003a2:	2301      	movs	r3, #1
 80003a4:	73fb      	strb	r3, [r7, #15]
 80003a6:	e001      	b.n	80003ac <mpr121_init+0x4c>
	}else
	{
		success = false;
 80003a8:	2300      	movs	r3, #0
 80003aa:	73fb      	strb	r3, [r7, #15]
	}

	/* check default value */
	if (reg_value != 0x24) {
 80003ac:	7b3b      	ldrb	r3, [r7, #12]
 80003ae:	2b24      	cmp	r3, #36	; 0x24
 80003b0:	d002      	beq.n	80003b8 <mpr121_init+0x58>
		/* error */

		success = false;
 80003b2:	2300      	movs	r3, #0
 80003b4:	73fb      	strb	r3, [r7, #15]
 80003b6:	e001      	b.n	80003bc <mpr121_init+0x5c>
	} else {
		success = true;
 80003b8:	2301      	movs	r3, #1
 80003ba:	73fb      	strb	r3, [r7, #15]
		/* OK */
	}

	/* read Touch Status register */
	status = read_register(hi2c, TS2, &reg_value);
 80003bc:	f107 030c 	add.w	r3, r7, #12
 80003c0:	461a      	mov	r2, r3
 80003c2:	2101      	movs	r1, #1
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f000 f941 	bl	800064c <read_register>
 80003ca:	4603      	mov	r3, r0
 80003cc:	737b      	strb	r3, [r7, #13]
	/* check default value */
	if ((reg_value & 0x80) != 0) {
 80003ce:	7b3b      	ldrb	r3, [r7, #12]
 80003d0:	b25b      	sxtb	r3, r3
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	da01      	bge.n	80003da <mpr121_init+0x7a>
		/* error */
		success = false;
 80003d6:	2300      	movs	r3, #0
 80003d8:	73fb      	strb	r3, [r7, #15]
	} else {
		/* OK */
	}

	/* if no previous error */
	if (success == true)
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	f000 8108 	beq.w	80005f2 <mpr121_init+0x292>
	{
		/* turn off all electrodes to stop */
		status = write_register(hi2c, ECR, 0x00);
 80003e2:	2200      	movs	r2, #0
 80003e4:	215e      	movs	r1, #94	; 0x5e
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f000 f908 	bl	80005fc <write_register>
 80003ec:	4603      	mov	r3, r0
 80003ee:	737b      	strb	r3, [r7, #13]

		/* write register with initial values */
		status = write_register(hi2c, MHDR, 0x01);
 80003f0:	2201      	movs	r2, #1
 80003f2:	212b      	movs	r1, #43	; 0x2b
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 f901 	bl	80005fc <write_register>
 80003fa:	4603      	mov	r3, r0
 80003fc:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NHDR, 0x01);
 80003fe:	2201      	movs	r2, #1
 8000400:	212c      	movs	r1, #44	; 0x2c
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f000 f8fa 	bl	80005fc <write_register>
 8000408:	4603      	mov	r3, r0
 800040a:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NCLR, 0x10);
 800040c:	2210      	movs	r2, #16
 800040e:	212d      	movs	r1, #45	; 0x2d
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f000 f8f3 	bl	80005fc <write_register>
 8000416:	4603      	mov	r3, r0
 8000418:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, FDLR, 0x20);
 800041a:	2220      	movs	r2, #32
 800041c:	212e      	movs	r1, #46	; 0x2e
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f000 f8ec 	bl	80005fc <write_register>
 8000424:	4603      	mov	r3, r0
 8000426:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, MHDF, 0x01);
 8000428:	2201      	movs	r2, #1
 800042a:	212f      	movs	r1, #47	; 0x2f
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f000 f8e5 	bl	80005fc <write_register>
 8000432:	4603      	mov	r3, r0
 8000434:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NHDF, 0x01);
 8000436:	2201      	movs	r2, #1
 8000438:	2130      	movs	r1, #48	; 0x30
 800043a:	6878      	ldr	r0, [r7, #4]
 800043c:	f000 f8de 	bl	80005fc <write_register>
 8000440:	4603      	mov	r3, r0
 8000442:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NCLF, 0x10);
 8000444:	2210      	movs	r2, #16
 8000446:	2131      	movs	r1, #49	; 0x31
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f000 f8d7 	bl	80005fc <write_register>
 800044e:	4603      	mov	r3, r0
 8000450:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, FDLF, 0x20);
 8000452:	2220      	movs	r2, #32
 8000454:	2132      	movs	r1, #50	; 0x32
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 f8d0 	bl	80005fc <write_register>
 800045c:	4603      	mov	r3, r0
 800045e:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NHDT, 0x01);
 8000460:	2201      	movs	r2, #1
 8000462:	2133      	movs	r1, #51	; 0x33
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 f8c9 	bl	80005fc <write_register>
 800046a:	4603      	mov	r3, r0
 800046c:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NCLT, 0x10);
 800046e:	2210      	movs	r2, #16
 8000470:	2134      	movs	r1, #52	; 0x34
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 f8c2 	bl	80005fc <write_register>
 8000478:	4603      	mov	r3, r0
 800047a:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, FDLT, 0xFF);
 800047c:	22ff      	movs	r2, #255	; 0xff
 800047e:	2135      	movs	r1, #53	; 0x35
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f000 f8bb 	bl	80005fc <write_register>
 8000486:	4603      	mov	r3, r0
 8000488:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, MHDPROXR, 0x0F);
 800048a:	220f      	movs	r2, #15
 800048c:	2136      	movs	r1, #54	; 0x36
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f000 f8b4 	bl	80005fc <write_register>
 8000494:	4603      	mov	r3, r0
 8000496:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NHDPROXR, 0x0F);
 8000498:	220f      	movs	r2, #15
 800049a:	2137      	movs	r1, #55	; 0x37
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f000 f8ad 	bl	80005fc <write_register>
 80004a2:	4603      	mov	r3, r0
 80004a4:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NCLPROXR, 0x00);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2138      	movs	r1, #56	; 0x38
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f000 f8a6 	bl	80005fc <write_register>
 80004b0:	4603      	mov	r3, r0
 80004b2:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, FDLPROXR, 0x00);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2139      	movs	r1, #57	; 0x39
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f89f 	bl	80005fc <write_register>
 80004be:	4603      	mov	r3, r0
 80004c0:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, MHDPROXF, 0x01);
 80004c2:	2201      	movs	r2, #1
 80004c4:	213a      	movs	r1, #58	; 0x3a
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f000 f898 	bl	80005fc <write_register>
 80004cc:	4603      	mov	r3, r0
 80004ce:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NHDPROXF, 0x01);
 80004d0:	2201      	movs	r2, #1
 80004d2:	213b      	movs	r1, #59	; 0x3b
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f000 f891 	bl	80005fc <write_register>
 80004da:	4603      	mov	r3, r0
 80004dc:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NCLPROXF, 0xFF);
 80004de:	22ff      	movs	r2, #255	; 0xff
 80004e0:	213c      	movs	r1, #60	; 0x3c
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 f88a 	bl	80005fc <write_register>
 80004e8:	4603      	mov	r3, r0
 80004ea:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, FDLPROXF, 0xFF);
 80004ec:	22ff      	movs	r2, #255	; 0xff
 80004ee:	213d      	movs	r1, #61	; 0x3d
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f883 	bl	80005fc <write_register>
 80004f6:	4603      	mov	r3, r0
 80004f8:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NHDPROXT, 0x00);
 80004fa:	2200      	movs	r2, #0
 80004fc:	213e      	movs	r1, #62	; 0x3e
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 f87c 	bl	80005fc <write_register>
 8000504:	4603      	mov	r3, r0
 8000506:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, NCLPROXT, 0x00);
 8000508:	2200      	movs	r2, #0
 800050a:	213f      	movs	r1, #63	; 0x3f
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f875 	bl	80005fc <write_register>
 8000512:	4603      	mov	r3, r0
 8000514:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, FDLPROXT, 0x00);
 8000516:	2200      	movs	r2, #0
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 f86e 	bl	80005fc <write_register>
 8000520:	4603      	mov	r3, r0
 8000522:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, DTR, 0x11);
 8000524:	2211      	movs	r2, #17
 8000526:	215b      	movs	r1, #91	; 0x5b
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 f867 	bl	80005fc <write_register>
 800052e:	4603      	mov	r3, r0
 8000530:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, AFE1, 0xFF);
 8000532:	22ff      	movs	r2, #255	; 0xff
 8000534:	215c      	movs	r1, #92	; 0x5c
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f860 	bl	80005fc <write_register>
 800053c:	4603      	mov	r3, r0
 800053e:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, AFE2, 0x30);
 8000540:	2230      	movs	r2, #48	; 0x30
 8000542:	215d      	movs	r1, #93	; 0x5d
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f859 	bl	80005fc <write_register>
 800054a:	4603      	mov	r3, r0
 800054c:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, ACCR0, 0x00);
 800054e:	2200      	movs	r2, #0
 8000550:	217b      	movs	r1, #123	; 0x7b
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f000 f852 	bl	80005fc <write_register>
 8000558:	4603      	mov	r3, r0
 800055a:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, ACCR1, 0x00);
 800055c:	2200      	movs	r2, #0
 800055e:	217c      	movs	r1, #124	; 0x7c
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f84b 	bl	80005fc <write_register>
 8000566:	4603      	mov	r3, r0
 8000568:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, USL, 0x00);
 800056a:	2200      	movs	r2, #0
 800056c:	217d      	movs	r1, #125	; 0x7d
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f844 	bl	80005fc <write_register>
 8000574:	4603      	mov	r3, r0
 8000576:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, LSL, 0x00);
 8000578:	2200      	movs	r2, #0
 800057a:	217e      	movs	r1, #126	; 0x7e
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f83d 	bl	80005fc <write_register>
 8000582:	4603      	mov	r3, r0
 8000584:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, TL, 0x00);
 8000586:	2200      	movs	r2, #0
 8000588:	217f      	movs	r1, #127	; 0x7f
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f836 	bl	80005fc <write_register>
 8000590:	4603      	mov	r3, r0
 8000592:	737b      	strb	r3, [r7, #13]
		status = write_register(hi2c, ECR, 0xCC); // default to fast baseline startup and 12 electrodes enabled, no prox
 8000594:	22cc      	movs	r2, #204	; 0xcc
 8000596:	215e      	movs	r1, #94	; 0x5e
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 f82f 	bl	80005fc <write_register>
 800059e:	4603      	mov	r3, r0
 80005a0:	737b      	strb	r3, [r7, #13]
		{

		}

		/* apply next setting for all electrodes */
		for (electrodes_count = 0; electrodes_count < NUM_OF_ELECTRODES; electrodes_count++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	73bb      	strb	r3, [r7, #14]
 80005a6:	e01a      	b.n	80005de <mpr121_init+0x27e>
			status = write_register(hi2c, (E0TTH + (electrodes_count<<1)), 40);
 80005a8:	7bbb      	ldrb	r3, [r7, #14]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	3341      	adds	r3, #65	; 0x41
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2228      	movs	r2, #40	; 0x28
 80005b4:	4619      	mov	r1, r3
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f820 	bl	80005fc <write_register>
 80005bc:	4603      	mov	r3, r0
 80005be:	737b      	strb	r3, [r7, #13]
			status = write_register(hi2c, (E0RTH + (electrodes_count<<1)), 20);
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	3342      	adds	r3, #66	; 0x42
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2214      	movs	r2, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f814 	bl	80005fc <write_register>
 80005d4:	4603      	mov	r3, r0
 80005d6:	737b      	strb	r3, [r7, #13]
		for (electrodes_count = 0; electrodes_count < NUM_OF_ELECTRODES; electrodes_count++) {
 80005d8:	7bbb      	ldrb	r3, [r7, #14]
 80005da:	3301      	adds	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	2b0c      	cmp	r3, #12
 80005e2:	d9e1      	bls.n	80005a8 <mpr121_init+0x248>
		}

		/* enable electrodes and set the current to 16uA */
		status = write_register(hi2c, ECR, 0x10);
 80005e4:	2210      	movs	r2, #16
 80005e6:	215e      	movs	r1, #94	; 0x5e
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f807 	bl	80005fc <write_register>
 80005ee:	4603      	mov	r3, r0
 80005f0:	737b      	strb	r3, [r7, #13]
	else
	{
		/* init error */
	}

	return success;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <write_register>:

/* ---------------- Local functions ----------------- */

/* function to write a value to a register into the MPR121. Returned value is not used at the moment */
static HAL_StatusTypeDef write_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t value)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
 8000608:	4613      	mov	r3, r2
 800060a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]

	uint8_t data[2];

	data[0] = reg_addr;
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000614:	78bb      	ldrb	r3, [r7, #2]
 8000616:	737b      	strb	r3, [r7, #13]

	while (HAL_I2C_Master_Transmit(hi2c, (uint16_t) MPR121_ADDRESS_BYTE, data, 2, 100) != HAL_OK) {
 8000618:	e007      	b.n	800062a <write_register+0x2e>
		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f001 f894 	bl	8001748 <HAL_I2C_GetError>
 8000620:	4603      	mov	r3, r0
 8000622:	2b04      	cmp	r3, #4
 8000624:	d001      	beq.n	800062a <write_register+0x2e>
			status = HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_Master_Transmit(hi2c, (uint16_t) MPR121_ADDRESS_BYTE, data, 2, 100) != HAL_OK) {
 800062a:	f107 020c 	add.w	r2, r7, #12
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	215a      	movs	r1, #90	; 0x5a
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 fd5a 	bl	80010f0 <HAL_I2C_Master_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1eb      	bne.n	800061a <write_register+0x1e>
		}
	}

	return status;
 8000642:	7bfb      	ldrb	r3, [r7, #15]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <read_register>:

/* function to read a register value from the MPR121. Returned value is not used at the moment */
static HAL_StatusTypeDef read_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t *receive_buffer)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af02      	add	r7, sp, #8
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	460b      	mov	r3, r1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	75fb      	strb	r3, [r7, #23]

	while (HAL_I2C_Master_Transmit(hi2c, (uint16_t) MPR121_ADDRESS_BYTE, &reg_addr, 1, 100) != HAL_OK) {
 800065e:	e007      	b.n	8000670 <read_register+0x24>
		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f001 f871 	bl	8001748 <HAL_I2C_GetError>
 8000666:	4603      	mov	r3, r0
 8000668:	2b04      	cmp	r3, #4
 800066a:	d001      	beq.n	8000670 <read_register+0x24>
			status = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	75fb      	strb	r3, [r7, #23]
	while (HAL_I2C_Master_Transmit(hi2c, (uint16_t) MPR121_ADDRESS_BYTE, &reg_addr, 1, 100) != HAL_OK) {
 8000670:	f107 020b 	add.w	r2, r7, #11
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2301      	movs	r3, #1
 800067a:	215a      	movs	r1, #90	; 0x5a
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f000 fd37 	bl	80010f0 <HAL_I2C_Master_Transmit>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1eb      	bne.n	8000660 <read_register+0x14>
		}
	}

	/* Receieve data in the register */
	while (HAL_I2C_Master_Receive(hi2c, MPR121_ADDRESS_BYTE, receive_buffer, 1, 100) != HAL_OK) {
 8000688:	e007      	b.n	800069a <read_register+0x4e>

		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f001 f85c 	bl	8001748 <HAL_I2C_GetError>
 8000690:	4603      	mov	r3, r0
 8000692:	2b04      	cmp	r3, #4
 8000694:	d001      	beq.n	800069a <read_register+0x4e>
			status = HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	75fb      	strb	r3, [r7, #23]
	while (HAL_I2C_Master_Receive(hi2c, MPR121_ADDRESS_BYTE, receive_buffer, 1, 100) != HAL_OK) {
 800069a:	2364      	movs	r3, #100	; 0x64
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	215a      	movs	r1, #90	; 0x5a
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f000 fe21 	bl	80012ec <HAL_I2C_Master_Receive>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1ec      	bne.n	800068a <read_register+0x3e>
		}
	}

	return status;
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <i2c_init>:


/* I2C interface function */
static void i2c_init(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
//	i2c_set_ccr(I2C1, 20);
//	/* enable error event interrupt only */
//	i2c_enable_interrupt(I2C1, I2C_CR2_ITERREN);
//	/* enable I2C */
//	i2c_peripheral_enable(I2C1);
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <pins_init>:


/* port pins init function */
static void pins_init(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
//	/* Open Drain, Speed 100 MHz */
//	gpio_set_output_options(GPIOB, GPIO_OTYPE_OD, GPIO_OSPEED_100MHZ, GPIO6 | GPIO7);
//	/* Alternate Function: I2C1 */
//	gpio_set_af(GPIOB, GPIO_AF4,  GPIO6 | GPIO7);

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_MspInit+0x5c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <HAL_MspInit+0x5c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_MspInit+0x5c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x5c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x5c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x5c>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_MspInit+0x60>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <HAL_MspInit+0x60>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40021000 	.word	0x40021000
 8000734:	40010000 	.word	0x40010000

08000738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <HAL_I2C_MspInit+0x70>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d123      	bne.n	80007a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_I2C_MspInit+0x74>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <HAL_I2C_MspInit+0x74>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_I2C_MspInit+0x74>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000770:	23c0      	movs	r3, #192	; 0xc0
 8000772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000774:	2312      	movs	r3, #18
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <HAL_I2C_MspInit+0x78>)
 8000784:	f000 fa02 	bl	8000b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_I2C_MspInit+0x74>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_I2C_MspInit+0x74>)
 800078e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000792:	61d3      	str	r3, [r2, #28]
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_I2C_MspInit+0x74>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40005400 	.word	0x40005400
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010c00 	.word	0x40010c00

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <HardFault_Handler+0x4>

080007c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <MemManage_Handler+0x4>

080007cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <BusFault_Handler+0x4>

080007d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <UsageFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f8a2 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <SystemInit+0x5c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a14      	ldr	r2, [pc, #80]	; (8000864 <SystemInit+0x5c>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <SystemInit+0x5c>)
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	4911      	ldr	r1, [pc, #68]	; (8000864 <SystemInit+0x5c>)
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <SystemInit+0x60>)
 8000820:	4013      	ands	r3, r2
 8000822:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <SystemInit+0x5c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <SystemInit+0x5c>)
 800082a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800082e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000832:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <SystemInit+0x5c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <SystemInit+0x5c>)
 800083a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800083e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <SystemInit+0x5c>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <SystemInit+0x5c>)
 8000846:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800084a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <SystemInit+0x5c>)
 800084e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000852:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <SystemInit+0x64>)
 8000856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800085a:	609a      	str	r2, [r3, #8]
#endif 
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40021000 	.word	0x40021000
 8000868:	f8ff0000 	.word	0xf8ff0000
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000870:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000872:	e003      	b.n	800087c <LoopCopyDataInit>

08000874 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000876:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000878:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800087a:	3104      	adds	r1, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000880:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000882:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000884:	d3f6      	bcc.n	8000874 <CopyDataInit>
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000888:	e002      	b.n	8000890 <LoopFillZerobss>

0800088a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800088c:	f842 3b04 	str.w	r3, [r2], #4

08000890 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000894:	d3f9      	bcc.n	800088a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000896:	f7ff ffb7 	bl	8000808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089a:	f001 fe71 	bl	8002580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089e:	f7ff fc55 	bl	800014c <main>
  bx lr
 80008a2:	4770      	bx	lr
  ldr r3, =_sidata
 80008a4:	08002624 	.word	0x08002624
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008b0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008b4:	20000080 	.word	0x20000080

080008b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_2_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x28>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x28>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f929 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fefc 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f933 	bl	8000b72 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f000 f909 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x1c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x20>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a03      	ldr	r2, [pc, #12]	; (8000968 <HAL_IncTick+0x20>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000008 	.word	0x20000008
 8000968:	2000007c 	.word	0x2000007c

0800096c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	2000007c 	.word	0x2000007c

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff fff0 	bl	800096c <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_Delay+0x40>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffe0 	bl	800096c <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000008 	.word	0x20000008

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f7ff ff90 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff49 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4c:	f7ff ff5e 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff ff90 	bl	8000a7c <NVIC_EncodePriority>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5f 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ffb0 	bl	8000ae0 <SysTick_Config>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b08b      	sub	sp, #44	; 0x2c
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	e127      	b.n	8000df0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f040 8116 	bne.w	8000dea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d034      	beq.n	8000c30 <HAL_GPIO_Init+0xa4>
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d80d      	bhi.n	8000be6 <HAL_GPIO_Init+0x5a>
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d02b      	beq.n	8000c26 <HAL_GPIO_Init+0x9a>
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d804      	bhi.n	8000bdc <HAL_GPIO_Init+0x50>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d031      	beq.n	8000c3a <HAL_GPIO_Init+0xae>
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d01c      	beq.n	8000c14 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bda:	e048      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	d043      	beq.n	8000c68 <HAL_GPIO_Init+0xdc>
 8000be0:	2b11      	cmp	r3, #17
 8000be2:	d01b      	beq.n	8000c1c <HAL_GPIO_Init+0x90>
          break;
 8000be4:	e043      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000be6:	4a89      	ldr	r2, [pc, #548]	; (8000e0c <HAL_GPIO_Init+0x280>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d026      	beq.n	8000c3a <HAL_GPIO_Init+0xae>
 8000bec:	4a87      	ldr	r2, [pc, #540]	; (8000e0c <HAL_GPIO_Init+0x280>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d806      	bhi.n	8000c00 <HAL_GPIO_Init+0x74>
 8000bf2:	4a87      	ldr	r2, [pc, #540]	; (8000e10 <HAL_GPIO_Init+0x284>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d020      	beq.n	8000c3a <HAL_GPIO_Init+0xae>
 8000bf8:	4a86      	ldr	r2, [pc, #536]	; (8000e14 <HAL_GPIO_Init+0x288>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d01d      	beq.n	8000c3a <HAL_GPIO_Init+0xae>
          break;
 8000bfe:	e036      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c00:	4a85      	ldr	r2, [pc, #532]	; (8000e18 <HAL_GPIO_Init+0x28c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d019      	beq.n	8000c3a <HAL_GPIO_Init+0xae>
 8000c06:	4a85      	ldr	r2, [pc, #532]	; (8000e1c <HAL_GPIO_Init+0x290>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d016      	beq.n	8000c3a <HAL_GPIO_Init+0xae>
 8000c0c:	4a84      	ldr	r2, [pc, #528]	; (8000e20 <HAL_GPIO_Init+0x294>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d013      	beq.n	8000c3a <HAL_GPIO_Init+0xae>
          break;
 8000c12:	e02c      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e028      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	3304      	adds	r3, #4
 8000c22:	623b      	str	r3, [r7, #32]
          break;
 8000c24:	e023      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e01e      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	330c      	adds	r3, #12
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e019      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c42:	2304      	movs	r3, #4
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e012      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d105      	bne.n	8000c5c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c50:	2308      	movs	r3, #8
 8000c52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	611a      	str	r2, [r3, #16]
          break;
 8000c5a:	e008      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	615a      	str	r2, [r3, #20]
          break;
 8000c66:	e002      	b.n	8000c6e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	2bff      	cmp	r3, #255	; 0xff
 8000c72:	d801      	bhi.n	8000c78 <HAL_GPIO_Init+0xec>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	e001      	b.n	8000c7c <HAL_GPIO_Init+0xf0>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	2bff      	cmp	r3, #255	; 0xff
 8000c82:	d802      	bhi.n	8000c8a <HAL_GPIO_Init+0xfe>
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_Init+0x104>
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	3b08      	subs	r3, #8
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	210f      	movs	r1, #15
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	6a39      	ldr	r1, [r7, #32]
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	431a      	orrs	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 8096 	beq.w	8000dea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbe:	4b59      	ldr	r3, [pc, #356]	; (8000e24 <HAL_GPIO_Init+0x298>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a58      	ldr	r2, [pc, #352]	; (8000e24 <HAL_GPIO_Init+0x298>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b56      	ldr	r3, [pc, #344]	; (8000e24 <HAL_GPIO_Init+0x298>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd6:	4a54      	ldr	r2, [pc, #336]	; (8000e28 <HAL_GPIO_Init+0x29c>)
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4b      	ldr	r2, [pc, #300]	; (8000e2c <HAL_GPIO_Init+0x2a0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d013      	beq.n	8000d2a <HAL_GPIO_Init+0x19e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <HAL_GPIO_Init+0x2a4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00d      	beq.n	8000d26 <HAL_GPIO_Init+0x19a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a49      	ldr	r2, [pc, #292]	; (8000e34 <HAL_GPIO_Init+0x2a8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d007      	beq.n	8000d22 <HAL_GPIO_Init+0x196>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a48      	ldr	r2, [pc, #288]	; (8000e38 <HAL_GPIO_Init+0x2ac>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_GPIO_Init+0x192>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e006      	b.n	8000d2c <HAL_GPIO_Init+0x1a0>
 8000d1e:	2304      	movs	r3, #4
 8000d20:	e004      	b.n	8000d2c <HAL_GPIO_Init+0x1a0>
 8000d22:	2302      	movs	r3, #2
 8000d24:	e002      	b.n	8000d2c <HAL_GPIO_Init+0x1a0>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <HAL_GPIO_Init+0x1a0>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2e:	f002 0203 	and.w	r2, r2, #3
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	4093      	lsls	r3, r2
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3c:	493a      	ldr	r1, [pc, #232]	; (8000e28 <HAL_GPIO_Init+0x29c>)
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d56:	4b39      	ldr	r3, [pc, #228]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4938      	ldr	r1, [pc, #224]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d64:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	4933      	ldr	r1, [pc, #204]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000d6e:	4013      	ands	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d006      	beq.n	8000d8c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	492e      	ldr	r1, [pc, #184]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	604b      	str	r3, [r1, #4]
 8000d8a:	e006      	b.n	8000d9a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4929      	ldr	r1, [pc, #164]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000d96:	4013      	ands	r3, r2
 8000d98:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da6:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	4924      	ldr	r1, [pc, #144]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	608b      	str	r3, [r1, #8]
 8000db2:	e006      	b.n	8000dc2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	491f      	ldr	r1, [pc, #124]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	491a      	ldr	r1, [pc, #104]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	60cb      	str	r3, [r1, #12]
 8000dda:	e006      	b.n	8000dea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4915      	ldr	r1, [pc, #84]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	3301      	adds	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f47f aed0 	bne.w	8000ba0 <HAL_GPIO_Init+0x14>
  }
}
 8000e00:	bf00      	nop
 8000e02:	372c      	adds	r7, #44	; 0x2c
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	10210000 	.word	0x10210000
 8000e10:	10110000 	.word	0x10110000
 8000e14:	10120000 	.word	0x10120000
 8000e18:	10310000 	.word	0x10310000
 8000e1c:	10320000 	.word	0x10320000
 8000e20:	10220000 	.word	0x10220000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40010c00 	.word	0x40010c00
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40011400 	.word	0x40011400
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e50:	787b      	ldrb	r3, [r7, #1]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e5c:	e003      	b.n	8000e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	041a      	lsls	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	611a      	str	r2, [r3, #16]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e88:	887a      	ldrh	r2, [r7, #2]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e90:	887a      	ldrh	r2, [r7, #2]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	611a      	str	r2, [r3, #16]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e10f      	b.n	80010d2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d106      	bne.n	8000ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fc36 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2224      	movs	r2, #36	; 0x24
 8000ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ee4:	f001 fb1a 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8000ee8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	4a7b      	ldr	r2, [pc, #492]	; (80010dc <HAL_I2C_Init+0x23c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d807      	bhi.n	8000f04 <HAL_I2C_Init+0x64>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4a7a      	ldr	r2, [pc, #488]	; (80010e0 <HAL_I2C_Init+0x240>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	bf94      	ite	ls
 8000efc:	2301      	movls	r3, #1
 8000efe:	2300      	movhi	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	e006      	b.n	8000f12 <HAL_I2C_Init+0x72>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4a77      	ldr	r2, [pc, #476]	; (80010e4 <HAL_I2C_Init+0x244>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	bf94      	ite	ls
 8000f0c:	2301      	movls	r3, #1
 8000f0e:	2300      	movhi	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0db      	b.n	80010d2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4a72      	ldr	r2, [pc, #456]	; (80010e8 <HAL_I2C_Init+0x248>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9b      	lsrs	r3, r3, #18
 8000f24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4a64      	ldr	r2, [pc, #400]	; (80010dc <HAL_I2C_Init+0x23c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d802      	bhi.n	8000f54 <HAL_I2C_Init+0xb4>
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	3301      	adds	r3, #1
 8000f52:	e009      	b.n	8000f68 <HAL_I2C_Init+0xc8>
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a63      	ldr	r2, [pc, #396]	; (80010ec <HAL_I2C_Init+0x24c>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	099b      	lsrs	r3, r3, #6
 8000f66:	3301      	adds	r3, #1
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4956      	ldr	r1, [pc, #344]	; (80010dc <HAL_I2C_Init+0x23c>)
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d80d      	bhi.n	8000fa4 <HAL_I2C_Init+0x104>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1e59      	subs	r1, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f96:	3301      	adds	r3, #1
 8000f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	bf38      	it	cc
 8000fa0:	2304      	movcc	r3, #4
 8000fa2:	e04f      	b.n	8001044 <HAL_I2C_Init+0x1a4>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d111      	bne.n	8000fd0 <HAL_I2C_Init+0x130>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	1e58      	subs	r0, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6859      	ldr	r1, [r3, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	440b      	add	r3, r1
 8000fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf0c      	ite	eq
 8000fc8:	2301      	moveq	r3, #1
 8000fca:	2300      	movne	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	e012      	b.n	8000ff6 <HAL_I2C_Init+0x156>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1e58      	subs	r0, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6859      	ldr	r1, [r3, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	0099      	lsls	r1, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_I2C_Init+0x15e>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e022      	b.n	8001044 <HAL_I2C_Init+0x1a4>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10e      	bne.n	8001024 <HAL_I2C_Init+0x184>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	1e58      	subs	r0, r3, #1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6859      	ldr	r1, [r3, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	440b      	add	r3, r1
 8001014:	fbb0 f3f3 	udiv	r3, r0, r3
 8001018:	3301      	adds	r3, #1
 800101a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800101e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001022:	e00f      	b.n	8001044 <HAL_I2C_Init+0x1a4>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1e58      	subs	r0, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6859      	ldr	r1, [r3, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	0099      	lsls	r1, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	fbb0 f3f3 	udiv	r3, r0, r3
 800103a:	3301      	adds	r3, #1
 800103c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	6809      	ldr	r1, [r1, #0]
 8001048:	4313      	orrs	r3, r2
 800104a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69da      	ldr	r2, [r3, #28]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6911      	ldr	r1, [r2, #16]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68d2      	ldr	r2, [r2, #12]
 800107e:	4311      	orrs	r1, r2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	430b      	orrs	r3, r1
 8001086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0201 	orr.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2220      	movs	r2, #32
 80010be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	000186a0 	.word	0x000186a0
 80010e0:	001e847f 	.word	0x001e847f
 80010e4:	003d08ff 	.word	0x003d08ff
 80010e8:	431bde83 	.word	0x431bde83
 80010ec:	10624dd3 	.word	0x10624dd3

080010f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	461a      	mov	r2, r3
 80010fc:	460b      	mov	r3, r1
 80010fe:	817b      	strh	r3, [r7, #10]
 8001100:	4613      	mov	r3, r2
 8001102:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff fc32 	bl	800096c <HAL_GetTick>
 8001108:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b20      	cmp	r3, #32
 8001114:	f040 80e0 	bne.w	80012d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2319      	movs	r3, #25
 800111e:	2201      	movs	r2, #1
 8001120:	4970      	ldr	r1, [pc, #448]	; (80012e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 fc48 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800112e:	2302      	movs	r3, #2
 8001130:	e0d3      	b.n	80012da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_I2C_Master_Transmit+0x50>
 800113c:	2302      	movs	r3, #2
 800113e:	e0cc      	b.n	80012da <HAL_I2C_Master_Transmit+0x1ea>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b01      	cmp	r3, #1
 8001154:	d007      	beq.n	8001166 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001174:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2221      	movs	r2, #33	; 0x21
 800117a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2210      	movs	r2, #16
 8001182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	893a      	ldrh	r2, [r7, #8]
 8001196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119c:	b29a      	uxth	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011a8:	8979      	ldrh	r1, [r7, #10]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	6a3a      	ldr	r2, [r7, #32]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fad6 	bl	8001760 <I2C_MasterRequestWrite>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e08d      	b.n	80012da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80011d4:	e066      	b.n	80012a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	6a39      	ldr	r1, [r7, #32]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 fcc2 	bl	8001b64 <I2C_WaitOnTXEFlagUntilTimeout>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00d      	beq.n	8001202 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d107      	bne.n	80011fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e06b      	b.n	80012da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121c:	b29b      	uxth	r3, r3
 800121e:	3b01      	subs	r3, #1
 8001220:	b29a      	uxth	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800122a:	3b01      	subs	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b04      	cmp	r3, #4
 800123e:	d11b      	bne.n	8001278 <HAL_I2C_Master_Transmit+0x188>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001244:	2b00      	cmp	r3, #0
 8001246:	d017      	beq.n	8001278 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001262:	b29b      	uxth	r3, r3
 8001264:	3b01      	subs	r3, #1
 8001266:	b29a      	uxth	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001270:	3b01      	subs	r3, #1
 8001272:	b29a      	uxth	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	6a39      	ldr	r1, [r7, #32]
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 fcb2 	bl	8001be6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00d      	beq.n	80012a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	2b04      	cmp	r3, #4
 800128e:	d107      	bne.n	80012a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800129e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e01a      	b.n	80012da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d194      	bne.n	80011d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2220      	movs	r2, #32
 80012c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e000      	b.n	80012da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80012d8:	2302      	movs	r3, #2
  }
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	00100002 	.word	0x00100002
 80012e8:	ffff0000 	.word	0xffff0000

080012ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	461a      	mov	r2, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	817b      	strh	r3, [r7, #10]
 80012fc:	4613      	mov	r3, r2
 80012fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff fb34 	bl	800096c <HAL_GetTick>
 8001304:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b20      	cmp	r3, #32
 8001310:	f040 8213 	bne.w	800173a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2319      	movs	r3, #25
 800131a:	2201      	movs	r2, #1
 800131c:	497e      	ldr	r1, [pc, #504]	; (8001518 <HAL_I2C_Master_Receive+0x22c>)
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 fb4a 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800132a:	2302      	movs	r3, #2
 800132c:	e206      	b.n	800173c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_I2C_Master_Receive+0x50>
 8001338:	2302      	movs	r3, #2
 800133a:	e1ff      	b.n	800173c <HAL_I2C_Master_Receive+0x450>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b01      	cmp	r3, #1
 8001350:	d007      	beq.n	8001362 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0201 	orr.w	r2, r2, #1
 8001360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2222      	movs	r2, #34	; 0x22
 8001376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2210      	movs	r2, #16
 800137e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	893a      	ldrh	r2, [r7, #8]
 8001392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001398:	b29a      	uxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4a5e      	ldr	r2, [pc, #376]	; (800151c <HAL_I2C_Master_Receive+0x230>)
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013a4:	8979      	ldrh	r1, [r7, #10]
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fa4e 	bl	800184c <I2C_MasterRequestRead>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e1c0      	b.n	800173c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d113      	bne.n	80013ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	623b      	str	r3, [r7, #32]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	623b      	str	r3, [r7, #32]
 80013d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e194      	b.n	8001714 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d11d      	bne.n	800142e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001400:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001402:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001428:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800142a:	b662      	cpsie	i
 800142c:	e172      	b.n	8001714 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001432:	2b02      	cmp	r3, #2
 8001434:	d11d      	bne.n	8001472 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001444:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001446:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800146c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800146e:	b662      	cpsie	i
 8001470:	e150      	b.n	8001714 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001498:	e13c      	b.n	8001714 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149e:	2b03      	cmp	r3, #3
 80014a0:	f200 80f5 	bhi.w	800168e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d123      	bne.n	80014f4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fbd9 	bl	8001c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e13d      	b.n	800173c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014f2:	e10f      	b.n	8001714 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d150      	bne.n	800159e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001502:	2200      	movs	r2, #0
 8001504:	4906      	ldr	r1, [pc, #24]	; (8001520 <HAL_I2C_Master_Receive+0x234>)
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fa56 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e112      	b.n	800173c <HAL_I2C_Master_Receive+0x450>
 8001516:	bf00      	nop
 8001518:	00100002 	.word	0x00100002
 800151c:	ffff0000 	.word	0xffff0000
 8001520:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001534:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001552:	3b01      	subs	r3, #1
 8001554:	b29a      	uxth	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001568:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	3b01      	subs	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	3b01      	subs	r3, #1
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800159c:	e0ba      	b.n	8001714 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	2200      	movs	r2, #0
 80015a6:	4967      	ldr	r1, [pc, #412]	; (8001744 <HAL_I2C_Master_Receive+0x458>)
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fa05 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0c1      	b.n	800173c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001602:	2200      	movs	r2, #0
 8001604:	494f      	ldr	r1, [pc, #316]	; (8001744 <HAL_I2C_Master_Receive+0x458>)
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 f9d6 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e092      	b.n	800173c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001624:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001642:	3b01      	subs	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164e:	b29b      	uxth	r3, r3
 8001650:	3b01      	subs	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001658:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001676:	3b01      	subs	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001682:	b29b      	uxth	r3, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800168c:	e042      	b.n	8001714 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fae8 	bl	8001c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e04c      	b.n	800173c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d118      	bne.n	8001714 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170a:	b29b      	uxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f aebe 	bne.w	800149a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2220      	movs	r2, #32
 8001722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800173a:	2302      	movs	r3, #2
  }
}
 800173c:	4618      	mov	r0, r3
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	00010004 	.word	0x00010004

08001748 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
	...

08001760 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af02      	add	r7, sp, #8
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	460b      	mov	r3, r1
 800176e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b08      	cmp	r3, #8
 800177a:	d006      	beq.n	800178a <I2C_MasterRequestWrite+0x2a>
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d003      	beq.n	800178a <I2C_MasterRequestWrite+0x2a>
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001788:	d108      	bne.n	800179c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00b      	b.n	80017b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	d107      	bne.n	80017b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f8f9 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e035      	b.n	800183c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017d8:	d108      	bne.n	80017ec <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	e01b      	b.n	8001824 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017ec:	897b      	ldrh	r3, [r7, #10]
 80017ee:	11db      	asrs	r3, r3, #7
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 0306 	and.w	r3, r3, #6
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f063 030f 	orn	r3, r3, #15
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <I2C_MasterRequestWrite+0xe4>)
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f92b 	bl	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e010      	b.n	800183c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800181a:	897b      	ldrh	r3, [r7, #10]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <I2C_MasterRequestWrite+0xe8>)
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f91b 	bl	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	00010008 	.word	0x00010008
 8001848:	00010002 	.word	0x00010002

0800184c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	460b      	mov	r3, r1
 800185a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001870:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b08      	cmp	r3, #8
 8001876:	d006      	beq.n	8001886 <I2C_MasterRequestRead+0x3a>
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d003      	beq.n	8001886 <I2C_MasterRequestRead+0x3a>
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001884:	d108      	bne.n	8001898 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e00b      	b.n	80018b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	2b11      	cmp	r3, #17
 800189e:	d107      	bne.n	80018b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f87b 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e06d      	b.n	80019a8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018d4:	d108      	bne.n	80018e8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018d6:	897b      	ldrh	r3, [r7, #10]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	e053      	b.n	8001990 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	11db      	asrs	r3, r3, #7
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f003 0306 	and.w	r3, r3, #6
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f063 030f 	orn	r3, r3, #15
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	492a      	ldr	r1, [pc, #168]	; (80019b0 <I2C_MasterRequestRead+0x164>)
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f8ad 	bl	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e048      	b.n	80019a8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001916:	897b      	ldrh	r3, [r7, #10]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4923      	ldr	r1, [pc, #140]	; (80019b4 <I2C_MasterRequestRead+0x168>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f89d 	bl	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e038      	b.n	80019a8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800195a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f825 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e017      	b.n	80019a8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001978:	897b      	ldrh	r3, [r7, #10]
 800197a:	11db      	asrs	r3, r3, #7
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f003 0306 	and.w	r3, r3, #6
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f063 030e 	orn	r3, r3, #14
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4907      	ldr	r1, [pc, #28]	; (80019b4 <I2C_MasterRequestRead+0x168>)
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f865 	bl	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	00010008 	.word	0x00010008
 80019b4:	00010002 	.word	0x00010002

080019b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019c8:	e025      	b.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d021      	beq.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d2:	f7fe ffcb 	bl	800096c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d302      	bcc.n	80019e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d116      	bne.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f043 0220 	orr.w	r2, r3, #32
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e023      	b.n	8001a5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d10d      	bne.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf0c      	ite	eq
 8001a32:	2301      	moveq	r3, #1
 8001a34:	2300      	movne	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	e00c      	b.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4013      	ands	r3, r2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d0b6      	beq.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a74:	e051      	b.n	8001b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a84:	d123      	bne.n	8001ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f043 0204 	orr.w	r2, r3, #4
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e046      	b.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d021      	beq.n	8001b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad6:	f7fe ff49 	bl	800096c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d302      	bcc.n	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d116      	bne.n	8001b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f043 0220 	orr.w	r2, r3, #32
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e020      	b.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10c      	bne.n	8001b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	e00b      	b.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	43da      	mvns	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d18d      	bne.n	8001a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b70:	e02d      	b.n	8001bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f8ce 	bl	8001d14 <I2C_IsAcknowledgeFailed>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e02d      	b.n	8001bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d021      	beq.n	8001bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8a:	f7fe feef 	bl	800096c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d302      	bcc.n	8001ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d116      	bne.n	8001bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0220 	orr.w	r2, r3, #32
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e007      	b.n	8001bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd8:	2b80      	cmp	r3, #128	; 0x80
 8001bda:	d1ca      	bne.n	8001b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bf2:	e02d      	b.n	8001c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f88d 	bl	8001d14 <I2C_IsAcknowledgeFailed>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e02d      	b.n	8001c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d021      	beq.n	8001c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0c:	f7fe feae 	bl	800096c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d302      	bcc.n	8001c22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e007      	b.n	8001c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d1ca      	bne.n	8001bf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c74:	e042      	b.n	8001cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d119      	bne.n	8001cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0210 	mvn.w	r2, #16
 8001c8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2220      	movs	r2, #32
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e029      	b.n	8001d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb8:	f7fe fe58 	bl	800096c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d302      	bcc.n	8001cce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d116      	bne.n	8001cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f043 0220 	orr.w	r2, r3, #32
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e007      	b.n	8001d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d1b5      	bne.n	8001c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2a:	d11b      	bne.n	8001d64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f043 0204 	orr.w	r2, r3, #4
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e26c      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8087 	beq.w	8001e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d90:	4b92      	ldr	r3, [pc, #584]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d00c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d9c:	4b8f      	ldr	r3, [pc, #572]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d112      	bne.n	8001dce <HAL_RCC_OscConfig+0x5e>
 8001da8:	4b8c      	ldr	r3, [pc, #560]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d10b      	bne.n	8001dce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db6:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d06c      	beq.n	8001e9c <HAL_RCC_OscConfig+0x12c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d168      	bne.n	8001e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e246      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x76>
 8001dd8:	4b80      	ldr	r3, [pc, #512]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a7f      	ldr	r2, [pc, #508]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e02e      	b.n	8001e44 <HAL_RCC_OscConfig+0xd4>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x98>
 8001dee:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7a      	ldr	r2, [pc, #488]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a77      	ldr	r2, [pc, #476]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e01d      	b.n	8001e44 <HAL_RCC_OscConfig+0xd4>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0xbc>
 8001e12:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a71      	ldr	r2, [pc, #452]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6e      	ldr	r2, [pc, #440]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0xd4>
 8001e2c:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b68      	ldr	r3, [pc, #416]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a67      	ldr	r2, [pc, #412]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fd8e 	bl	800096c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7fe fd8a 	bl	800096c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1fa      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0xe4>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe fd7a 	bl	800096c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7fe fd76 	bl	800096c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1e6      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x10c>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d063      	beq.n	8001f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eaa:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eb6:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d11c      	bne.n	8001efc <HAL_RCC_OscConfig+0x18c>
 8001ec2:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x176>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1ba      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4939      	ldr	r1, [pc, #228]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	e03a      	b.n	8001f72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f04:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe fd2f 	bl	800096c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f12:	f7fe fd2b 	bl	800096c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e19b      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4927      	ldr	r1, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fd0e 	bl	800096c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f54:	f7fe fd0a 	bl	800096c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e17a      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d03a      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d019      	beq.n	8001fba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8c:	f7fe fcee 	bl	800096c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f94:	f7fe fcea 	bl	800096c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e15a      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f000 fac6 	bl	8002544 <RCC_Delay>
 8001fb8:	e01c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7fe fcd4 	bl	800096c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc6:	e00f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7fe fcd0 	bl	800096c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d908      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e140      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	42420000 	.word	0x42420000
 8001fe4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b9e      	ldr	r3, [pc, #632]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e9      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a6 	beq.w	800214e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b97      	ldr	r3, [pc, #604]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	4b94      	ldr	r3, [pc, #592]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a93      	ldr	r2, [pc, #588]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201c:	61d3      	str	r3, [r2, #28]
 800201e:	4b91      	ldr	r3, [pc, #580]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202e:	4b8e      	ldr	r3, [pc, #568]	; (8002268 <HAL_RCC_OscConfig+0x4f8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d118      	bne.n	800206c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203a:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a8a      	ldr	r2, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x4f8>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002046:	f7fe fc91 	bl	800096c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204e:	f7fe fc8d 	bl	800096c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b64      	cmp	r3, #100	; 0x64
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0fd      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_RCC_OscConfig+0x4f8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x312>
 8002074:	4b7b      	ldr	r3, [pc, #492]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a7a      	ldr	r2, [pc, #488]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	e02d      	b.n	80020de <HAL_RCC_OscConfig+0x36e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x334>
 800208a:	4b76      	ldr	r3, [pc, #472]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a75      	ldr	r2, [pc, #468]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6213      	str	r3, [r2, #32]
 8002096:	4b73      	ldr	r3, [pc, #460]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a72      	ldr	r2, [pc, #456]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	e01c      	b.n	80020de <HAL_RCC_OscConfig+0x36e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d10c      	bne.n	80020c6 <HAL_RCC_OscConfig+0x356>
 80020ac:	4b6d      	ldr	r3, [pc, #436]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a6c      	ldr	r2, [pc, #432]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a69      	ldr	r2, [pc, #420]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	e00b      	b.n	80020de <HAL_RCC_OscConfig+0x36e>
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a66      	ldr	r2, [pc, #408]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6213      	str	r3, [r2, #32]
 80020d2:	4b64      	ldr	r3, [pc, #400]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a63      	ldr	r2, [pc, #396]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	f023 0304 	bic.w	r3, r3, #4
 80020dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d015      	beq.n	8002112 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7fe fc41 	bl	800096c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe fc3d 	bl	800096c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e0ab      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	4b57      	ldr	r3, [pc, #348]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ee      	beq.n	80020ee <HAL_RCC_OscConfig+0x37e>
 8002110:	e014      	b.n	800213c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe fc2b 	bl	800096c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7fe fc27 	bl	800096c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e095      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ee      	bne.n	800211a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b48      	ldr	r3, [pc, #288]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a47      	ldr	r2, [pc, #284]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8081 	beq.w	800225a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002158:	4b42      	ldr	r3, [pc, #264]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d061      	beq.n	8002228 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d146      	bne.n	80021fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216c:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x4fc>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7fe fbfb 	bl	800096c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe fbf7 	bl	800096c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e067      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218c:	4b35      	ldr	r3, [pc, #212]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021a2:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	492d      	ldr	r1, [pc, #180]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b4:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a19      	ldr	r1, [r3, #32]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	430b      	orrs	r3, r1
 80021c6:	4927      	ldr	r1, [pc, #156]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_RCC_OscConfig+0x4fc>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe fbcb 	bl	800096c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fbc7 	bl	800096c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e037      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x46a>
 80021f8:	e02f      	b.n	800225a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_RCC_OscConfig+0x4fc>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fbb4 	bl	800096c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fbb0 	bl	800096c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e020      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x498>
 8002226:	e018      	b.n	800225a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e013      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	429a      	cmp	r2, r3
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	40007000 	.word	0x40007000
 800226c:	42420060 	.word	0x42420060

08002270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0d0      	b.n	8002426 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d910      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b67      	ldr	r3, [pc, #412]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 0207 	bic.w	r2, r3, #7
 800229a:	4965      	ldr	r1, [pc, #404]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b63      	ldr	r3, [pc, #396]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0b8      	b.n	8002426 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022cc:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a58      	ldr	r2, [pc, #352]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e4:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a52      	ldr	r2, [pc, #328]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f0:	4b50      	ldr	r3, [pc, #320]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	494d      	ldr	r1, [pc, #308]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d040      	beq.n	8002390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d115      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e07f      	b.n	8002426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e073      	b.n	8002426 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06b      	b.n	8002426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234e:	4b39      	ldr	r3, [pc, #228]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f023 0203 	bic.w	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4936      	ldr	r1, [pc, #216]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002360:	f7fe fb04 	bl	800096c <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	e00a      	b.n	800237e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002368:	f7fe fb00 	bl	800096c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e053      	b.n	8002426 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 020c 	and.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	429a      	cmp	r2, r3
 800238e:	d1eb      	bne.n	8002368 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d210      	bcs.n	80023c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	4922      	ldr	r1, [pc, #136]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e032      	b.n	8002426 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4916      	ldr	r1, [pc, #88]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	490e      	ldr	r1, [pc, #56]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023fe:	f000 f821 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8002402:	4601      	mov	r1, r0
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	fa21 f303 	lsr.w	r3, r1, r3
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1cc>)
 8002418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1d0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fa62 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000
 8002434:	40021000 	.word	0x40021000
 8002438:	08002604 	.word	0x08002604
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	b490      	push	{r4, r7}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800244c:	1d3c      	adds	r4, r7, #4
 800244e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d002      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x40>
 800247e:	2b08      	cmp	r3, #8
 8002480:	d003      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x46>
 8002482:	e02d      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002486:	623b      	str	r3, [r7, #32]
      break;
 8002488:	e02d      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002496:	4413      	add	r3, r2
 8002498:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800249c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	0c5b      	lsrs	r3, r3, #17
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024b6:	4413      	add	r3, r2
 80024b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024c2:	fb02 f203 	mul.w	r2, r2, r3
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	e004      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	623b      	str	r3, [r7, #32]
      break;
 80024de:	e002      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024e2:	623b      	str	r3, [r7, #32]
      break;
 80024e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e6:	6a3b      	ldr	r3, [r7, #32]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc90      	pop	{r4, r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	080025f0 	.word	0x080025f0
 80024f8:	08002600 	.word	0x08002600
 80024fc:	40021000 	.word	0x40021000
 8002500:	007a1200 	.word	0x007a1200
 8002504:	003d0900 	.word	0x003d0900

08002508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b02      	ldr	r3, [pc, #8]	; (8002518 <HAL_RCC_GetHCLKFreq+0x10>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	20000000 	.word	0x20000000

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002520:	f7ff fff2 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002524:	4601      	mov	r1, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4a03      	ldr	r2, [pc, #12]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	08002614 	.word	0x08002614

08002544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <RCC_Delay+0x34>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <RCC_Delay+0x38>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0a5b      	lsrs	r3, r3, #9
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002560:	bf00      	nop
  }
  while (Delay --);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f9      	bne.n	8002560 <RCC_Delay+0x1c>
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000
 800257c:	10624dd3 	.word	0x10624dd3

08002580 <__libc_init_array>:
 8002580:	b570      	push	{r4, r5, r6, lr}
 8002582:	2500      	movs	r5, #0
 8002584:	4e0c      	ldr	r6, [pc, #48]	; (80025b8 <__libc_init_array+0x38>)
 8002586:	4c0d      	ldr	r4, [pc, #52]	; (80025bc <__libc_init_array+0x3c>)
 8002588:	1ba4      	subs	r4, r4, r6
 800258a:	10a4      	asrs	r4, r4, #2
 800258c:	42a5      	cmp	r5, r4
 800258e:	d109      	bne.n	80025a4 <__libc_init_array+0x24>
 8002590:	f000 f822 	bl	80025d8 <_init>
 8002594:	2500      	movs	r5, #0
 8002596:	4e0a      	ldr	r6, [pc, #40]	; (80025c0 <__libc_init_array+0x40>)
 8002598:	4c0a      	ldr	r4, [pc, #40]	; (80025c4 <__libc_init_array+0x44>)
 800259a:	1ba4      	subs	r4, r4, r6
 800259c:	10a4      	asrs	r4, r4, #2
 800259e:	42a5      	cmp	r5, r4
 80025a0:	d105      	bne.n	80025ae <__libc_init_array+0x2e>
 80025a2:	bd70      	pop	{r4, r5, r6, pc}
 80025a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025a8:	4798      	blx	r3
 80025aa:	3501      	adds	r5, #1
 80025ac:	e7ee      	b.n	800258c <__libc_init_array+0xc>
 80025ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025b2:	4798      	blx	r3
 80025b4:	3501      	adds	r5, #1
 80025b6:	e7f2      	b.n	800259e <__libc_init_array+0x1e>
 80025b8:	0800261c 	.word	0x0800261c
 80025bc:	0800261c 	.word	0x0800261c
 80025c0:	0800261c 	.word	0x0800261c
 80025c4:	08002620 	.word	0x08002620

080025c8 <memset>:
 80025c8:	4603      	mov	r3, r0
 80025ca:	4402      	add	r2, r0
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d100      	bne.n	80025d2 <memset+0xa>
 80025d0:	4770      	bx	lr
 80025d2:	f803 1b01 	strb.w	r1, [r3], #1
 80025d6:	e7f9      	b.n	80025cc <memset+0x4>

080025d8 <_init>:
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025da:	bf00      	nop
 80025dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025de:	bc08      	pop	{r3}
 80025e0:	469e      	mov	lr, r3
 80025e2:	4770      	bx	lr

080025e4 <_fini>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	bf00      	nop
 80025e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ea:	bc08      	pop	{r3}
 80025ec:	469e      	mov	lr, r3
 80025ee:	4770      	bx	lr
